
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 15 00 20 2d 1a 00 00 bb 4c 00 00 01 1a 00 00     ... -....L......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	01 1a 00 00 01 1a 00 00 01 1a 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	fd 16 00 00 01 1a 00 00 00 00 00 00 a9 16 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	01 1a 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
			switch (*fmt) {
  c0:	ad 17 00 00 ad 17 00 00 ad 17 00 00 ad 17 00 00     ................
  d0:	ad 17 00 00 ad 17 00 00 ad 17 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
				align = VA_STACK_ALIGN(void *);
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
			switch (*fmt) {
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
		buf = (void *) ROUND_UP(buf, align);
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
		if (is_str_arg) {
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f108 37ff 	add.w	r7, r8, #4294967295
			int v = va_arg(ap, int);
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
			}
			buf += sizeof(int);
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
				arg_idx--;
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
				parsing = false;
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
				continue;
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
				if (fmt[-1] == 'l') {
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
				parsing = false;
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
						align = VA_STACK_ALIGN(long long);
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
				size = sizeof(void *);
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
					v.ld = va_arg(ap, long double);
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
				buf = (void *) ROUND_UP(buf, align);
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
				if (buf0 != NULL) {
     1ae:	6073      	str	r3, [r6, #4]
					if (BUF_OFFSET + size > len) {
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
						*(long double *)buf = v.ld;
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
				buf += size;
     1be:	1b43      	subs	r3, r0, r5
				parsing = false;
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
			if (*++fmt == '\0') {
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
			if (!parsing) {
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
				if (*fmt == '%') {
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
					arg_idx++;
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
					parsing = true;
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
				align = VA_STACK_ALIGN(size_t);
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
			switch (*fmt) {
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fe:	fb0c f707 	mul.w	r7, ip, r7
			long long v = va_arg(ap, long long);
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
				}
			}
			buf += sizeof(long long);
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
		} else if (size == sizeof(int)) {
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
			int v = va_arg(ap, int);
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (buf0 != NULL) {
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
		} else if (size == sizeof(long long)) {
     224:	f1c2 0320 	rsb	r3, r2, #32
			long long v = va_arg(ap, long long);
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
			if (buf0 != NULL) {
     234:	4303      	orrs	r3, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
			s = va_arg(ap, char *);
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
			if (is_ro && !do_ro) {
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
				if (buf0 != NULL) {
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
					str_ptr_arg[s_idx] = arg_idx;
     26c:	b29b      	uxth	r3, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 111c 	mls	r1, lr, ip, r1
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
						s_ro_cnt++;
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
				s_idx++;
     28a:	429f      	cmp	r7, r3
					if (BUF_OFFSET + size > len) {
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
			switch (*fmt) {
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
				} else if (is_ro) {
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
					len += 1;
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
				} else if (rws_pos_en) {
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
					len += 2;
     2ac:	4283      	cmp	r3, r0
				} else if (rws_pos_en) {
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
	*(char **)buf0 = NULL;
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
	if (rws_pos_en) {
     2ec:	40bb      	lsls	r3, r7
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f2:	431c      	orrs	r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
		for (i = 0; i < s_idx; i++) {
     2fc:	40b8      	lsls	r0, r7
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
		for (i = 0; i < s_idx; i++) {
     304:	fa0e f507 	lsl.w	r5, lr, r7
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
			*buf++ = str_ptr_arg[i];
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
	for (i = 0; i < s_idx; i++) {
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	459a      	cmp	sl, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	fa02 f207 	lsl.w	r2, r2, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	d940      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
			if (BUF_OFFSET + 1 > len) {
     32c:	d204      	bcs.n	338 <CONFIG_FLASH_SIZE+0x138>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_FLASH_SIZE+0x138>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	f1a8 0002 	sub.w	r0, r8, #2
			if (BUF_OFFSET + 1 > len) {
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
			*buf++ = pos;
     33c:	b289      	uxth	r1, r1
		for (i = 0; i < s_idx; i++) {
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
		if (rws_pos_en) {
     350:	d92c      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     352:	1861      	adds	r1, r4, r1
			*buf++ = str_ptr_arg[i];
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_FLASH_SIZE+0x164>
     35a:	458e      	cmp	lr, r1
			size = 0;
     35c:	d902      	bls.n	364 <CONFIG_FLASH_SIZE+0x164>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
		*buf++ = str_ptr_pos[i];
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
		memcpy(buf, s, size);
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_FLASH_SIZE+0x17e>
     378:	d106      	bne.n	388 <CONFIG_FLASH_SIZE+0x188>
     37a:	454d      	cmp	r5, r9
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
	for (i = 0; i < s_idx; i++) {
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
			size = strlen(s) + 1;
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
		return -EFAULT;
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_FLASH_SIZE+0x138>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_FLASH_SIZE+0x164>

000003b0 <main>:

/* STEP 6 - Get the node identifier of the sensor */
#define I2C0_NODE DT_NODELABEL(ppg)

void main(void)
{
     3b0:	b510      	push	{r4, lr}

	printk("--- START ---\n\r");
     3b2:	480b      	ldr	r0, [pc, #44]	; (3e0 <main+0x30>)
     3b4:	f004 fafa 	bl	49ac <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3b8:	4c0a      	ldr	r4, [pc, #40]	; (3e4 <main+0x34>)
     3ba:	4620      	mov	r0, r4
     3bc:	f004 ffa8 	bl	5310 <z_device_is_ready>
	int ret;

/* STEP 7 - Retrieve the API-specific device structure and make sure that the device is ready to use  */
	static const struct i2c_dt_spec ppg_slave = I2C_DT_SPEC_GET(I2C0_NODE);
	if (!device_is_ready(ppg_slave.bus)) {
     3c0:	b928      	cbnz	r0, 3ce <main+0x1e>
		printk("I2C bus %s is nor ready!\n\r", ppg_slave.bus->name);
     3c2:	6821      	ldr	r1, [r4, #0]
     3c4:	4808      	ldr	r0, [pc, #32]	; (3e8 <main+0x38>)

/* STEP 11 - Convert the two bytes to a 12-bits */

		k_msleep(SLEEP_TIME_MS);
	}
}
     3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("I2C bus %s is nor ready!\n\r", ppg_slave.bus->name);
     3ca:	f004 baef 	b.w	49ac <printk>
	printk("Slave ready for communication!\n\r");
     3ce:	4807      	ldr	r0, [pc, #28]	; (3ec <main+0x3c>)
     3d0:	f004 faec 	bl	49ac <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3d4:	2100      	movs	r1, #0
     3d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     3da:	f004 f905 	bl	45e8 <z_impl_k_sleep>
     3de:	e7f9      	b.n	3d4 <main+0x24>
     3e0:	00005914 	.word	0x00005914
     3e4:	000055e0 	.word	0x000055e0
     3e8:	00005924 	.word	0x00005924
     3ec:	0000593f 	.word	0x0000593f

000003f0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     3f0:	4b01      	ldr	r3, [pc, #4]	; (3f8 <char_out+0x8>)
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	4718      	bx	r3
     3f6:	bf00      	nop
     3f8:	20000000 	.word	0x20000000

000003fc <__printk_hook_install>:
	_char_out = fn;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <CONFIG_MAIN_STACK_SIZE+0x4>)
     3fe:	6018      	str	r0, [r3, #0]
}
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	20000000 	.word	0x20000000

00000408 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     408:	b507      	push	{r0, r1, r2, lr}
     40a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     40c:	2100      	movs	r1, #0
     40e:	4602      	mov	r2, r0
     410:	9100      	str	r1, [sp, #0]
     412:	4803      	ldr	r0, [pc, #12]	; (420 <vprintk+0x18>)
     414:	f000 f914 	bl	640 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     418:	b003      	add	sp, #12
     41a:	f85d fb04 	ldr.w	pc, [sp], #4
     41e:	bf00      	nop
     420:	000003f1 	.word	0x000003f1

00000424 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     428:	8b05      	ldrh	r5, [r0, #24]
{
     42a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     42c:	0728      	lsls	r0, r5, #28
{
     42e:	4690      	mov	r8, r2
	if (processing) {
     430:	d411      	bmi.n	456 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     432:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     434:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     438:	f040 80cd 	bne.w	5d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xee>
			evt = process_recheck(mgr);
     43c:	4620      	mov	r0, r4
     43e:	f004 facc 	bl	49da <process_recheck>
		}

		if (evt == EVT_NOP) {
     442:	b178      	cbz	r0, 464 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     444:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     446:	8b21      	ldrh	r1, [r4, #24]
     448:	2804      	cmp	r0, #4
     44a:	d811      	bhi.n	470 <process_event+0x4c>
     44c:	e8df f000 	tbb	[pc, r0]
     450:	856d10c3 	.word	0x856d10c3
     454:	95          	.byte	0x95
     455:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     456:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     458:	bf0c      	ite	eq
     45a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     45e:	f045 0520 	orrne.w	r5, r5, #32
     462:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     464:	f388 8811 	msr	BASEPRI, r8
     468:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     470:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     474:	45aa      	cmp	sl, r5
     476:	f000 80a6 	beq.w	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     47a:	2700      	movs	r7, #0
     47c:	46b9      	mov	r9, r7
     47e:	463e      	mov	r6, r7
     480:	68a3      	ldr	r3, [r4, #8]
     482:	2b00      	cmp	r3, #0
     484:	f000 80bd 	beq.w	602 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     488:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     48c:	8321      	strh	r1, [r4, #24]
     48e:	f388 8811 	msr	BASEPRI, r8
     492:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     496:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     498:	2900      	cmp	r1, #0
     49a:	f000 80bb 	beq.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
	return node->next;
     49e:	680d      	ldr	r5, [r1, #0]
     4a0:	2900      	cmp	r1, #0
     4a2:	f000 80b7 	beq.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
		mon->callback(mgr, mon, state, res);
     4a6:	f8d1 8004 	ldr.w	r8, [r1, #4]
     4aa:	4633      	mov	r3, r6
     4ac:	4652      	mov	r2, sl
     4ae:	4620      	mov	r0, r4
     4b0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4b2:	2d00      	cmp	r5, #0
     4b4:	d076      	beq.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     4b6:	682b      	ldr	r3, [r5, #0]
     4b8:	4629      	mov	r1, r5
     4ba:	461d      	mov	r5, r3
     4bc:	e7f0      	b.n	4a0 <process_event+0x7c>
     4be:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     4c2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     4c4:	2a01      	cmp	r2, #1
     4c6:	d81b      	bhi.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
	list->head = NULL;
     4c8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4ca:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     4ce:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     4d0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4d2:	b289      	uxth	r1, r1
	list->tail = NULL;
     4d4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4d8:	d109      	bne.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4da:	463b      	mov	r3, r7
     4dc:	e003      	b.n	4e6 <process_event+0xc2>
				mgr->refs += 1U;
     4de:	8b62      	ldrh	r2, [r4, #26]
     4e0:	3201      	adds	r2, #1
     4e2:	8362      	strh	r2, [r4, #26]
	return node->next;
     4e4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4e6:	2b00      	cmp	r3, #0
     4e8:	d1f9      	bne.n	4de <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4ea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4ee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4f0:	4620      	mov	r0, r4
     4f2:	f004 fa72 	bl	49da <process_recheck>
     4f6:	2800      	cmp	r0, #0
     4f8:	d07b      	beq.n	5f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4fa:	f041 0120 	orr.w	r1, r1, #32
     4fe:	e077      	b.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
	} else if (state == ONOFF_STATE_TO_OFF) {
     500:	2b04      	cmp	r3, #4
     502:	d10a      	bne.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     504:	f021 0107 	bic.w	r1, r1, #7
     508:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     50a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     50c:	4620      	mov	r0, r4
     50e:	f004 fa64 	bl	49da <process_recheck>
     512:	b110      	cbz	r0, 51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     514:	f041 0120 	orr.w	r1, r1, #32
     518:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     51a:	8b21      	ldrh	r1, [r4, #24]
     51c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     520:	45aa      	cmp	sl, r5
     522:	d050      	beq.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
     524:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     526:	46b9      	mov	r9, r7
     528:	e7aa      	b.n	480 <process_event+0x5c>
			transit = mgr->transitions->start;
     52a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     52c:	f021 0107 	bic.w	r1, r1, #7
     530:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     534:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     536:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     53a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     53c:	d12d      	bne.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
		    || (transit != NULL)) {
     53e:	f1b9 0f00 	cmp.w	r9, #0
     542:	d040      	beq.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     544:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     548:	8321      	strh	r1, [r4, #24]
     54a:	f388 8811 	msr	BASEPRI, r8
     54e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     552:	493a      	ldr	r1, [pc, #232]	; (63c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x154>)
     554:	4620      	mov	r0, r4
     556:	47c8      	blx	r9
     558:	e029      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     55a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     55e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     560:	f041 0104 	orr.w	r1, r1, #4
     564:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     566:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     568:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     56c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     56e:	d0e6      	beq.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     570:	2700      	movs	r7, #0
		res = 0;
     572:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     574:	f04f 0a04 	mov.w	sl, #4
     578:	e782      	b.n	480 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     57a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     57e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     580:	f041 0105 	orr.w	r1, r1, #5
     584:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     586:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     588:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     58c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     58e:	d0d6      	beq.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     590:	2700      	movs	r7, #0
		res = 0;
     592:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     594:	f04f 0a05 	mov.w	sl, #5
     598:	e772      	b.n	480 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     59a:	2700      	movs	r7, #0
		res = 0;
     59c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     59e:	f04f 0a06 	mov.w	sl, #6
     5a2:	e76d      	b.n	480 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5a4:	462b      	mov	r3, r5
     5a6:	e787      	b.n	4b8 <process_event+0x94>
			if (transit != NULL) {
     5a8:	f1b9 0f00 	cmp.w	r9, #0
     5ac:	d1d1      	bne.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
	__asm__ volatile(
     5ae:	f04f 0320 	mov.w	r3, #32
     5b2:	f3ef 8811 	mrs	r8, BASEPRI
     5b6:	f383 8812 	msr	BASEPRI_MAX, r3
     5ba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5be:	8b23      	ldrh	r3, [r4, #24]
     5c0:	f023 0308 	bic.w	r3, r3, #8
     5c4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5c6:	8b25      	ldrh	r5, [r4, #24]
     5c8:	06ea      	lsls	r2, r5, #27
     5ca:	d52e      	bpl.n	62a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x142>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5cc:	f025 0310 	bic.w	r3, r5, #16
     5d0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     5d2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     5d6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5da:	2e00      	cmp	r6, #0
     5dc:	f6bf af6f 	bge.w	4be <process_event+0x9a>
	list->head = NULL;
     5e0:	2300      	movs	r3, #0
		*clients = mgr->clients;
     5e2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     5e4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e8:	f021 0107 	bic.w	r1, r1, #7
     5ec:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5f0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f2:	8b21      	ldrh	r1, [r4, #24]
     5f4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5f8:	45aa      	cmp	sl, r5
     5fa:	f04f 0900 	mov.w	r9, #0
     5fe:	f47f af3f 	bne.w	480 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     602:	2f00      	cmp	r7, #0
     604:	d09b      	beq.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     606:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     60a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     60c:	f388 8811 	msr	BASEPRI, r8
     610:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     614:	2f00      	cmp	r7, #0
     616:	d0c7      	beq.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
	return node->next;
     618:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     61a:	4639      	mov	r1, r7
     61c:	4633      	mov	r3, r6
     61e:	4652      	mov	r2, sl
     620:	4620      	mov	r0, r4
     622:	f004 fa06 	bl	4a32 <notify_one>
	list->head = node;
     626:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     628:	e7f4      	b.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     62a:	06ab      	lsls	r3, r5, #26
     62c:	f57f af1a 	bpl.w	464 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     630:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     634:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     636:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     63a:	e6ff      	b.n	43c <process_event+0x18>
     63c:	00004a5f 	.word	0x00004a5f

00000640 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     644:	b09f      	sub	sp, #124	; 0x7c
     646:	4682      	mov	sl, r0
     648:	9103      	str	r1, [sp, #12]
     64a:	4616      	mov	r6, r2
     64c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     64e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     650:	7830      	ldrb	r0, [r6, #0]
     652:	b910      	cbnz	r0, 65a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     654:	4628      	mov	r0, r5
     656:	f000 bd8b 	b.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
			OUTC(*fp++);
     65a:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
     65c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     65e:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
     660:	d006      	beq.n	670 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     662:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
     664:	47d0      	blx	sl
     666:	2800      	cmp	r0, #0
     668:	f2c0 8582 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
     66c:	3501      	adds	r5, #1
		if (bps == NULL) {
     66e:	e22b      	b.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		} state = {
     670:	2218      	movs	r2, #24
     672:	2100      	movs	r1, #0
     674:	a810      	add	r0, sp, #64	; 0x40
     676:	f004 fb4c 	bl	4d12 <memset>
	if (*sp == '%') {
     67a:	7873      	ldrb	r3, [r6, #1]
     67c:	2b25      	cmp	r3, #37	; 0x25
     67e:	d07d      	beq.n	77c <z_cbvprintf_impl+0x13c>
     680:	2300      	movs	r3, #0
     682:	1c70      	adds	r0, r6, #1
     684:	4698      	mov	r8, r3
     686:	469e      	mov	lr, r3
     688:	469c      	mov	ip, r3
     68a:	461f      	mov	r7, r3
     68c:	4601      	mov	r1, r0
		switch (*sp) {
     68e:	f810 2b01 	ldrb.w	r2, [r0], #1
     692:	2a2b      	cmp	r2, #43	; 0x2b
     694:	f000 80a1 	beq.w	7da <z_cbvprintf_impl+0x19a>
     698:	f200 8098 	bhi.w	7cc <z_cbvprintf_impl+0x18c>
     69c:	2a20      	cmp	r2, #32
     69e:	f000 809f 	beq.w	7e0 <z_cbvprintf_impl+0x1a0>
     6a2:	2a23      	cmp	r2, #35	; 0x23
     6a4:	f000 809f 	beq.w	7e6 <z_cbvprintf_impl+0x1a6>
     6a8:	b12b      	cbz	r3, 6b6 <z_cbvprintf_impl+0x76>
     6aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     6b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     6b6:	f1b8 0f00 	cmp.w	r8, #0
     6ba:	d005      	beq.n	6c8 <z_cbvprintf_impl+0x88>
     6bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6c0:	f043 0320 	orr.w	r3, r3, #32
     6c4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     6c8:	f1be 0f00 	cmp.w	lr, #0
     6cc:	d005      	beq.n	6da <z_cbvprintf_impl+0x9a>
     6ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6d2:	f043 0310 	orr.w	r3, r3, #16
     6d6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     6da:	f1bc 0f00 	cmp.w	ip, #0
     6de:	d005      	beq.n	6ec <z_cbvprintf_impl+0xac>
     6e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6e4:	f043 0308 	orr.w	r3, r3, #8
     6e8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     6ec:	b12f      	cbz	r7, 6fa <z_cbvprintf_impl+0xba>
     6ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6f2:	f043 0304 	orr.w	r3, r3, #4
     6f6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     6fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     6fe:	f003 0044 	and.w	r0, r3, #68	; 0x44
     702:	2844      	cmp	r0, #68	; 0x44
     704:	d103      	bne.n	70e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
     706:	f36f 1386 	bfc	r3, #6, #1
     70a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     70e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     712:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     718:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     71c:	d17f      	bne.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		conv->width_star = true;
     71e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     722:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     726:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     728:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
     72c:	781a      	ldrb	r2, [r3, #0]
     72e:	2a2e      	cmp	r2, #46	; 0x2e
     730:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     734:	bf0c      	ite	eq
     736:	2101      	moveq	r1, #1
     738:	2100      	movne	r1, #0
     73a:	f361 0241 	bfi	r2, r1, #1, #1
     73e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     742:	d178      	bne.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
	if (*sp == '*') {
     744:	785a      	ldrb	r2, [r3, #1]
     746:	2a2a      	cmp	r2, #42	; 0x2a
     748:	d06e      	beq.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
	++sp;
     74a:	3301      	adds	r3, #1
	size_t val = 0;
     74c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     74e:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     752:	4619      	mov	r1, r3
     754:	f811 0b01 	ldrb.w	r0, [r1], #1
     758:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     75c:	2f09      	cmp	r7, #9
     75e:	f240 80af 	bls.w	8c0 <__z_interrupt_stack_SIZEOF+0x80>
	conv->unsupported |= ((conv->prec_value < 0)
     762:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
     766:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     768:	f3c1 0040 	ubfx	r0, r1, #1, #1
     76c:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     770:	460a      	mov	r2, r1
     772:	f360 0241 	bfi	r2, r0, #1, #1
     776:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     77a:	e05c      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
		conv->specifier = *sp++;
     77c:	1cb2      	adds	r2, r6, #2
     77e:	9206      	str	r2, [sp, #24]
     780:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     784:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     788:	07df      	lsls	r7, r3, #31
     78a:	f140 8154 	bpl.w	a36 <__z_interrupt_stack_SIZEOF+0x1f6>
			width = va_arg(ap, int);
     78e:	f854 2b04 	ldr.w	r2, [r4], #4
     792:	9204      	str	r2, [sp, #16]
			if (width < 0) {
     794:	2a00      	cmp	r2, #0
     796:	da08      	bge.n	7aa <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
     798:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     79c:	f042 0204 	orr.w	r2, r2, #4
     7a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
     7a4:	9a04      	ldr	r2, [sp, #16]
     7a6:	4252      	negs	r2, r2
		int width = -1;
     7a8:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
     7aa:	0758      	lsls	r0, r3, #29
     7ac:	f140 814b 	bpl.w	a46 <__z_interrupt_stack_SIZEOF+0x206>
			int arg = va_arg(ap, int);
     7b0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
     7b4:	2f00      	cmp	r7, #0
     7b6:	f280 814a 	bge.w	a4e <__z_interrupt_stack_SIZEOF+0x20e>
				conv->prec_present = false;
     7ba:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     7be:	f36f 0341 	bfc	r3, #1, #1
     7c2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     7c6:	f04f 37ff 	mov.w	r7, #4294967295
     7ca:	e140      	b.n	a4e <__z_interrupt_stack_SIZEOF+0x20e>
		switch (*sp) {
     7cc:	2a2d      	cmp	r2, #45	; 0x2d
     7ce:	d00d      	beq.n	7ec <z_cbvprintf_impl+0x1ac>
     7d0:	2a30      	cmp	r2, #48	; 0x30
     7d2:	f47f af69 	bne.w	6a8 <z_cbvprintf_impl+0x68>
     7d6:	2301      	movs	r3, #1
	} while (loop);
     7d8:	e758      	b.n	68c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
     7da:	f04f 0c01 	mov.w	ip, #1
     7de:	e755      	b.n	68c <z_cbvprintf_impl+0x4c>
     7e0:	f04f 0e01 	mov.w	lr, #1
     7e4:	e752      	b.n	68c <z_cbvprintf_impl+0x4c>
     7e6:	f04f 0801 	mov.w	r8, #1
     7ea:	e74f      	b.n	68c <z_cbvprintf_impl+0x4c>
     7ec:	2701      	movs	r7, #1
     7ee:	e74d      	b.n	68c <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
     7f0:	fb0e 7202 	mla	r2, lr, r2, r7
     7f4:	3a30      	subs	r2, #48	; 0x30
     7f6:	4603      	mov	r3, r0
     7f8:	4618      	mov	r0, r3
     7fa:	f810 7b01 	ldrb.w	r7, [r0], #1
     7fe:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     802:	f1bc 0f09 	cmp.w	ip, #9
     806:	d9f3      	bls.n	7f0 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
     808:	4299      	cmp	r1, r3
     80a:	d08f      	beq.n	72c <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
     80c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
     810:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     812:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     814:	f362 0141 	bfi	r1, r2, #1, #1
     818:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
     81c:	e786      	b.n	72c <z_cbvprintf_impl+0xec>
     81e:	460b      	mov	r3, r1
	size_t val = 0;
     820:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     822:	f04f 0e0a 	mov.w	lr, #10
     826:	e7e7      	b.n	7f8 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
     828:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     82c:	f042 0204 	orr.w	r2, r2, #4
     830:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     834:	3302      	adds	r3, #2
	switch (*sp) {
     836:	781a      	ldrb	r2, [r3, #0]
     838:	2a6c      	cmp	r2, #108	; 0x6c
     83a:	d061      	beq.n	900 <__z_interrupt_stack_SIZEOF+0xc0>
     83c:	d845      	bhi.n	8ca <__z_interrupt_stack_SIZEOF+0x8a>
     83e:	2a68      	cmp	r2, #104	; 0x68
     840:	d04b      	beq.n	8da <__z_interrupt_stack_SIZEOF+0x9a>
     842:	2a6a      	cmp	r2, #106	; 0x6a
     844:	d065      	beq.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
     846:	2a4c      	cmp	r2, #76	; 0x4c
     848:	d06b      	beq.n	922 <__z_interrupt_stack_SIZEOF+0xe2>
	conv->specifier = *sp++;
     84a:	f813 2b01 	ldrb.w	r2, [r3], #1
     84e:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
     850:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     852:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
     856:	f200 80ad 	bhi.w	9b4 <__z_interrupt_stack_SIZEOF+0x174>
     85a:	2a6d      	cmp	r2, #109	; 0x6d
     85c:	d86e      	bhi.n	93c <__z_interrupt_stack_SIZEOF+0xfc>
     85e:	2a69      	cmp	r2, #105	; 0x69
     860:	f200 80a8 	bhi.w	9b4 <__z_interrupt_stack_SIZEOF+0x174>
     864:	2a57      	cmp	r2, #87	; 0x57
     866:	f200 8088 	bhi.w	97a <__z_interrupt_stack_SIZEOF+0x13a>
     86a:	2a41      	cmp	r2, #65	; 0x41
     86c:	d004      	beq.n	878 <__z_interrupt_stack_SIZEOF+0x38>
     86e:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     872:	2b02      	cmp	r3, #2
     874:	f200 809e 	bhi.w	9b4 <__z_interrupt_stack_SIZEOF+0x174>
		conv->specifier_cat = SPECIFIER_FP;
     878:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     87c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
     880:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
     882:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     886:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     88a:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
     88e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
     892:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     896:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
     89a:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     89e:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
     8a0:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
     8a4:	b2cb      	uxtb	r3, r1
     8a6:	f100 80c4 	bmi.w	a32 <__z_interrupt_stack_SIZEOF+0x1f2>
		if (conv->length_mod == LENGTH_L) {
     8aa:	f003 0278 	and.w	r2, r3, #120	; 0x78
     8ae:	2a18      	cmp	r2, #24
     8b0:	f040 80ae 	bne.w	a10 <__z_interrupt_stack_SIZEOF+0x1d0>
			conv->length_mod = LENGTH_NONE;
     8b4:	f36f 03c6 	bfc	r3, #3, #4
     8b8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
     8bc:	2300      	movs	r3, #0
     8be:	e09d      	b.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
		val = 10U * val + *sp++ - '0';
     8c0:	fb0c 0202 	mla	r2, ip, r2, r0
     8c4:	3a30      	subs	r2, #48	; 0x30
     8c6:	460b      	mov	r3, r1
     8c8:	e743      	b.n	752 <z_cbvprintf_impl+0x112>
	switch (*sp) {
     8ca:	2a74      	cmp	r2, #116	; 0x74
     8cc:	d025      	beq.n	91a <__z_interrupt_stack_SIZEOF+0xda>
     8ce:	2a7a      	cmp	r2, #122	; 0x7a
     8d0:	d1bb      	bne.n	84a <__z_interrupt_stack_SIZEOF+0xa>
		conv->length_mod = LENGTH_Z;
     8d2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     8d6:	2106      	movs	r1, #6
     8d8:	e00c      	b.n	8f4 <__z_interrupt_stack_SIZEOF+0xb4>
		if (*++sp == 'h') {
     8da:	785a      	ldrb	r2, [r3, #1]
     8dc:	2a68      	cmp	r2, #104	; 0x68
     8de:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     8e2:	d106      	bne.n	8f2 <__z_interrupt_stack_SIZEOF+0xb2>
			conv->length_mod = LENGTH_HH;
     8e4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8e6:	f361 02c6 	bfi	r2, r1, #3, #4
     8ea:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     8ee:	3302      	adds	r3, #2
     8f0:	e7ab      	b.n	84a <__z_interrupt_stack_SIZEOF+0xa>
			conv->length_mod = LENGTH_H;
     8f2:	2102      	movs	r1, #2
     8f4:	f361 02c6 	bfi	r2, r1, #3, #4
     8f8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     8fc:	3301      	adds	r3, #1
     8fe:	e7a4      	b.n	84a <__z_interrupt_stack_SIZEOF+0xa>
		if (*++sp == 'l') {
     900:	785a      	ldrb	r2, [r3, #1]
     902:	2a6c      	cmp	r2, #108	; 0x6c
     904:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     908:	d101      	bne.n	90e <__z_interrupt_stack_SIZEOF+0xce>
			conv->length_mod = LENGTH_LL;
     90a:	2104      	movs	r1, #4
     90c:	e7eb      	b.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
			conv->length_mod = LENGTH_L;
     90e:	2103      	movs	r1, #3
     910:	e7f0      	b.n	8f4 <__z_interrupt_stack_SIZEOF+0xb4>
		conv->length_mod = LENGTH_J;
     912:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     916:	2105      	movs	r1, #5
     918:	e7ec      	b.n	8f4 <__z_interrupt_stack_SIZEOF+0xb4>
		conv->length_mod = LENGTH_T;
     91a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     91e:	2107      	movs	r1, #7
     920:	e7e8      	b.n	8f4 <__z_interrupt_stack_SIZEOF+0xb4>
		conv->unsupported = true;
     922:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     926:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     92a:	f022 0202 	bic.w	r2, r2, #2
     92e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     932:	f042 0202 	orr.w	r2, r2, #2
     936:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     93a:	e7df      	b.n	8fc <__z_interrupt_stack_SIZEOF+0xbc>
	switch (conv->specifier) {
     93c:	3a6e      	subs	r2, #110	; 0x6e
     93e:	b2d3      	uxtb	r3, r2
     940:	2201      	movs	r2, #1
     942:	409a      	lsls	r2, r3
     944:	f240 4382 	movw	r3, #1154	; 0x482
     948:	421a      	tst	r2, r3
     94a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     94e:	d138      	bne.n	9c2 <__z_interrupt_stack_SIZEOF+0x182>
     950:	f012 0f24 	tst.w	r2, #36	; 0x24
     954:	d160      	bne.n	a18 <__z_interrupt_stack_SIZEOF+0x1d8>
     956:	07d1      	lsls	r1, r2, #31
     958:	d52c      	bpl.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
		conv->specifier_cat = SPECIFIER_PTR;
     95a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     95e:	f003 0378 	and.w	r3, r3, #120	; 0x78
     962:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     966:	2103      	movs	r1, #3
     968:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     96c:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
     970:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     974:	eb43 030c 	adc.w	r3, r3, ip
     978:	e040      	b.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
	switch (conv->specifier) {
     97a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     97e:	b2c9      	uxtb	r1, r1
     980:	2001      	movs	r0, #1
     982:	fa00 f101 	lsl.w	r1, r0, r1
     986:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     98a:	f47f af75 	bne.w	878 <__z_interrupt_stack_SIZEOF+0x38>
     98e:	f640 0301 	movw	r3, #2049	; 0x801
     992:	4219      	tst	r1, r3
     994:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     998:	d119      	bne.n	9ce <__z_interrupt_stack_SIZEOF+0x18e>
     99a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     99e:	d009      	beq.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
		conv->specifier_cat = SPECIFIER_SINT;
     9a0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     9a4:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9a8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9ac:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9ae:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b2:	d183      	bne.n	8bc <__z_interrupt_stack_SIZEOF+0x7c>
		conv->invalid = true;
     9b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     9b8:	f043 0301 	orr.w	r3, r3, #1
     9bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     9c0:	e77c      	b.n	8bc <__z_interrupt_stack_SIZEOF+0x7c>
		conv->specifier_cat = SPECIFIER_UINT;
     9c2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     9c6:	2102      	movs	r1, #2
     9c8:	f361 0202 	bfi	r2, r1, #0, #3
     9cc:	e7ec      	b.n	9a8 <__z_interrupt_stack_SIZEOF+0x168>
     9ce:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     9d2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     9d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9d8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9dc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9de:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     9e2:	bf02      	ittt	eq
     9e4:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     9e8:	f041 0101 	orreq.w	r1, r1, #1
     9ec:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     9f0:	2a63      	cmp	r2, #99	; 0x63
     9f2:	f47f af63 	bne.w	8bc <__z_interrupt_stack_SIZEOF+0x7c>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9f6:	3b00      	subs	r3, #0
     9f8:	bf18      	it	ne
     9fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     9fc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     a00:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a04:	430b      	orrs	r3, r1
     a06:	f363 0241 	bfi	r2, r3, #1, #1
     a0a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     a0e:	e6b9      	b.n	784 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
     a10:	f013 0f38 	tst.w	r3, #56	; 0x38
     a14:	d1ce      	bne.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
     a16:	e751      	b.n	8bc <__z_interrupt_stack_SIZEOF+0x7c>
		conv->specifier_cat = SPECIFIER_PTR;
     a18:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     a1c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     a1e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a22:	f361 0202 	bfi	r2, r1, #0, #3
     a26:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     a2a:	bf14      	ite	ne
     a2c:	2301      	movne	r3, #1
     a2e:	2300      	moveq	r3, #0
     a30:	e7e4      	b.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
			unsupported = true;
     a32:	2301      	movs	r3, #1
     a34:	e7e2      	b.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
		} else if (conv->width_present) {
     a36:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     a3a:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a3c:	bfb4      	ite	lt
     a3e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
     a40:	f04f 32ff 	movge.w	r2, #4294967295
     a44:	e6b0      	b.n	7a8 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
     a46:	0799      	lsls	r1, r3, #30
     a48:	f57f aebd 	bpl.w	7c6 <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
     a4c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     a4e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
     a52:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a54:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
     a58:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     a5c:	f003 0207 	and.w	r2, r3, #7
     a60:	2a04      	cmp	r2, #4
     a62:	d107      	bne.n	a74 <__z_interrupt_stack_SIZEOF+0x234>
		    && !conv->prec_present) {
     a64:	078a      	lsls	r2, r1, #30
     a66:	d405      	bmi.n	a74 <__z_interrupt_stack_SIZEOF+0x234>
			if (conv->specifier_a) {
     a68:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
     a6c:	2a00      	cmp	r2, #0
     a6e:	bfac      	ite	ge
     a70:	2706      	movge	r7, #6
     a72:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
     a74:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a78:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a7a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a7e:	d133      	bne.n	ae8 <__z_interrupt_stack_SIZEOF+0x2a8>
			switch (length_mod) {
     a80:	1ecb      	subs	r3, r1, #3
     a82:	2b04      	cmp	r3, #4
     a84:	d804      	bhi.n	a90 <__z_interrupt_stack_SIZEOF+0x250>
     a86:	e8df f003 	tbb	[pc, r3]
     a8a:	4621      	.short	0x4621
     a8c:	2146      	.short	0x2146
     a8e:	21          	.byte	0x21
     a8f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a90:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     a92:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     a94:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a98:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     a9c:	d11c      	bne.n	ad8 <__z_interrupt_stack_SIZEOF+0x298>
				value->sint = (signed char)value->sint;
     a9e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
     aa2:	17da      	asrs	r2, r3, #31
     aa4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
     aa8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     aaa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     aae:	9307      	str	r3, [sp, #28]
     ab0:	079b      	lsls	r3, r3, #30
     ab2:	d050      	beq.n	b56 <__z_interrupt_stack_SIZEOF+0x316>
			OUTS(sp, fp);
     ab4:	9b06      	ldr	r3, [sp, #24]
     ab6:	9903      	ldr	r1, [sp, #12]
     ab8:	4632      	mov	r2, r6
     aba:	4650      	mov	r0, sl
     abc:	f004 f8db 	bl	4c76 <outs>
     ac0:	2800      	cmp	r0, #0
     ac2:	f2c0 8355 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
     ac6:	4405      	add	r5, r0
			continue;
     ac8:	9e06      	ldr	r6, [sp, #24]
     aca:	e5c1      	b.n	650 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     acc:	f854 3b04 	ldr.w	r3, [r4], #4
     ad0:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     ad2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     ad6:	e7e8      	b.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
			} else if (length_mod == LENGTH_H) {
     ad8:	2902      	cmp	r1, #2
     ada:	d1e5      	bne.n	aa8 <__z_interrupt_stack_SIZEOF+0x268>
				value->sint = (short)value->sint;
     adc:	b21a      	sxth	r2, r3
     ade:	f343 33c0 	sbfx	r3, r3, #15, #1
     ae2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     ae6:	e7df      	b.n	aa8 <__z_interrupt_stack_SIZEOF+0x268>
		} else if (specifier_cat == SPECIFIER_UINT) {
     ae8:	2b02      	cmp	r3, #2
     aea:	d124      	bne.n	b36 <__z_interrupt_stack_SIZEOF+0x2f6>
			switch (length_mod) {
     aec:	1ecb      	subs	r3, r1, #3
     aee:	2b04      	cmp	r3, #4
     af0:	d804      	bhi.n	afc <__z_interrupt_stack_SIZEOF+0x2bc>
     af2:	e8df f003 	tbb	[pc, r3]
     af6:	1018      	.short	0x1018
     af8:	1810      	.short	0x1810
     afa:	18          	.byte	0x18
     afb:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     afc:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     afe:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b02:	f04f 0200 	mov.w	r2, #0
     b06:	d014      	beq.n	b32 <__z_interrupt_stack_SIZEOF+0x2f2>
			} else if (length_mod == LENGTH_H) {
     b08:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     b0a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     b0e:	d1cc      	bne.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
				value->uint = (unsigned short)value->uint;
     b10:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b12:	9310      	str	r3, [sp, #64]	; 0x40
     b14:	e7c9      	b.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
					(uint_value_type)va_arg(ap,
     b16:	3407      	adds	r4, #7
     b18:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b1c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     b24:	e7c1      	b.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
					(uint_value_type)va_arg(ap, size_t);
     b26:	f854 3b04 	ldr.w	r3, [r4], #4
     b2a:	9310      	str	r3, [sp, #64]	; 0x40
     b2c:	2300      	movs	r3, #0
     b2e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     b30:	e7bb      	b.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
				value->uint = (unsigned char)value->uint;
     b32:	b2db      	uxtb	r3, r3
     b34:	e7cd      	b.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>
		} else if (specifier_cat == SPECIFIER_FP) {
     b36:	2b04      	cmp	r3, #4
     b38:	d108      	bne.n	b4c <__z_interrupt_stack_SIZEOF+0x30c>
					(sint_value_type)va_arg(ap, long long);
     b3a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     b3c:	f024 0407 	bic.w	r4, r4, #7
     b40:	e9d4 2300 	ldrd	r2, r3, [r4]
     b44:	3408      	adds	r4, #8
     b46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     b4a:	e7ae      	b.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b4c:	2b03      	cmp	r3, #3
     b4e:	d1ac      	bne.n	aaa <__z_interrupt_stack_SIZEOF+0x26a>
			value->ptr = va_arg(ap, void *);
     b50:	f854 3b04 	ldr.w	r3, [r4], #4
     b54:	e7dd      	b.n	b12 <__z_interrupt_stack_SIZEOF+0x2d2>
		switch (conv->specifier) {
     b56:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
     b5a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
     b5e:	d8b3      	bhi.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
     b60:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
     b64:	d849      	bhi.n	bfa <__z_interrupt_stack_SIZEOF+0x3ba>
     b66:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
     b6a:	f000 8091 	beq.w	c90 <__z_interrupt_stack_SIZEOF+0x450>
     b6e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
     b72:	d9a9      	bls.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
     b74:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
     b78:	d003      	beq.n	b82 <__z_interrupt_stack_SIZEOF+0x342>
     b7a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
     b7e:	2a02      	cmp	r2, #2
     b80:	d8a2      	bhi.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
	} u = {
     b82:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
     b86:	2a00      	cmp	r2, #0
     b88:	f2c0 8136 	blt.w	df8 <__z_interrupt_stack_SIZEOF+0x5b8>
	} else if (conv->flag_plus) {
     b8c:	9b07      	ldr	r3, [sp, #28]
     b8e:	0718      	lsls	r0, r3, #28
     b90:	f100 8135 	bmi.w	dfe <__z_interrupt_stack_SIZEOF+0x5be>
	} else if (conv->flag_space) {
     b94:	f3c3 1900 	ubfx	r9, r3, #4, #1
     b98:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     b9c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     ba0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
     ba4:	2800      	cmp	r0, #0
     ba6:	f040 812d 	bne.w	e04 <__z_interrupt_stack_SIZEOF+0x5c4>
     baa:	ea51 0602 	orrs.w	r6, r1, r2
     bae:	bf14      	ite	ne
     bb0:	2601      	movne	r6, #1
     bb2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
     bb4:	02d2      	lsls	r2, r2, #11
     bb6:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
     bba:	02c9      	lsls	r1, r1, #11
		c = 'f';
     bbc:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
     bc0:	ea40 0e01 	orr.w	lr, r0, r1
     bc4:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
     bc8:	bf08      	it	eq
     bca:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
     bce:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
     bd2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
     bd6:	f000 8199 	beq.w	f0c <__z_interrupt_stack_SIZEOF+0x6cc>
		if (is_subnormal) {
     bda:	2e00      	cmp	r6, #0
     bdc:	f040 8144 	bne.w	e68 <__z_interrupt_stack_SIZEOF+0x628>
		fract |= BIT_63;
     be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     be2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
     be6:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
     bea:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     bec:	2000      	movs	r0, #0
     bee:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
     bf2:	4606      	mov	r6, r0
		fract *= 5U;
     bf4:	f04f 0c05 	mov.w	ip, #5
     bf8:	e150      	b.n	e9c <__z_interrupt_stack_SIZEOF+0x65c>
		switch (conv->specifier) {
     bfa:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
     bfe:	2a20      	cmp	r2, #32
     c00:	f63f af62 	bhi.w	ac8 <__z_interrupt_stack_SIZEOF+0x288>
     c04:	a001      	add	r0, pc, #4	; (adr r0, c0c <__z_interrupt_stack_SIZEOF+0x3cc>)
     c06:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
     c0a:	bf00      	nop
     c0c:	00000d97 	.word	0x00000d97
     c10:	00000ac9 	.word	0x00000ac9
     c14:	00000ac9 	.word	0x00000ac9
     c18:	00000ac9 	.word	0x00000ac9
     c1c:	00000ac9 	.word	0x00000ac9
     c20:	00000ac9 	.word	0x00000ac9
     c24:	00000ac9 	.word	0x00000ac9
     c28:	00000ac9 	.word	0x00000ac9
     c2c:	00000ac9 	.word	0x00000ac9
     c30:	00000b83 	.word	0x00000b83
     c34:	00000ac9 	.word	0x00000ac9
     c38:	00000d1b 	.word	0x00000d1b
     c3c:	00000d2f 	.word	0x00000d2f
     c40:	00000b83 	.word	0x00000b83
     c44:	00000b83 	.word	0x00000b83
     c48:	00000b83 	.word	0x00000b83
     c4c:	00000ac9 	.word	0x00000ac9
     c50:	00000d2f 	.word	0x00000d2f
     c54:	00000ac9 	.word	0x00000ac9
     c58:	00000ac9 	.word	0x00000ac9
     c5c:	00000ac9 	.word	0x00000ac9
     c60:	00000ac9 	.word	0x00000ac9
     c64:	00000dd1 	.word	0x00000dd1
     c68:	00000d97 	.word	0x00000d97
     c6c:	00000d9d 	.word	0x00000d9d
     c70:	00000ac9 	.word	0x00000ac9
     c74:	00000ac9 	.word	0x00000ac9
     c78:	00000c97 	.word	0x00000c97
     c7c:	00000ac9 	.word	0x00000ac9
     c80:	00000d97 	.word	0x00000d97
     c84:	00000ac9 	.word	0x00000ac9
     c88:	00000ac9 	.word	0x00000ac9
     c8c:	00000d97 	.word	0x00000d97
			OUTC('%');
     c90:	9903      	ldr	r1, [sp, #12]
     c92:	4658      	mov	r0, fp
     c94:	e4e6      	b.n	664 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
     c96:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
     c98:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
     c9a:	db3a      	blt.n	d12 <__z_interrupt_stack_SIZEOF+0x4d2>
				len = strnlen(bps, precision);
     c9c:	4639      	mov	r1, r7
     c9e:	4630      	mov	r0, r6
     ca0:	f004 f823 	bl	4cea <strnlen>
			bpe = bps + len;
     ca4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
     ca6:	2e00      	cmp	r6, #0
     ca8:	f43f af0e 	beq.w	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		char sign = 0;
     cac:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
     cb0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     cb4:	f013 0210 	ands.w	r2, r3, #16
     cb8:	9205      	str	r2, [sp, #20]
     cba:	f000 824e 	beq.w	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
			nj_len += 2U;
     cbe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     cc0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
     cc4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
     cc8:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
     cca:	bf18      	it	ne
     ccc:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     cce:	f8cd 801c 	str.w	r8, [sp, #28]
     cd2:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
     cd4:	bf18      	it	ne
     cd6:	18c0      	addne	r0, r0, r3
		if (width > 0) {
     cd8:	9b04      	ldr	r3, [sp, #16]
     cda:	2b00      	cmp	r3, #0
     cdc:	f340 8258 	ble.w	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
			if (!conv->flag_dash) {
     ce0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     ce4:	1a1b      	subs	r3, r3, r0
     ce6:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
     ce8:	0753      	lsls	r3, r2, #29
     cea:	f3c2 0b80 	ubfx	fp, r2, #2, #1
     cee:	f100 824f 	bmi.w	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
				if (conv->flag_zero) {
     cf2:	0650      	lsls	r0, r2, #25
     cf4:	f140 823f 	bpl.w	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
					if (sign != 0) {
     cf8:	f1b9 0f00 	cmp.w	r9, #0
     cfc:	d007      	beq.n	d0e <__z_interrupt_stack_SIZEOF+0x4ce>
						OUTC(sign);
     cfe:	9903      	ldr	r1, [sp, #12]
     d00:	4648      	mov	r0, r9
     d02:	47d0      	blx	sl
     d04:	2800      	cmp	r0, #0
     d06:	f2c0 8233 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
     d0a:	3501      	adds	r5, #1
						sign = 0;
     d0c:	46d9      	mov	r9, fp
					pad = '0';
     d0e:	2230      	movs	r2, #48	; 0x30
     d10:	e232      	b.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
				len = strlen(bps);
     d12:	4630      	mov	r0, r6
     d14:	f003 ffe2 	bl	4cdc <strlen>
     d18:	e7c4      	b.n	ca4 <__z_interrupt_stack_SIZEOF+0x464>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
     d1c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
     d20:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
     d24:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
     d28:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     d2a:	2001      	movs	r0, #1
     d2c:	e7c0      	b.n	cb0 <__z_interrupt_stack_SIZEOF+0x470>
			if (conv->flag_plus) {
     d2e:	9b07      	ldr	r3, [sp, #28]
     d30:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
     d32:	bf58      	it	pl
     d34:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
     d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
     d3c:	bf54      	ite	pl
     d3e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
     d42:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
     d46:	2b00      	cmp	r3, #0
     d48:	da06      	bge.n	d58 <__z_interrupt_stack_SIZEOF+0x518>
				value->uint = (uint_value_type)-sint;
     d4a:	4252      	negs	r2, r2
     d4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     d50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
     d54:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
     d58:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     d5c:	9300      	str	r3, [sp, #0]
     d5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     d62:	ab17      	add	r3, sp, #92	; 0x5c
     d64:	aa12      	add	r2, sp, #72	; 0x48
     d66:	f003 ff40 	bl	4bea <encode_uint>
     d6a:	4606      	mov	r6, r0
			if (precision >= 0) {
     d6c:	2f00      	cmp	r7, #0
     d6e:	db0c      	blt.n	d8a <__z_interrupt_stack_SIZEOF+0x54a>
				conv->flag_zero = false;
     d70:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
     d74:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     d78:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     d7a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d7e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
     d80:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
     d84:	d901      	bls.n	d8a <__z_interrupt_stack_SIZEOF+0x54a>
					conv->pad0_value = precision - (int)len;
     d86:	1afb      	subs	r3, r7, r3
     d88:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
     d8a:	2e00      	cmp	r6, #0
     d8c:	f43f ae9c 	beq.w	ac8 <__z_interrupt_stack_SIZEOF+0x288>
     d90:	f10d 0775 	add.w	r7, sp, #117	; 0x75
     d94:	e056      	b.n	e44 <__z_interrupt_stack_SIZEOF+0x604>
		switch (conv->specifier) {
     d96:	f04f 0900 	mov.w	r9, #0
     d9a:	e7dd      	b.n	d58 <__z_interrupt_stack_SIZEOF+0x518>
			if (value->ptr != NULL) {
     d9c:	9810      	ldr	r0, [sp, #64]	; 0x40
     d9e:	2800      	cmp	r0, #0
     da0:	f000 81d6 	beq.w	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     da4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     da8:	9300      	str	r3, [sp, #0]
     daa:	aa12      	add	r2, sp, #72	; 0x48
     dac:	ab17      	add	r3, sp, #92	; 0x5c
     dae:	2100      	movs	r1, #0
     db0:	f003 ff1b 	bl	4bea <encode_uint>
				conv->altform_0c = true;
     db4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
     db8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     dbc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     dc0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     dc4:	4606      	mov	r6, r0
				conv->altform_0c = true;
     dc6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
     dca:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
     dce:	e7cd      	b.n	d6c <__z_interrupt_stack_SIZEOF+0x52c>
				store_count(conv, value->ptr, count);
     dd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
     dd2:	2907      	cmp	r1, #7
     dd4:	f63f ae78 	bhi.w	ac8 <__z_interrupt_stack_SIZEOF+0x288>
     dd8:	e8df f001 	tbb	[pc, r1]
     ddc:	0c06040c 	.word	0x0c06040c
     de0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     de4:	701d      	strb	r5, [r3, #0]
		break;
     de6:	e66f      	b.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		*(short *)dp = (short)count;
     de8:	801d      	strh	r5, [r3, #0]
		break;
     dea:	e66d      	b.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		*(intmax_t *)dp = (intmax_t)count;
     dec:	17ea      	asrs	r2, r5, #31
     dee:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     df2:	e669      	b.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     df4:	601d      	str	r5, [r3, #0]
		break;
     df6:	e667      	b.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
		*sign = '-';
     df8:	f04f 092d 	mov.w	r9, #45	; 0x2d
     dfc:	e6ce      	b.n	b9c <__z_interrupt_stack_SIZEOF+0x35c>
		*sign = '+';
     dfe:	f04f 092b 	mov.w	r9, #43	; 0x2b
     e02:	e6cb      	b.n	b9c <__z_interrupt_stack_SIZEOF+0x35c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
     e04:	f240 76ff 	movw	r6, #2047	; 0x7ff
     e08:	42b0      	cmp	r0, r6
     e0a:	d12a      	bne.n	e62 <__z_interrupt_stack_SIZEOF+0x622>
		if (fract == 0) {
     e0c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
     e0e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
     e12:	d11e      	bne.n	e52 <__z_interrupt_stack_SIZEOF+0x612>
			if (isupper((unsigned char)c)) {
     e14:	2b1a      	cmp	r3, #26
     e16:	bf35      	itete	cc
     e18:	2349      	movcc	r3, #73	; 0x49
     e1a:	2369      	movcs	r3, #105	; 0x69
     e1c:	214e      	movcc	r1, #78	; 0x4e
     e1e:	216e      	movcs	r1, #110	; 0x6e
     e20:	bf34      	ite	cc
     e22:	2246      	movcc	r2, #70	; 0x46
     e24:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
     e26:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
     e2a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
     e2e:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
     e32:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
     e36:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
     e3a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
     e3e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
     e42:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     e44:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
     e46:	f1b9 0f00 	cmp.w	r9, #0
     e4a:	f43f af31 	beq.w	cb0 <__z_interrupt_stack_SIZEOF+0x470>
			nj_len += 1U;
     e4e:	3001      	adds	r0, #1
     e50:	e72e      	b.n	cb0 <__z_interrupt_stack_SIZEOF+0x470>
			if (isupper((unsigned char)c)) {
     e52:	2b19      	cmp	r3, #25
     e54:	bf8b      	itete	hi
     e56:	236e      	movhi	r3, #110	; 0x6e
     e58:	234e      	movls	r3, #78	; 0x4e
     e5a:	2161      	movhi	r1, #97	; 0x61
     e5c:	2141      	movls	r1, #65	; 0x41
     e5e:	461a      	mov	r2, r3
     e60:	e7e1      	b.n	e26 <__z_interrupt_stack_SIZEOF+0x5e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
     e62:	2600      	movs	r6, #0
     e64:	e6a6      	b.n	bb4 <__z_interrupt_stack_SIZEOF+0x374>
				expo--;
     e66:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
     e68:	1849      	adds	r1, r1, r1
     e6a:	4152      	adcs	r2, r2
     e6c:	2a00      	cmp	r2, #0
     e6e:	dafa      	bge.n	e66 <__z_interrupt_stack_SIZEOF+0x626>
     e70:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
     e74:	e6b4      	b.n	be0 <__z_interrupt_stack_SIZEOF+0x3a0>
			fract >>= 1;
     e76:	0849      	lsrs	r1, r1, #1
     e78:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
     e7c:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     e7e:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
     e82:	4640      	mov	r0, r8
			expo++;
     e84:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     e88:	d2f5      	bcs.n	e76 <__z_interrupt_stack_SIZEOF+0x636>
		fract *= 5U;
     e8a:	fb0c fe02 	mul.w	lr, ip, r2
     e8e:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
     e92:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
     e96:	4472      	add	r2, lr
		decexp--;
     e98:	3e01      	subs	r6, #1
     e9a:	2001      	movs	r0, #1
	while (expo < -2) {
     e9c:	f118 0f02 	cmn.w	r8, #2
     ea0:	dbe9      	blt.n	e76 <__z_interrupt_stack_SIZEOF+0x636>
     ea2:	b108      	cbz	r0, ea8 <__z_interrupt_stack_SIZEOF+0x668>
     ea4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
     ea8:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
     eac:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
     eb0:	dc2f      	bgt.n	f12 <__z_interrupt_stack_SIZEOF+0x6d2>
	fract >>= (4 - expo);
     eb2:	f1c8 0004 	rsb	r0, r8, #4
     eb6:	f108 081c 	add.w	r8, r8, #28
     eba:	f1a0 0c20 	sub.w	ip, r0, #32
     ebe:	40c2      	lsrs	r2, r0
     ec0:	fa21 f300 	lsr.w	r3, r1, r0
     ec4:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
     ec8:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
     ecc:	ea42 0208 	orr.w	r2, r2, r8
     ed0:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
     ed4:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
     ed6:	ea42 020c 	orr.w	r2, r2, ip
     eda:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
     edc:	d13a      	bne.n	f54 <__z_interrupt_stack_SIZEOF+0x714>
		if (decexp < (-4 + 1) || decexp > precision) {
     ede:	1cf3      	adds	r3, r6, #3
     ee0:	db01      	blt.n	ee6 <__z_interrupt_stack_SIZEOF+0x6a6>
     ee2:	42b7      	cmp	r7, r6
     ee4:	da2b      	bge.n	f3e <__z_interrupt_stack_SIZEOF+0x6fe>
			c += 'e' - 'g';  /* e or E */
     ee6:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
     eea:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
     eec:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
     ef0:	dd7f      	ble.n	ff2 <__z_interrupt_stack_SIZEOF+0x7b2>
		if (!conv->flag_hash && (precision > 0)) {
     ef2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
     ef6:	0680      	lsls	r0, r0, #26
				precision--;
     ef8:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
     efc:	d479      	bmi.n	ff2 <__z_interrupt_stack_SIZEOF+0x7b2>
     efe:	1e3b      	subs	r3, r7, #0
     f00:	bf18      	it	ne
     f02:	2301      	movne	r3, #1
	bool prune_zero = false;
     f04:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
     f06:	f107 0801 	add.w	r8, r7, #1
     f0a:	e02d      	b.n	f68 <__z_interrupt_stack_SIZEOF+0x728>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     f0c:	f04f 0800 	mov.w	r8, #0
     f10:	e66c      	b.n	bec <__z_interrupt_stack_SIZEOF+0x3ac>
		fract += 2;
     f12:	3202      	adds	r2, #2
     f14:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
     f18:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
     f1a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
     f1e:	f003 fe35 	bl	4b8c <_ldiv5>
		expo--;
     f22:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
     f26:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
     f2a:	3601      	adds	r6, #1
			fract <<= 1;
     f2c:	1892      	adds	r2, r2, r2
     f2e:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
     f30:	2900      	cmp	r1, #0
			expo--;
     f32:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
     f36:	daf9      	bge.n	f2c <__z_interrupt_stack_SIZEOF+0x6ec>
     f38:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
     f3c:	e7b4      	b.n	ea8 <__z_interrupt_stack_SIZEOF+0x668>
		if (!conv->flag_hash && (precision > 0)) {
     f3e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     f42:	0699      	lsls	r1, r3, #26
			precision -= decexp;
     f44:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
     f48:	d451      	bmi.n	fee <__z_interrupt_stack_SIZEOF+0x7ae>
     f4a:	1e3b      	subs	r3, r7, #0
     f4c:	bf18      	it	ne
     f4e:	2301      	movne	r3, #1
	bool prune_zero = false;
     f50:	9305      	str	r3, [sp, #20]
     f52:	e004      	b.n	f5e <__z_interrupt_stack_SIZEOF+0x71e>
     f54:	2300      	movs	r3, #0
	if (c == 'f') {
     f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
     f5a:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
     f5c:	d1d3      	bne.n	f06 <__z_interrupt_stack_SIZEOF+0x6c6>
		if (decimals < 0) {
     f5e:	eb17 0806 	adds.w	r8, r7, r6
     f62:	f04f 0b66 	mov.w	fp, #102	; 0x66
     f66:	d446      	bmi.n	ff6 <__z_interrupt_stack_SIZEOF+0x7b6>
	if (decimals > 16) {
     f68:	f1b8 0f10 	cmp.w	r8, #16
     f6c:	bfa8      	it	ge
     f6e:	f04f 0810 	movge.w	r8, #16
     f72:	2010      	movs	r0, #16
     f74:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
     f76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     f7a:	2000      	movs	r0, #0
     f7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
     f80:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
     f84:	f1b8 0f00 	cmp.w	r8, #0
     f88:	d138      	bne.n	ffc <__z_interrupt_stack_SIZEOF+0x7bc>
	fract += round;
     f8a:	9908      	ldr	r1, [sp, #32]
     f8c:	1812      	adds	r2, r2, r0
     f8e:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
     f92:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
     f96:	d23f      	bcs.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
	fract += round;
     f98:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
     f9c:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
     f9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
     fa2:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
     fa6:	f040 80b2 	bne.w	110e <CONFIG_FPROTECT_BLOCK_SIZE+0x10e>
		if (decexp > 0) {
     faa:	2e00      	cmp	r6, #0
     fac:	dc3f      	bgt.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
			*buf++ = '0';
     fae:	2130      	movs	r1, #48	; 0x30
     fb0:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
     fb4:	2a00      	cmp	r2, #0
     fb6:	d163      	bne.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     fb8:	2f00      	cmp	r7, #0
     fba:	f340 81a8 	ble.w	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
			*buf++ = '.';
     fbe:	222e      	movs	r2, #46	; 0x2e
     fc0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
     fc4:	b186      	cbz	r6, fe8 <__z_interrupt_stack_SIZEOF+0x7a8>
			conv->pad0_value = -decexp;
     fc6:	4272      	negs	r2, r6
     fc8:	42ba      	cmp	r2, r7
     fca:	bfa8      	it	ge
     fcc:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
     fce:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     fd2:	9213      	str	r2, [sp, #76]	; 0x4c
     fd4:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
     fd6:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
     fda:	bfd4      	ite	le
     fdc:	2200      	movle	r2, #0
     fde:	2201      	movgt	r2, #1
     fe0:	f362 1145 	bfi	r1, r2, #5, #1
     fe4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
     fe8:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
     fec:	e037      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
	bool prune_zero = false;
     fee:	2300      	movs	r3, #0
     ff0:	e7ae      	b.n	f50 <__z_interrupt_stack_SIZEOF+0x710>
     ff2:	2300      	movs	r3, #0
     ff4:	e786      	b.n	f04 <__z_interrupt_stack_SIZEOF+0x6c4>
			decimals = 0;
     ff6:	f04f 0800 	mov.w	r8, #0
     ffa:	e7ba      	b.n	f72 <__z_interrupt_stack_SIZEOF+0x732>
	*v >>= 1;
     ffc:	0840      	lsrs	r0, r0, #1
     ffe:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    1002:	085b      	lsrs	r3, r3, #1
    1004:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    1008:	a80e      	add	r0, sp, #56	; 0x38
    100a:	9209      	str	r2, [sp, #36]	; 0x24
    100c:	f108 38ff 	add.w	r8, r8, #4294967295
    1010:	f003 fdbc 	bl	4b8c <_ldiv5>
    1014:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    1016:	e7b3      	b.n	f80 <__z_interrupt_stack_SIZEOF+0x740>
	*v >>= 1;
    1018:	0852      	lsrs	r2, r2, #1
    101a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    101e:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    1020:	0849      	lsrs	r1, r1, #1
    1022:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    1026:	3601      	adds	r6, #1
	_ldiv5(v);
    1028:	f003 fdb0 	bl	4b8c <_ldiv5>
		decexp++;
    102c:	e7b6      	b.n	f9c <__z_interrupt_stack_SIZEOF+0x75c>
	char *buf = bps;
    102e:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    1032:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1034:	2900      	cmp	r1, #0
    1036:	dd09      	ble.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
				*buf++ = _get_digit(&fract, &digit_count);
    1038:	a90b      	add	r1, sp, #44	; 0x2c
    103a:	a80c      	add	r0, sp, #48	; 0x30
    103c:	9207      	str	r2, [sp, #28]
    103e:	f003 fdbd 	bl	4bbc <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1042:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    1044:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    1048:	9a07      	ldr	r2, [sp, #28]
    104a:	d1f2      	bne.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
			conv->pad0_value = decexp;
    104c:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    104e:	b99a      	cbnz	r2, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    1050:	2f00      	cmp	r7, #0
    1052:	f340 815a 	ble.w	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
			*buf++ = '.';
    1056:	212e      	movs	r1, #46	; 0x2e
    1058:	f808 1b01 	strb.w	r1, [r8], #1
    105c:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    105e:	2f00      	cmp	r7, #0
    1060:	dd17      	ble.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    1062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1064:	2a00      	cmp	r2, #0
    1066:	dd14      	ble.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
		*buf++ = _get_digit(&fract, &digit_count);
    1068:	a90b      	add	r1, sp, #44	; 0x2c
    106a:	a80c      	add	r0, sp, #48	; 0x30
    106c:	f003 fda6 	bl	4bbc <_get_digit>
		precision--;
    1070:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    1072:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    1076:	e7f2      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
			*buf++ = '.';
    1078:	222e      	movs	r2, #46	; 0x2e
    107a:	f808 2b01 	strb.w	r2, [r8], #1
    107e:	e7ed      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    1080:	222e      	movs	r2, #46	; 0x2e
    1082:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1086:	2e00      	cmp	r6, #0
    1088:	d0ae      	beq.n	fe8 <__z_interrupt_stack_SIZEOF+0x7a8>
    108a:	2f00      	cmp	r7, #0
    108c:	dc9b      	bgt.n	fc6 <__z_interrupt_stack_SIZEOF+0x786>
			*buf++ = '.';
    108e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    1092:	9b05      	ldr	r3, [sp, #20]
    1094:	2b00      	cmp	r3, #0
    1096:	d14e      	bne.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
	conv->pad0_pre_exp = precision;
    1098:	9714      	str	r7, [sp, #80]	; 0x50
    109a:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    109c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    10a0:	2a45      	cmp	r2, #69	; 0x45
    10a2:	d123      	bne.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
		if (decexp < 0) {
    10a4:	2e00      	cmp	r6, #0
			decexp = -decexp;
    10a6:	bfba      	itte	lt
    10a8:	4276      	neglt	r6, r6
			*buf++ = '-';
    10aa:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    10ac:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    10ae:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    10b0:	bfc8      	it	gt
    10b2:	2164      	movgt	r1, #100	; 0x64
    10b4:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    10b6:	bfd1      	iteee	le
    10b8:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    10ba:	fbb6 f3f1 	udivgt	r3, r6, r1
    10be:	1cfa      	addgt	r2, r7, #3
    10c0:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    10c4:	bfc8      	it	gt
    10c6:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    10ca:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    10ce:	bfc8      	it	gt
    10d0:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    10d2:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    10d6:	fbb6 f3f1 	udiv	r3, r6, r1
    10da:	4617      	mov	r7, r2
    10dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    10e0:	fb01 6313 	mls	r3, r1, r3, r6
    10e4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    10e6:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    10ea:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    10ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    10ee:	2b00      	cmp	r3, #0
    10f0:	dc2c      	bgt.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    10f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    10f4:	2b00      	cmp	r3, #0
    10f6:	bfd4      	ite	le
    10f8:	2300      	movle	r3, #0
    10fa:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    10fc:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1100:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1104:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1106:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    110a:	703b      	strb	r3, [r7, #0]
	return bps;
    110c:	e699      	b.n	e42 <__z_interrupt_stack_SIZEOF+0x602>
		*buf = _get_digit(&fract, &digit_count);
    110e:	a90b      	add	r1, sp, #44	; 0x2c
    1110:	a80c      	add	r0, sp, #48	; 0x30
    1112:	9207      	str	r2, [sp, #28]
    1114:	f003 fd52 	bl	4bbc <_get_digit>
		if (*buf++ != '0') {
    1118:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    111a:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    111e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1120:	bf18      	it	ne
    1122:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    1126:	b912      	cbnz	r2, 112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    1128:	2f00      	cmp	r7, #0
    112a:	f340 80f0 	ble.w	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
			*buf++ = '.';
    112e:	222e      	movs	r2, #46	; 0x2e
    1130:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    1134:	e758      	b.n	fe8 <__z_interrupt_stack_SIZEOF+0x7a8>
		while (*--buf == '0') {
    1136:	4647      	mov	r7, r8
    1138:	f108 38ff 	add.w	r8, r8, #4294967295
    113c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    1140:	2a30      	cmp	r2, #48	; 0x30
    1142:	d0f8      	beq.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
    1144:	2a2e      	cmp	r2, #46	; 0x2e
    1146:	bf08      	it	eq
    1148:	4647      	moveq	r7, r8
    114a:	e7a7      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
		|| (conv->pad0_pre_exp > 0);
    114c:	2301      	movs	r3, #1
    114e:	e7d5      	b.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
			bpe = bps + 5;
    1150:	4f70      	ldr	r7, [pc, #448]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
		char sign = 0;
    1152:	4681      	mov	r9, r0
			bps = "(nil)";
    1154:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    1156:	2005      	movs	r0, #5
    1158:	e5aa      	b.n	cb0 <__z_interrupt_stack_SIZEOF+0x470>
		} else if (conv->altform_0) {
    115a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    115c:	bf48      	it	mi
    115e:	3001      	addmi	r0, #1
    1160:	e5ae      	b.n	cc0 <__z_interrupt_stack_SIZEOF+0x480>
					OUTC(pad);
    1162:	4610      	mov	r0, r2
    1164:	9209      	str	r2, [sp, #36]	; 0x24
    1166:	9903      	ldr	r1, [sp, #12]
    1168:	47d0      	blx	sl
    116a:	2800      	cmp	r0, #0
    116c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    116e:	da05      	bge.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
#undef OUTS
#undef OUTC
}
    1170:	b01f      	add	sp, #124	; 0x7c
    1172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1176:	2220      	movs	r2, #32
					pad = '0';
    1178:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    117c:	4659      	mov	r1, fp
    117e:	2900      	cmp	r1, #0
    1180:	f10b 3bff 	add.w	fp, fp, #4294967295
    1184:	dced      	bgt.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    1186:	9b04      	ldr	r3, [sp, #16]
    1188:	f8cd b010 	str.w	fp, [sp, #16]
    118c:	442b      	add	r3, r5
    118e:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    1190:	f1b9 0f00 	cmp.w	r9, #0
    1194:	d005      	beq.n	11a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a2>
			OUTC(sign);
    1196:	9903      	ldr	r1, [sp, #12]
    1198:	4648      	mov	r0, r9
    119a:	47d0      	blx	sl
    119c:	2800      	cmp	r0, #0
    119e:	dbe7      	blt.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    11a0:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    11a2:	9b08      	ldr	r3, [sp, #32]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d075      	beq.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
			if (conv->specifier_a) {
    11a8:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    11ac:	2b00      	cmp	r3, #0
    11ae:	db28      	blt.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    11b0:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
    11b2:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    11b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    11ba:	2b09      	cmp	r3, #9
    11bc:	46d9      	mov	r9, fp
    11be:	f10b 0b01 	add.w	fp, fp, #1
    11c2:	d93f      	bls.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
				if (!conv->pad_postdp) {
    11c4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    11c8:	1bae      	subs	r6, r5, r6
    11ca:	0699      	lsls	r1, r3, #26
    11cc:	444e      	add	r6, r9
    11ce:	d407      	bmi.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
					while (pad_len-- > 0) {
    11d0:	4642      	mov	r2, r8
    11d2:	2a00      	cmp	r2, #0
    11d4:	f108 38ff 	add.w	r8, r8, #4294967295
    11d8:	dc39      	bgt.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11da:	9b07      	ldr	r3, [sp, #28]
    11dc:	4433      	add	r3, r6
    11de:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    11e0:	f899 0000 	ldrb.w	r0, [r9]
    11e4:	282e      	cmp	r0, #46	; 0x2e
    11e6:	d10a      	bne.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
					OUTC(*cp++);
    11e8:	9903      	ldr	r1, [sp, #12]
    11ea:	47d0      	blx	sl
						OUTC('0');
    11ec:	2800      	cmp	r0, #0
    11ee:	dbbf      	blt.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
					while (pad_len-- > 0) {
    11f0:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    11f4:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    11f8:	dc2f      	bgt.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
					OUTC(*cp++);
    11fa:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    11fe:	464d      	mov	r5, r9
    1200:	e035      	b.n	126e <CONFIG_FPROTECT_BLOCK_SIZE+0x26e>
    1202:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    1204:	f899 0000 	ldrb.w	r0, [r9]
    1208:	2870      	cmp	r0, #112	; 0x70
    120a:	46c8      	mov	r8, r9
    120c:	f109 0901 	add.w	r9, r9, #1
    1210:	d113      	bne.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    1212:	1bae      	subs	r6, r5, r6
    1214:	9d14      	ldr	r5, [sp, #80]	; 0x50
    1216:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    1218:	4435      	add	r5, r6
    121a:	1bab      	subs	r3, r5, r6
    121c:	2b00      	cmp	r3, #0
    121e:	dc31      	bgt.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
			OUTS(cp, bpe);
    1220:	9903      	ldr	r1, [sp, #12]
    1222:	463b      	mov	r3, r7
    1224:	4642      	mov	r2, r8
    1226:	4650      	mov	r0, sl
    1228:	f003 fd25 	bl	4c76 <outs>
    122c:	2800      	cmp	r0, #0
    122e:	db9f      	blt.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1230:	4430      	add	r0, r6
    1232:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    1234:	4605      	mov	r5, r0
    1236:	4406      	add	r6, r0
    1238:	e062      	b.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
					OUTC(*cp++);
    123a:	9903      	ldr	r1, [sp, #12]
    123c:	47d0      	blx	sl
    123e:	2800      	cmp	r0, #0
    1240:	dae0      	bge.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    1242:	e795      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
					OUTC(*cp++);
    1244:	9903      	ldr	r1, [sp, #12]
    1246:	47d0      	blx	sl
    1248:	2800      	cmp	r0, #0
    124a:	dab2      	bge.n	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    124c:	e790      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
						OUTC('0');
    124e:	9903      	ldr	r1, [sp, #12]
    1250:	2030      	movs	r0, #48	; 0x30
    1252:	47d0      	blx	sl
    1254:	2800      	cmp	r0, #0
    1256:	dabb      	bge.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
    1258:	e78a      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
						OUTC('0');
    125a:	9903      	ldr	r1, [sp, #12]
    125c:	2030      	movs	r0, #48	; 0x30
    125e:	47d0      	blx	sl
    1260:	f108 38ff 	add.w	r8, r8, #4294967295
    1264:	e7c2      	b.n	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
					OUTC(*cp++);
    1266:	9903      	ldr	r1, [sp, #12]
    1268:	47d0      	blx	sl
    126a:	2800      	cmp	r0, #0
    126c:	db80      	blt.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
				while (isdigit((unsigned char)*cp)) {
    126e:	7828      	ldrb	r0, [r5, #0]
    1270:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1274:	2b09      	cmp	r3, #9
    1276:	46a8      	mov	r8, r5
    1278:	f105 0501 	add.w	r5, r5, #1
    127c:	d9f3      	bls.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
    127e:	eba6 0609 	sub.w	r6, r6, r9
    1282:	e7c7      	b.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
				OUTC('0');
    1284:	9903      	ldr	r1, [sp, #12]
    1286:	2030      	movs	r0, #48	; 0x30
    1288:	47d0      	blx	sl
    128a:	2800      	cmp	r0, #0
    128c:	f6ff af70 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1290:	3601      	adds	r6, #1
    1292:	e7c2      	b.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
			if (conv->altform_0c | conv->altform_0) {
    1294:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1298:	06da      	lsls	r2, r3, #27
    129a:	d401      	bmi.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    129c:	071b      	lsls	r3, r3, #28
    129e:	d506      	bpl.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
				OUTC('0');
    12a0:	9903      	ldr	r1, [sp, #12]
    12a2:	2030      	movs	r0, #48	; 0x30
    12a4:	47d0      	blx	sl
    12a6:	2800      	cmp	r0, #0
    12a8:	f6ff af62 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    12ac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    12ae:	9b05      	ldr	r3, [sp, #20]
    12b0:	b13b      	cbz	r3, 12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
				OUTC(conv->specifier);
    12b2:	9903      	ldr	r1, [sp, #12]
    12b4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    12b8:	47d0      	blx	sl
    12ba:	2800      	cmp	r0, #0
    12bc:	f6ff af58 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    12c0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    12c2:	44a8      	add	r8, r5
    12c4:	e006      	b.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
				OUTC('0');
    12c6:	9903      	ldr	r1, [sp, #12]
    12c8:	2030      	movs	r0, #48	; 0x30
    12ca:	47d0      	blx	sl
    12cc:	2800      	cmp	r0, #0
    12ce:	f6ff af4f 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    12d2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    12d4:	eba8 0305 	sub.w	r3, r8, r5
    12d8:	2b00      	cmp	r3, #0
    12da:	dcf4      	bgt.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
			OUTS(bps, bpe);
    12dc:	9903      	ldr	r1, [sp, #12]
    12de:	463b      	mov	r3, r7
    12e0:	4632      	mov	r2, r6
    12e2:	4650      	mov	r0, sl
    12e4:	f003 fcc7 	bl	4c76 <outs>
    12e8:	2800      	cmp	r0, #0
    12ea:	f6ff af41 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    12ee:	4428      	add	r0, r5
    12f0:	e79f      	b.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
			OUTC(' ');
    12f2:	9903      	ldr	r1, [sp, #12]
    12f4:	2020      	movs	r0, #32
    12f6:	47d0      	blx	sl
    12f8:	2800      	cmp	r0, #0
    12fa:	f6ff af39 	blt.w	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    12fe:	3501      	adds	r5, #1
		while (width > 0) {
    1300:	1b73      	subs	r3, r6, r5
    1302:	2b00      	cmp	r3, #0
    1304:	dcf5      	bgt.n	12f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
    1306:	f7ff bbdf 	b.w	ac8 <__z_interrupt_stack_SIZEOF+0x288>
			decexp = 0;
    130a:	4616      	mov	r6, r2
    130c:	e6c1      	b.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
		if (*buf++ != '0') {
    130e:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    1312:	e6be      	b.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    1314:	00005976 	.word	0x00005976

00001318 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1318:	f001 bc82 	b.w	2c20 <SystemInit>

0000131c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    131c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1320:	4605      	mov	r5, r0
	__asm__ volatile(
    1322:	f04f 0320 	mov.w	r3, #32
    1326:	f3ef 8611 	mrs	r6, BASEPRI
    132a:	f383 8812 	msr	BASEPRI_MAX, r3
    132e:	f3bf 8f6f 	isb	sy
	return list->head;
    1332:	4b0e      	ldr	r3, [pc, #56]	; (136c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1334:	4f0e      	ldr	r7, [pc, #56]	; (1370 <pm_state_notify+0x54>)
    1336:	681c      	ldr	r4, [r3, #0]
    1338:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1374 <pm_state_notify+0x58>
    133c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1340:	b92c      	cbnz	r4, 134e <pm_state_notify+0x32>
	__asm__ volatile(
    1342:	f386 8811 	msr	BASEPRI, r6
    1346:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    134a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    134e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1352:	2d00      	cmp	r5, #0
    1354:	bf18      	it	ne
    1356:	4613      	movne	r3, r2
		if (callback) {
    1358:	b12b      	cbz	r3, 1366 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    135a:	f898 2014 	ldrb.w	r2, [r8, #20]
    135e:	fb09 f202 	mul.w	r2, r9, r2
    1362:	5cb8      	ldrb	r0, [r7, r2]
    1364:	4798      	blx	r3
	return node->next;
    1366:	6824      	ldr	r4, [r4, #0]
    1368:	e7ea      	b.n	1340 <pm_state_notify+0x24>
    136a:	bf00      	nop
    136c:	20000208 	.word	0x20000208
    1370:	200001fc 	.word	0x200001fc
    1374:	2000038c 	.word	0x2000038c

00001378 <pm_system_resume>:

void pm_system_resume(void)
{
    1378:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    137a:	4b19      	ldr	r3, [pc, #100]	; (13e0 <pm_system_resume+0x68>)
    137c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    137e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1382:	f004 031f 	and.w	r3, r4, #31
    1386:	2201      	movs	r2, #1
    1388:	409a      	lsls	r2, r3
    138a:	4b16      	ldr	r3, [pc, #88]	; (13e4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    138c:	0961      	lsrs	r1, r4, #5
    138e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1392:	43d0      	mvns	r0, r2
    1394:	e853 1f00 	ldrex	r1, [r3]
    1398:	ea01 0500 	and.w	r5, r1, r0
    139c:	e843 5600 	strex	r6, r5, [r3]
    13a0:	2e00      	cmp	r6, #0
    13a2:	d1f7      	bne.n	1394 <pm_system_resume+0x1c>
    13a4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    13a8:	420a      	tst	r2, r1
    13aa:	d013      	beq.n	13d4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <pm_system_resume+0x70>)
    13ae:	4d0f      	ldr	r5, [pc, #60]	; (13ec <pm_system_resume+0x74>)
    13b0:	b18b      	cbz	r3, 13d6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    13b2:	230c      	movs	r3, #12
    13b4:	4363      	muls	r3, r4
    13b6:	18ea      	adds	r2, r5, r3
    13b8:	5ce8      	ldrb	r0, [r5, r3]
    13ba:	7851      	ldrb	r1, [r2, #1]
    13bc:	f003 fcc1 	bl	4d42 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    13c0:	2000      	movs	r0, #0
    13c2:	f7ff ffab 	bl	131c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    13c6:	230c      	movs	r3, #12
    13c8:	435c      	muls	r4, r3
    13ca:	192a      	adds	r2, r5, r4
    13cc:	2300      	movs	r3, #0
    13ce:	512b      	str	r3, [r5, r4]
    13d0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    13d4:	bd70      	pop	{r4, r5, r6, pc}
    13d6:	f383 8811 	msr	BASEPRI, r3
    13da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    13de:	e7ef      	b.n	13c0 <pm_system_resume+0x48>
    13e0:	2000038c 	.word	0x2000038c
    13e4:	20000210 	.word	0x20000210
    13e8:	00004d43 	.word	0x00004d43
    13ec:	200001fc 	.word	0x200001fc

000013f0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    13f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    13f4:	4b35      	ldr	r3, [pc, #212]	; (14cc <pm_system_suspend+0xdc>)
{
    13f6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    13f8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    13fa:	f04f 0320 	mov.w	r3, #32
    13fe:	f3ef 8811 	mrs	r8, BASEPRI
    1402:	f383 8812 	msr	BASEPRI_MAX, r3
    1406:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    140a:	240c      	movs	r4, #12
    140c:	4b30      	ldr	r3, [pc, #192]	; (14d0 <pm_system_suspend+0xe0>)
    140e:	4e31      	ldr	r6, [pc, #196]	; (14d4 <pm_system_suspend+0xe4>)
    1410:	436c      	muls	r4, r5
    1412:	191a      	adds	r2, r3, r4
    1414:	5d19      	ldrb	r1, [r3, r4]
    1416:	2900      	cmp	r1, #0
    1418:	d04c      	beq.n	14b4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    141a:	ca07      	ldmia	r2, {r0, r1, r2}
    141c:	eb06 0c04 	add.w	ip, r6, r4
    1420:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1424:	2200      	movs	r2, #0
    1426:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1428:	f388 8811 	msr	BASEPRI, r8
    142c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1430:	230c      	movs	r3, #12
    1432:	436b      	muls	r3, r5
    1434:	18f2      	adds	r2, r6, r3
    1436:	5cf0      	ldrb	r0, [r6, r3]
    1438:	2800      	cmp	r0, #0
    143a:	d039      	beq.n	14b0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    143c:	1c7b      	adds	r3, r7, #1
    143e:	d010      	beq.n	1462 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1440:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1444:	4c24      	ldr	r4, [pc, #144]	; (14d8 <pm_system_suspend+0xe8>)
    1446:	4a25      	ldr	r2, [pc, #148]	; (14dc <pm_system_suspend+0xec>)
    1448:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    144c:	2100      	movs	r1, #0
    144e:	fbec 4100 	umlal	r4, r1, ip, r0
    1452:	2300      	movs	r3, #0
    1454:	4620      	mov	r0, r4
    1456:	f7fe fe41 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    145a:	2101      	movs	r1, #1
    145c:	1a38      	subs	r0, r7, r0
    145e:	f004 f852 	bl	5506 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1462:	f003 f803 	bl	446c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1466:	2001      	movs	r0, #1
    1468:	f7ff ff58 	bl	131c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    146c:	f3bf 8f5b 	dmb	ish
    1470:	4b1b      	ldr	r3, [pc, #108]	; (14e0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1472:	096a      	lsrs	r2, r5, #5
    1474:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1478:	f005 011f 	and.w	r1, r5, #31
    147c:	2201      	movs	r2, #1
    147e:	408a      	lsls	r2, r1
    1480:	e853 0f00 	ldrex	r0, [r3]
    1484:	4310      	orrs	r0, r2
    1486:	e843 0100 	strex	r1, r0, [r3]
    148a:	2900      	cmp	r1, #0
    148c:	d1f8      	bne.n	1480 <pm_system_suspend+0x90>
    148e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1492:	4b14      	ldr	r3, [pc, #80]	; (14e4 <pm_system_suspend+0xf4>)
    1494:	b13b      	cbz	r3, 14a6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    1496:	230c      	movs	r3, #12
    1498:	fb03 f005 	mul.w	r0, r3, r5
    149c:	1833      	adds	r3, r6, r0
    149e:	5c30      	ldrb	r0, [r6, r0]
    14a0:	7859      	ldrb	r1, [r3, #1]
    14a2:	f003 fc42 	bl	4d2a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    14a6:	f7ff ff67 	bl	1378 <pm_system_resume>
	k_sched_unlock();
    14aa:	f002 fff3 	bl	4494 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    14ae:	2001      	movs	r0, #1
}
    14b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    14b4:	4601      	mov	r1, r0
    14b6:	4628      	mov	r0, r5
    14b8:	f000 f816 	bl	14e8 <pm_policy_next_state>
		if (info != NULL) {
    14bc:	2800      	cmp	r0, #0
    14be:	d0b3      	beq.n	1428 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    14c0:	c807      	ldmia	r0, {r0, r1, r2}
    14c2:	4434      	add	r4, r6
    14c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    14c8:	e7ae      	b.n	1428 <pm_system_suspend+0x38>
    14ca:	bf00      	nop
    14cc:	2000038c 	.word	0x2000038c
    14d0:	200001f0 	.word	0x200001f0
    14d4:	200001fc 	.word	0x200001fc
    14d8:	000f423f 	.word	0x000f423f
    14dc:	000f4240 	.word	0x000f4240
    14e0:	20000210 	.word	0x20000210
    14e4:	00004d2b 	.word	0x00004d2b

000014e8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    14e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ec:	b085      	sub	sp, #20
    14ee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    14f0:	a903      	add	r1, sp, #12
    14f2:	f000 f843 	bl	157c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    14f6:	4b1e      	ldr	r3, [pc, #120]	; (1570 <pm_policy_next_state+0x88>)
    14f8:	9d03      	ldr	r5, [sp, #12]
    14fa:	f8d3 a000 	ldr.w	sl, [r3]
    14fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1574 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1502:	1e43      	subs	r3, r0, #1
    1504:	b21b      	sxth	r3, r3
    1506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    150a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    150c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1510:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1514:	f04f 0b00 	mov.w	fp, #0
    1518:	b924      	cbnz	r4, 1524 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    151a:	46a1      	mov	r9, r4
}
    151c:	4648      	mov	r0, r9
    151e:	b005      	add	sp, #20
    1520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1524:	6868      	ldr	r0, [r5, #4]
    1526:	4a14      	ldr	r2, [pc, #80]	; (1578 <pm_policy_next_state+0x90>)
    1528:	46c4      	mov	ip, r8
    152a:	4659      	mov	r1, fp
    152c:	fbe0 c107 	umlal	ip, r1, r0, r7
    1530:	2300      	movs	r3, #0
    1532:	4660      	mov	r0, ip
    1534:	f7fe fdd2 	bl	dc <__aeabi_uldivmod>
    1538:	9001      	str	r0, [sp, #4]
    153a:	68a8      	ldr	r0, [r5, #8]
    153c:	4a0e      	ldr	r2, [pc, #56]	; (1578 <pm_policy_next_state+0x90>)
    153e:	46c4      	mov	ip, r8
    1540:	4659      	mov	r1, fp
    1542:	fbe0 c107 	umlal	ip, r1, r0, r7
    1546:	2300      	movs	r3, #0
    1548:	4660      	mov	r0, ip
    154a:	f7fe fdc7 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    154e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    1552:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1554:	d001      	beq.n	155a <pm_policy_next_state+0x72>
    1556:	4582      	cmp	sl, r0
    1558:	d905      	bls.n	1566 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    155a:	1c73      	adds	r3, r6, #1
    155c:	d0de      	beq.n	151c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    155e:	9b01      	ldr	r3, [sp, #4]
    1560:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1562:	42b0      	cmp	r0, r6
    1564:	d9da      	bls.n	151c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1566:	3c01      	subs	r4, #1
    1568:	b2a4      	uxth	r4, r4
    156a:	3d0c      	subs	r5, #12
    156c:	e7d4      	b.n	1518 <pm_policy_next_state+0x30>
    156e:	bf00      	nop
    1570:	20000004 	.word	0x20000004
    1574:	000f423f 	.word	0x000f423f
    1578:	000f4240 	.word	0x000f4240

0000157c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    157c:	b908      	cbnz	r0, 1582 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    157e:	4b02      	ldr	r3, [pc, #8]	; (1588 <pm_state_cpu_get_all+0xc>)
    1580:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1582:	2000      	movs	r0, #0
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	000057c8 	.word	0x000057c8

0000158c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    158c:	4901      	ldr	r1, [pc, #4]	; (1594 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    158e:	2210      	movs	r2, #16
	str	r2, [r1]
    1590:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1592:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1594:	e000ed10 	.word	0xe000ed10

00001598 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1598:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    159a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    159c:	f380 8811 	msr	BASEPRI, r0
	isb
    15a0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    15a4:	f3bf 8f4f 	dsb	sy
    15a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    15aa:	b662      	cpsie	i
	isb
    15ac:	f3bf 8f6f 	isb	sy

	bx	lr
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop

000015b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    15b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    15b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    15b8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    15bc:	f3bf 8f4f 	dsb	sy
    15c0:	bf20      	wfe

	msr	BASEPRI, r0
    15c2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    15c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    15c8:	4770      	bx	lr
    15ca:	bf00      	nop

000015cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    15cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    15ce:	2800      	cmp	r0, #0
    15d0:	db07      	blt.n	15e2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d2:	4a04      	ldr	r2, [pc, #16]	; (15e4 <arch_irq_enable+0x18>)
    15d4:	0941      	lsrs	r1, r0, #5
    15d6:	2301      	movs	r3, #1
    15d8:	f000 001f 	and.w	r0, r0, #31
    15dc:	4083      	lsls	r3, r0
    15de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    15e2:	4770      	bx	lr
    15e4:	e000e100 	.word	0xe000e100

000015e8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    15e8:	4b05      	ldr	r3, [pc, #20]	; (1600 <arch_irq_is_enabled+0x18>)
    15ea:	0942      	lsrs	r2, r0, #5
    15ec:	f000 001f 	and.w	r0, r0, #31
    15f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    15f4:	2301      	movs	r3, #1
    15f6:	fa03 f000 	lsl.w	r0, r3, r0
}
    15fa:	4010      	ands	r0, r2
    15fc:	4770      	bx	lr
    15fe:	bf00      	nop
    1600:	e000e100 	.word	0xe000e100

00001604 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1604:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1606:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1608:	bfa8      	it	ge
    160a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    160e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1612:	bfb8      	it	lt
    1614:	4b06      	ldrlt	r3, [pc, #24]	; (1630 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1616:	ea4f 1141 	mov.w	r1, r1, lsl #5
    161a:	bfac      	ite	ge
    161c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1620:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1624:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1626:	bfb4      	ite	lt
    1628:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    162a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    162e:	4770      	bx	lr
    1630:	e000ed14 	.word	0xe000ed14

00001634 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1634:	bf30      	wfi
    b z_SysNmiOnReset
    1636:	f7ff bffd 	b.w	1634 <z_SysNmiOnReset>
    163a:	bf00      	nop

0000163c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    163c:	4a0b      	ldr	r2, [pc, #44]	; (166c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    163e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1640:	4b0b      	ldr	r3, [pc, #44]	; (1670 <z_arm_prep_c+0x34>)
    1642:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1646:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    164c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1650:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1654:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    165c:	f002 fb9e 	bl	3d9c <z_bss_zero>
	z_data_copy();
    1660:	f003 f842 	bl	46e8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1664:	f000 f9d6 	bl	1a14 <z_arm_interrupt_init>
	z_cstart();
    1668:	f002 fbdc 	bl	3e24 <z_cstart>
    166c:	00000000 	.word	0x00000000
    1670:	e000ed00 	.word	0xe000ed00

00001674 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1674:	4a09      	ldr	r2, [pc, #36]	; (169c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1676:	490a      	ldr	r1, [pc, #40]	; (16a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1678:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    167a:	6809      	ldr	r1, [r1, #0]
    167c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    167e:	4909      	ldr	r1, [pc, #36]	; (16a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1680:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1682:	684b      	ldr	r3, [r1, #4]
    1684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1688:	604b      	str	r3, [r1, #4]
    168a:	2300      	movs	r3, #0
    168c:	f383 8811 	msr	BASEPRI, r3
    1690:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1694:	6893      	ldr	r3, [r2, #8]
}
    1696:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1698:	4770      	bx	lr
    169a:	bf00      	nop
    169c:	2000038c 	.word	0x2000038c
    16a0:	000058f8 	.word	0x000058f8
    16a4:	e000ed00 	.word	0xe000ed00

000016a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    16a8:	4912      	ldr	r1, [pc, #72]	; (16f4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    16aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    16ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    16b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    16b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    16b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16ba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    16bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    16c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    16c4:	4f0c      	ldr	r7, [pc, #48]	; (16f8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    16c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    16ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    16cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    16ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    16d0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    16d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    16d4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    16d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    16da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    16dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    16de:	f000 fa35 	bl	1b4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    16e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    16e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    16ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    16ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    16f2:	4770      	bx	lr
    ldr r1, =_kernel
    16f4:	2000038c 	.word	0x2000038c
    ldr v4, =_SCS_ICSR
    16f8:	e000ed04 	.word	0xe000ed04

000016fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    16fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1700:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1702:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1706:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    170a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    170c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1710:	2902      	cmp	r1, #2
    beq _oops
    1712:	d0ff      	beq.n	1714 <_oops>

00001714 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1714:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1716:	f003 fac8 	bl	4caa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    171a:	bd01      	pop	{r0, pc}

0000171c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    171c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1720:	9b00      	ldr	r3, [sp, #0]
    1722:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1726:	490a      	ldr	r1, [pc, #40]	; (1750 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    172e:	9b02      	ldr	r3, [sp, #8]
    1730:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1734:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    173c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1740:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1744:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1746:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1748:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    174a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    174c:	4770      	bx	lr
    174e:	bf00      	nop
    1750:	000049c7 	.word	0x000049c7

00001754 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1754:	4a09      	ldr	r2, [pc, #36]	; (177c <z_check_thread_stack_fail+0x28>)
{
    1756:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1758:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    175a:	b170      	cbz	r0, 177a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    175c:	f113 0f16 	cmn.w	r3, #22
    1760:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1762:	d005      	beq.n	1770 <z_check_thread_stack_fail+0x1c>
    1764:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1768:	429a      	cmp	r2, r3
    176a:	d805      	bhi.n	1778 <z_check_thread_stack_fail+0x24>
    176c:	4283      	cmp	r3, r0
    176e:	d203      	bcs.n	1778 <z_check_thread_stack_fail+0x24>
		return 0;
    1770:	4281      	cmp	r1, r0
    1772:	bf28      	it	cs
    1774:	2000      	movcs	r0, #0
    1776:	4770      	bx	lr
    1778:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    177a:	4770      	bx	lr
    177c:	2000038c 	.word	0x2000038c

00001780 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1780:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1782:	4b09      	ldr	r3, [pc, #36]	; (17a8 <arch_switch_to_main_thread+0x28>)
    1784:	6098      	str	r0, [r3, #8]
{
    1786:	460d      	mov	r5, r1
    1788:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    178a:	f000 f9df 	bl	1b4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    178e:	4620      	mov	r0, r4
    1790:	f385 8809 	msr	PSP, r5
    1794:	2100      	movs	r1, #0
    1796:	b663      	cpsie	if
    1798:	f381 8811 	msr	BASEPRI, r1
    179c:	f3bf 8f6f 	isb	sy
    17a0:	2200      	movs	r2, #0
    17a2:	2300      	movs	r3, #0
    17a4:	f003 f90f 	bl	49c6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    17a8:	2000038c 	.word	0x2000038c

000017ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    17ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    17ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    17b0:	4a0b      	ldr	r2, [pc, #44]	; (17e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    17b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    17b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    17b6:	bf1e      	ittt	ne
	movne	r1, #0
    17b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    17ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    17bc:	f003 fdd8 	blne	5370 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    17c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    17c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    17c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    17ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    17ce:	4905      	ldr	r1, [pc, #20]	; (17e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    17d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    17d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    17d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    17d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    17da:	4903      	ldr	r1, [pc, #12]	; (17e8 <_isr_wrapper+0x3c>)
	bx r1
    17dc:	4708      	bx	r1
    17de:	0000      	.short	0x0000
	ldr r2, =_kernel
    17e0:	2000038c 	.word	0x2000038c
	ldr r1, =_sw_isr_table
    17e4:	000055f8 	.word	0x000055f8
	ldr r1, =z_arm_int_exit
    17e8:	000017ed 	.word	0x000017ed

000017ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    17ec:	4b04      	ldr	r3, [pc, #16]	; (1800 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    17ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    17f0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    17f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    17f4:	d003      	beq.n	17fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    17f6:	4903      	ldr	r1, [pc, #12]	; (1804 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    17f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    17fc:	600a      	str	r2, [r1, #0]

000017fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    17fe:	4770      	bx	lr
	ldr r3, =_kernel
    1800:	2000038c 	.word	0x2000038c
	ldr r1, =_SCS_ICSR
    1804:	e000ed04 	.word	0xe000ed04

00001808 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1808:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    180a:	4b1d      	ldr	r3, [pc, #116]	; (1880 <mem_manage_fault+0x78>)
{
    180c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    180e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1814:	0792      	lsls	r2, r2, #30
{
    1816:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1818:	d522      	bpl.n	1860 <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    181a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    181c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    181e:	0614      	lsls	r4, r2, #24
    1820:	d51e      	bpl.n	1860 <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1822:	b119      	cbz	r1, 182c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    182a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    182e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1832:	4c13      	ldr	r4, [pc, #76]	; (1880 <mem_manage_fault+0x78>)
    1834:	f012 0f10 	tst.w	r2, #16
    1838:	d115      	bne.n	1866 <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    183c:	0799      	lsls	r1, r3, #30
    183e:	d412      	bmi.n	1866 <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1840:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1844:	4a0e      	ldr	r2, [pc, #56]	; (1880 <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1846:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1848:	bf42      	ittt	mi
    184a:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    184c:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    1850:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1852:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1854:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1858:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    185a:	2300      	movs	r3, #0
    185c:	702b      	strb	r3, [r5, #0]

	return reason;
}
    185e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1860:	f06f 0015 	mvn.w	r0, #21
    1864:	e7e2      	b.n	182c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1866:	6863      	ldr	r3, [r4, #4]
    1868:	051a      	lsls	r2, r3, #20
    186a:	d5e9      	bpl.n	1840 <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    186c:	4631      	mov	r1, r6
    186e:	f7ff ff71 	bl	1754 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1872:	2800      	cmp	r0, #0
    1874:	d0e4      	beq.n	1840 <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1876:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    187a:	2002      	movs	r0, #2
    187c:	e7e1      	b.n	1842 <mem_manage_fault+0x3a>
    187e:	bf00      	nop
    1880:	e000ed00 	.word	0xe000ed00

00001884 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1884:	4b0d      	ldr	r3, [pc, #52]	; (18bc <bus_fault.constprop.0+0x38>)
    1886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    188c:	0592      	lsls	r2, r2, #22
    188e:	d508      	bpl.n	18a2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1890:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1894:	0412      	lsls	r2, r2, #16
    1896:	d504      	bpl.n	18a2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1898:	b118      	cbz	r0, 18a2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    189c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18a0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    18a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    18a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18a6:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18a8:	4a04      	ldr	r2, [pc, #16]	; (18bc <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    18aa:	bf58      	it	pl
    18ac:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18ae:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    18b0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    18b6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    18b8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    18ba:	4770      	bx	lr
    18bc:	e000ed00 	.word	0xe000ed00

000018c0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    18c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18c2:	4b4a      	ldr	r3, [pc, #296]	; (19ec <z_arm_fault+0x12c>)
    18c4:	685b      	ldr	r3, [r3, #4]
{
    18c6:	b08a      	sub	sp, #40	; 0x28
    18c8:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
    18ce:	2600      	movs	r6, #0
    18d0:	f386 8811 	msr	BASEPRI, r6
    18d4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    18d8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    18dc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    18e0:	d111      	bne.n	1906 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    18e2:	f002 000c 	and.w	r0, r2, #12
    18e6:	2808      	cmp	r0, #8
    18e8:	d00d      	beq.n	1906 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    18ea:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    18ec:	bf4c      	ite	mi
    18ee:	460d      	movmi	r5, r1
			*nested_exc = true;
    18f0:	2601      	movpl	r6, #1
	*recoverable = false;
    18f2:	2200      	movs	r2, #0
	switch (fault) {
    18f4:	3b03      	subs	r3, #3
	*recoverable = false;
    18f6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    18fa:	2b03      	cmp	r3, #3
    18fc:	d84d      	bhi.n	199a <z_arm_fault+0xda>
    18fe:	e8df f003 	tbb	[pc, r3]
    1902:	6504      	.short	0x6504
    1904:	6d69      	.short	0x6d69
		return NULL;
    1906:	4635      	mov	r5, r6
    1908:	e7f3      	b.n	18f2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    190a:	4b38      	ldr	r3, [pc, #224]	; (19ec <z_arm_fault+0x12c>)
    190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    190e:	0791      	lsls	r1, r2, #30
    1910:	d443      	bmi.n	199a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1914:	2a00      	cmp	r2, #0
    1916:	db40      	blt.n	199a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    191a:	0052      	lsls	r2, r2, #1
    191c:	d53d      	bpl.n	199a <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    191e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1920:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1926:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    192c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1930:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1932:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    193a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    193c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1940:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1944:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1948:	4291      	cmp	r1, r2
    194a:	d009      	beq.n	1960 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    194e:	b2d2      	uxtb	r2, r2
    1950:	b142      	cbz	r2, 1964 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1952:	f10d 0207 	add.w	r2, sp, #7
    1956:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1958:	4628      	mov	r0, r5
    195a:	f7ff ff55 	bl	1808 <mem_manage_fault>
    195e:	e00a      	b.n	1976 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    1960:	682c      	ldr	r4, [r5, #0]
    1962:	e01b      	b.n	199c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1966:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    196a:	d006      	beq.n	197a <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    196c:	f10d 0107 	add.w	r1, sp, #7
    1970:	2001      	movs	r0, #1
    1972:	f7ff ff87 	bl	1884 <bus_fault.constprop.0>
    1976:	4604      	mov	r4, r0
    1978:	e010      	b.n	199c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    197a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    197c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    1980:	d30b      	bcc.n	199a <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    198a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    198c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    198e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1990:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1994:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1998:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    199a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    199c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    19a0:	b993      	cbnz	r3, 19c8 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    19a2:	2220      	movs	r2, #32
    19a4:	4629      	mov	r1, r5
    19a6:	a802      	add	r0, sp, #8
    19a8:	f003 f9a8 	bl	4cfc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    19ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19ae:	b1be      	cbz	r6, 19e0 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    19b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    19b4:	b922      	cbnz	r2, 19c0 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    19b6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    19ba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    19be:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    19c0:	a902      	add	r1, sp, #8
    19c2:	4620      	mov	r0, r4
    19c4:	f003 f96f 	bl	4ca6 <z_arm_fatal_error>
}
    19c8:	b00a      	add	sp, #40	; 0x28
    19ca:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    19cc:	f10d 0207 	add.w	r2, sp, #7
    19d0:	2100      	movs	r1, #0
    19d2:	e7c1      	b.n	1958 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    19d4:	f10d 0107 	add.w	r1, sp, #7
    19d8:	2000      	movs	r0, #0
    19da:	e7ca      	b.n	1972 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <z_arm_fault+0x12c>)
    19de:	e7d0      	b.n	1982 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    19e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    19e4:	f023 0301 	bic.w	r3, r3, #1
    19e8:	e7e9      	b.n	19be <z_arm_fault+0xfe>
    19ea:	bf00      	nop
    19ec:	e000ed00 	.word	0xe000ed00

000019f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    19f0:	4a02      	ldr	r2, [pc, #8]	; (19fc <z_arm_fault_init+0xc>)
    19f2:	6953      	ldr	r3, [r2, #20]
    19f4:	f043 0310 	orr.w	r3, r3, #16
    19f8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    19fa:	4770      	bx	lr
    19fc:	e000ed00 	.word	0xe000ed00

00001a00 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1a00:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1a04:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1a08:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1a0a:	4672      	mov	r2, lr
	bl z_arm_fault
    1a0c:	f7ff ff58 	bl	18c0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1a10:	bd01      	pop	{r0, pc}
    1a12:	bf00      	nop

00001a14 <z_arm_interrupt_init>:
    1a14:	4804      	ldr	r0, [pc, #16]	; (1a28 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1a16:	2300      	movs	r3, #0
    1a18:	2120      	movs	r1, #32
    1a1a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1a1c:	3301      	adds	r3, #1
    1a1e:	2b27      	cmp	r3, #39	; 0x27
    1a20:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1a24:	d1f9      	bne.n	1a1a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1a26:	4770      	bx	lr
    1a28:	e000e100 	.word	0xe000e100

00001a2c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1a2c:	2000      	movs	r0, #0
    msr CONTROL, r0
    1a2e:	f380 8814 	msr	CONTROL, r0
    isb
    1a32:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1a36:	f7ff fc6f 	bl	1318 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a3a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a3c:	490d      	ldr	r1, [pc, #52]	; (1a74 <__start+0x48>)
    str r0, [r1]
    1a3e:	6008      	str	r0, [r1, #0]
    dsb
    1a40:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a44:	480c      	ldr	r0, [pc, #48]	; (1a78 <__start+0x4c>)
    msr msp, r0
    1a46:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a4a:	f000 f82b 	bl	1aa4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a4e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a50:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a54:	4809      	ldr	r0, [pc, #36]	; (1a7c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a56:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1a5a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a5c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a60:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a64:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a66:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a68:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a6c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a70:	f7ff fde4 	bl	163c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1a74:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a78:	200015c0 	.word	0x200015c0
    ldr r0, =z_interrupt_stacks
    1a7c:	20000800 	.word	0x20000800

00001a80 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1a80:	4907      	ldr	r1, [pc, #28]	; (1aa0 <z_arm_clear_arm_mpu_config+0x20>)
    1a82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1a86:	2300      	movs	r3, #0
	int num_regions =
    1a88:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1a8c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1a8e:	4293      	cmp	r3, r2
    1a90:	db00      	blt.n	1a94 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1a92:	4770      	bx	lr
  MPU->RNR = rnr;
    1a94:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1a98:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a9c:	3301      	adds	r3, #1
    1a9e:	e7f6      	b.n	1a8e <z_arm_clear_arm_mpu_config+0xe>
    1aa0:	e000ed00 	.word	0xe000ed00

00001aa4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1aa4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1aa6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1aa8:	2300      	movs	r3, #0
    1aaa:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1aae:	f7ff ffe7 	bl	1a80 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1ab2:	4b14      	ldr	r3, [pc, #80]	; (1b04 <z_arm_init_arch_hw_at_boot+0x60>)
    1ab4:	f04f 32ff 	mov.w	r2, #4294967295
    1ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1acc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1ad0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1ad8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1adc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1ae0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1ae4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1ae8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1aec:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1af0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1af4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1af8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afe:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1b02:	bd08      	pop	{r3, pc}
    1b04:	e000e100 	.word	0xe000e100

00001b08 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1b08:	4b08      	ldr	r3, [pc, #32]	; (1b2c <z_impl_k_thread_abort+0x24>)
    1b0a:	689b      	ldr	r3, [r3, #8]
    1b0c:	4283      	cmp	r3, r0
    1b0e:	d10b      	bne.n	1b28 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b10:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b14:	b143      	cbz	r3, 1b28 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b16:	4b06      	ldr	r3, [pc, #24]	; (1b30 <z_impl_k_thread_abort+0x28>)
    1b18:	685a      	ldr	r2, [r3, #4]
    1b1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1b1e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1b22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1b26:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1b28:	f002 bd7e 	b.w	4628 <z_thread_abort>
    1b2c:	2000038c 	.word	0x2000038c
    1b30:	e000ed00 	.word	0xe000ed00

00001b34 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b34:	4b02      	ldr	r3, [pc, #8]	; (1b40 <z_arm_configure_static_mpu_regions+0xc>)
    1b36:	4a03      	ldr	r2, [pc, #12]	; (1b44 <z_arm_configure_static_mpu_regions+0x10>)
    1b38:	4803      	ldr	r0, [pc, #12]	; (1b48 <z_arm_configure_static_mpu_regions+0x14>)
    1b3a:	2101      	movs	r1, #1
    1b3c:	f000 b870 	b.w	1c20 <arm_core_mpu_configure_static_mpu_regions>
    1b40:	20010000 	.word	0x20010000
    1b44:	20000000 	.word	0x20000000
    1b48:	000057c8 	.word	0x000057c8

00001b4c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1b4c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1b50:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    1b52:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1b54:	4a04      	ldr	r2, [pc, #16]	; (1b68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1b56:	2140      	movs	r1, #64	; 0x40
    1b58:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1b5c:	4618      	mov	r0, r3
    1b5e:	2101      	movs	r1, #1
    1b60:	f000 b868 	b.w	1c34 <arm_core_mpu_configure_dynamic_mpu_regions>
    1b64:	20000214 	.word	0x20000214
    1b68:	150b0000 	.word	0x150b0000

00001b6c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1b6e:	4e20      	ldr	r6, [pc, #128]	; (1bf0 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1b70:	2500      	movs	r5, #0
    1b72:	428d      	cmp	r5, r1
    1b74:	da39      	bge.n	1bea <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    1b76:	6844      	ldr	r4, [r0, #4]
    1b78:	b374      	cbz	r4, 1bd8 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1b7a:	b153      	cbz	r3, 1b92 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1b7c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1b80:	ea14 0f0c 	tst.w	r4, ip
    1b84:	d12f      	bne.n	1be6 <mpu_configure_regions+0x7a>
		&&
    1b86:	2c1f      	cmp	r4, #31
    1b88:	d92d      	bls.n	1be6 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    1b8a:	6807      	ldr	r7, [r0, #0]
		&&
    1b8c:	ea1c 0f07 	tst.w	ip, r7
    1b90:	d129      	bne.n	1be6 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1b92:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1b94:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1b96:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1b9a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    1b9e:	d91e      	bls.n	1bde <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1ba0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1ba4:	d81d      	bhi.n	1be2 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1ba6:	3c01      	subs	r4, #1
    1ba8:	fab4 f484 	clz	r4, r4
    1bac:	f1c4 041f 	rsb	r4, r4, #31
    1bb0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1bb2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1bb6:	ea4c 0c04 	orr.w	ip, ip, r4
    1bba:	d814      	bhi.n	1be6 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bbc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1bc0:	4314      	orrs	r4, r2
    1bc2:	f044 0410 	orr.w	r4, r4, #16
    1bc6:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bca:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1bce:	f04c 0401 	orr.w	r4, ip, #1
    1bd2:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1bd6:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1bd8:	3501      	adds	r5, #1
    1bda:	300c      	adds	r0, #12
    1bdc:	e7c9      	b.n	1b72 <mpu_configure_regions+0x6>
		return REGION_32B;
    1bde:	2408      	movs	r4, #8
    1be0:	e7e7      	b.n	1bb2 <mpu_configure_regions+0x46>
		return REGION_4G;
    1be2:	243e      	movs	r4, #62	; 0x3e
    1be4:	e7e5      	b.n	1bb2 <mpu_configure_regions+0x46>
			return -EINVAL;
    1be6:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    1bea:	4610      	mov	r0, r2
    1bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bee:	bf00      	nop
    1bf0:	e000ed00 	.word	0xe000ed00

00001bf4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1bf4:	4b04      	ldr	r3, [pc, #16]	; (1c08 <arm_core_mpu_enable+0x14>)
    1bf6:	2205      	movs	r2, #5
    1bf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1bfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c00:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c04:	4770      	bx	lr
    1c06:	bf00      	nop
    1c08:	e000ed00 	.word	0xe000ed00

00001c0c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c10:	4b02      	ldr	r3, [pc, #8]	; (1c1c <arm_core_mpu_disable+0x10>)
    1c12:	2200      	movs	r2, #0
    1c14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop
    1c1c:	e000ed00 	.word	0xe000ed00

00001c20 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c20:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c22:	4c03      	ldr	r4, [pc, #12]	; (1c30 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1c24:	2301      	movs	r3, #1
    1c26:	7822      	ldrb	r2, [r4, #0]
    1c28:	f7ff ffa0 	bl	1b6c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c2c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	200003c4 	.word	0x200003c4

00001c34 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    1c34:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1c36:	4a09      	ldr	r2, [pc, #36]	; (1c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1c38:	2300      	movs	r3, #0
    1c3a:	7812      	ldrb	r2, [r2, #0]
    1c3c:	f7ff ff96 	bl	1b6c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1c40:	f110 0f16 	cmn.w	r0, #22
    1c44:	d002      	beq.n	1c4c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1c46:	4a06      	ldr	r2, [pc, #24]	; (1c60 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1c48:	2807      	cmp	r0, #7
    1c4a:	dd00      	ble.n	1c4e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1c4c:	bd08      	pop	{r3, pc}
    1c4e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1c52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1c56:	3001      	adds	r0, #1
    1c58:	e7f6      	b.n	1c48 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1c5a:	bf00      	nop
    1c5c:	200003c4 	.word	0x200003c4
    1c60:	e000ed00 	.word	0xe000ed00

00001c64 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1c64:	4914      	ldr	r1, [pc, #80]	; (1cb8 <z_arm_mpu_init+0x54>)
    1c66:	6808      	ldr	r0, [r1, #0]
    1c68:	2808      	cmp	r0, #8
{
    1c6a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1c6c:	d821      	bhi.n	1cb2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1c6e:	f7ff ffcd 	bl	1c0c <arm_core_mpu_disable>
    1c72:	4c12      	ldr	r4, [pc, #72]	; (1cbc <z_arm_mpu_init+0x58>)
    1c74:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c76:	2200      	movs	r2, #0
    1c78:	4290      	cmp	r0, r2
    1c7a:	f101 010c 	add.w	r1, r1, #12
    1c7e:	d105      	bne.n	1c8c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1c80:	4b0f      	ldr	r3, [pc, #60]	; (1cc0 <z_arm_mpu_init+0x5c>)
    1c82:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1c84:	f7ff ffb6 	bl	1bf4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1c88:	2000      	movs	r0, #0
}
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c90:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1c94:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1c98:	4313      	orrs	r3, r2
    1c9a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c9e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1ca6:	f043 0301 	orr.w	r3, r3, #1
    1caa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1cae:	3201      	adds	r2, #1
    1cb0:	e7e2      	b.n	1c78 <z_arm_mpu_init+0x14>
		return -1;
    1cb2:	f04f 30ff 	mov.w	r0, #4294967295
    1cb6:	e7e8      	b.n	1c8a <z_arm_mpu_init+0x26>
    1cb8:	000057d4 	.word	0x000057d4
    1cbc:	e000ed00 	.word	0xe000ed00
    1cc0:	200003c4 	.word	0x200003c4

00001cc4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1cc4:	4b01      	ldr	r3, [pc, #4]	; (1ccc <__stdout_hook_install+0x8>)
    1cc6:	6018      	str	r0, [r3, #0]
}
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	20000008 	.word	0x20000008

00001cd0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1cd0:	f04f 0320 	mov.w	r3, #32
    1cd4:	f3ef 8211 	mrs	r2, BASEPRI
    1cd8:	f383 8812 	msr	BASEPRI_MAX, r3
    1cdc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1ce0:	4906      	ldr	r1, [pc, #24]	; (1cfc <nordicsemi_nrf52_init+0x2c>)
    1ce2:	2301      	movs	r3, #1
    1ce4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1ce8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1cec:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1cf0:	f382 8811 	msr	BASEPRI, r2
    1cf4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1cf8:	2000      	movs	r0, #0
    1cfa:	4770      	bx	lr
    1cfc:	4001e000 	.word	0x4001e000

00001d00 <sys_arch_reboot>:
    *p_gpregret = val;
    1d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d04:	b2c0      	uxtb	r0, r0
    1d06:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1d0a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1d0e:	4905      	ldr	r1, [pc, #20]	; (1d24 <sys_arch_reboot+0x24>)
    1d10:	4b05      	ldr	r3, [pc, #20]	; (1d28 <sys_arch_reboot+0x28>)
    1d12:	68ca      	ldr	r2, [r1, #12]
    1d14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1d18:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1d1a:	60cb      	str	r3, [r1, #12]
    1d1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1d20:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1d22:	e7fd      	b.n	1d20 <sys_arch_reboot+0x20>
    1d24:	e000ed00 	.word	0xe000ed00
    1d28:	05fa0004 	.word	0x05fa0004

00001d2c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d2c:	b120      	cbz	r0, 1d38 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1d2e:	4b03      	ldr	r3, [pc, #12]	; (1d3c <arch_busy_wait+0x10>)
    1d30:	0180      	lsls	r0, r0, #6
    1d32:	f043 0301 	orr.w	r3, r3, #1
    1d36:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	000057c0 	.word	0x000057c0

00001d40 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1d40:	4b08      	ldr	r3, [pc, #32]	; (1d64 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d42:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d44:	1ac3      	subs	r3, r0, r3
{
    1d46:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d48:	4907      	ldr	r1, [pc, #28]	; (1d68 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d4a:	109b      	asrs	r3, r3, #2
{
    1d4c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d4e:	4359      	muls	r1, r3
    1d50:	4806      	ldr	r0, [pc, #24]	; (1d6c <onoff_stop+0x2c>)
    1d52:	2240      	movs	r2, #64	; 0x40
    1d54:	f003 f817 	bl	4d86 <stop>
	notify(mgr, res);
    1d58:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d5a:	4601      	mov	r1, r0
	notify(mgr, res);
    1d5c:	4620      	mov	r0, r4
}
    1d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1d62:	4718      	bx	r3
    1d64:	20000234 	.word	0x20000234
    1d68:	b6db6db7 	.word	0xb6db6db7
    1d6c:	00005598 	.word	0x00005598

00001d70 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d72:	4c0c      	ldr	r4, [pc, #48]	; (1da4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d74:	4a0c      	ldr	r2, [pc, #48]	; (1da8 <onoff_start+0x38>)
    1d76:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1d78:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d7a:	9300      	str	r3, [sp, #0]
{
    1d7c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d7e:	460b      	mov	r3, r1
    1d80:	490a      	ldr	r1, [pc, #40]	; (1dac <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d82:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d84:	4361      	muls	r1, r4
{
    1d86:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d88:	4809      	ldr	r0, [pc, #36]	; (1db0 <onoff_start+0x40>)
    1d8a:	f003 f829 	bl	4de0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1d8e:	1e01      	subs	r1, r0, #0
    1d90:	da05      	bge.n	1d9e <onoff_start+0x2e>
		notify(mgr, err);
    1d92:	4630      	mov	r0, r6
    1d94:	462b      	mov	r3, r5
	}
}
    1d96:	b002      	add	sp, #8
    1d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1d9c:	4718      	bx	r3
}
    1d9e:	b002      	add	sp, #8
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	bf00      	nop
    1da4:	20000234 	.word	0x20000234
    1da8:	00004e4d 	.word	0x00004e4d
    1dac:	b6db6db7 	.word	0xb6db6db7
    1db0:	00005598 	.word	0x00005598

00001db4 <generic_hfclk_stop>:
{
    1db4:	b510      	push	{r4, lr}
	__asm__ volatile(
    1db6:	f04f 0320 	mov.w	r3, #32
    1dba:	f3ef 8411 	mrs	r4, BASEPRI
    1dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    1dc2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1dc6:	4a07      	ldr	r2, [pc, #28]	; (1de4 <generic_hfclk_stop+0x30>)
    1dc8:	6813      	ldr	r3, [r2, #0]
    1dca:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1dce:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1dd0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1dd2:	d402      	bmi.n	1dda <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1dd4:	2001      	movs	r0, #1
    1dd6:	f003 f9eb 	bl	51b0 <nrfx_clock_stop>
	__asm__ volatile(
    1dda:	f384 8811 	msr	BASEPRI, r4
    1dde:	f3bf 8f6f 	isb	sy
}
    1de2:	bd10      	pop	{r4, pc}
    1de4:	20000284 	.word	0x20000284

00001de8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1de8:	2200      	movs	r2, #0
{
    1dea:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dec:	2101      	movs	r1, #1
{
    1dee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1df0:	4610      	mov	r0, r2
    1df2:	f7ff fc07 	bl	1604 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1df6:	480f      	ldr	r0, [pc, #60]	; (1e34 <clk_init+0x4c>)
    1df8:	f001 f8fa 	bl	2ff0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1dfc:	4b0e      	ldr	r3, [pc, #56]	; (1e38 <clk_init+0x50>)
    1dfe:	4298      	cmp	r0, r3
    1e00:	d115      	bne.n	1e2e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1e02:	f003 f9c8 	bl	5196 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1e06:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e08:	490c      	ldr	r1, [pc, #48]	; (1e3c <clk_init+0x54>)
    1e0a:	4630      	mov	r0, r6
    1e0c:	f002 fe35 	bl	4a7a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1e10:	2800      	cmp	r0, #0
    1e12:	db0b      	blt.n	1e2c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e14:	2501      	movs	r5, #1
    1e16:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1e18:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e1a:	4908      	ldr	r1, [pc, #32]	; (1e3c <clk_init+0x54>)
    1e1c:	f104 001c 	add.w	r0, r4, #28
    1e20:	f002 fe2b 	bl	4a7a <onoff_manager_init>
		if (err < 0) {
    1e24:	2800      	cmp	r0, #0
    1e26:	db01      	blt.n	1e2c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e28:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1e2a:	2000      	movs	r0, #0
}
    1e2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1e2e:	f06f 0004 	mvn.w	r0, #4
    1e32:	e7fb      	b.n	1e2c <clk_init+0x44>
    1e34:	00001e75 	.word	0x00001e75
    1e38:	0bad0000 	.word	0x0bad0000
    1e3c:	000057f4 	.word	0x000057f4

00001e40 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1e40:	b570      	push	{r4, r5, r6, lr}
    1e42:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1e44:	230c      	movs	r3, #12
    1e46:	4809      	ldr	r0, [pc, #36]	; (1e6c <clkstarted_handle.constprop.0+0x2c>)
    1e48:	434b      	muls	r3, r1
    1e4a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1e4c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1e50:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1e52:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1e54:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1e56:	4418      	add	r0, r3
    1e58:	f002 ff82 	bl	4d60 <set_on_state>
	if (callback) {
    1e5c:	b12d      	cbz	r5, 1e6a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e5e:	4632      	mov	r2, r6
    1e60:	462b      	mov	r3, r5
    1e62:	4803      	ldr	r0, [pc, #12]	; (1e70 <clkstarted_handle.constprop.0+0x30>)
}
    1e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e68:	4718      	bx	r3
}
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
    1e6c:	20000234 	.word	0x20000234
    1e70:	00005598 	.word	0x00005598

00001e74 <clock_event_handler>:
	switch (event) {
    1e74:	b110      	cbz	r0, 1e7c <clock_event_handler+0x8>
    1e76:	2801      	cmp	r0, #1
    1e78:	d004      	beq.n	1e84 <clock_event_handler+0x10>
    1e7a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e7c:	4b03      	ldr	r3, [pc, #12]	; (1e8c <clock_event_handler+0x18>)
    1e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e80:	075b      	lsls	r3, r3, #29
    1e82:	d101      	bne.n	1e88 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e84:	f7ff bfdc 	b.w	1e40 <clkstarted_handle.constprop.0>
}
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop
    1e8c:	20000234 	.word	0x20000234

00001e90 <generic_hfclk_start>:
{
    1e90:	b508      	push	{r3, lr}
	__asm__ volatile(
    1e92:	f04f 0320 	mov.w	r3, #32
    1e96:	f3ef 8111 	mrs	r1, BASEPRI
    1e9a:	f383 8812 	msr	BASEPRI_MAX, r3
    1e9e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1ea2:	4a12      	ldr	r2, [pc, #72]	; (1eec <generic_hfclk_start+0x5c>)
    1ea4:	6813      	ldr	r3, [r2, #0]
    1ea6:	f043 0002 	orr.w	r0, r3, #2
    1eaa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1eac:	07da      	lsls	r2, r3, #31
    1eae:	d408      	bmi.n	1ec2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    1eb0:	f381 8811 	msr	BASEPRI, r1
    1eb4:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1eb8:	2001      	movs	r0, #1
}
    1eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1ebe:	f001 b8a7 	b.w	3010 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ec6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1eca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1ece:	07d3      	lsls	r3, r2, #31
    1ed0:	d5ee      	bpl.n	1eb0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1ed2:	4807      	ldr	r0, [pc, #28]	; (1ef0 <generic_hfclk_start+0x60>)
    1ed4:	f002 ff44 	bl	4d60 <set_on_state>
    1ed8:	f381 8811 	msr	BASEPRI, r1
    1edc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1ee0:	2000      	movs	r0, #0
}
    1ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ee6:	f7ff bfab 	b.w	1e40 <clkstarted_handle.constprop.0>
    1eea:	bf00      	nop
    1eec:	20000284 	.word	0x20000284
    1ef0:	20000274 	.word	0x20000274

00001ef4 <api_blocking_start>:
{
    1ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ef6:	2200      	movs	r2, #0
    1ef8:	2301      	movs	r3, #1
    1efa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1efe:	4a09      	ldr	r2, [pc, #36]	; (1f24 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f00:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f04:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f06:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f0a:	f002 ff98 	bl	4e3e <api_start>
	if (err < 0) {
    1f0e:	2800      	cmp	r0, #0
    1f10:	db05      	blt.n	1f1e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f16:	2300      	movs	r3, #0
    1f18:	4668      	mov	r0, sp
    1f1a:	f002 f8bb 	bl	4094 <z_impl_k_sem_take>
}
    1f1e:	b005      	add	sp, #20
    1f20:	f85d fb04 	ldr.w	pc, [sp], #4
    1f24:	00004e65 	.word	0x00004e65

00001f28 <lfclk_start>:
{
    1f28:	b510      	push	{r4, lr}
	if (!once) {
    1f2a:	4c07      	ldr	r4, [pc, #28]	; (1f48 <lfclk_start+0x20>)
    1f2c:	7823      	ldrb	r3, [r4, #0]
    1f2e:	b92b      	cbnz	r3, 1f3c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    1f30:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1f34:	f003 fb07 	bl	5546 <z_impl_k_busy_wait>
		once = true;
    1f38:	2301      	movs	r3, #1
    1f3a:	7023      	strb	r3, [r4, #0]
}
    1f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1f40:	2000      	movs	r0, #0
    1f42:	f001 b865 	b.w	3010 <nrfx_clock_start>
    1f46:	bf00      	nop
    1f48:	200003c5 	.word	0x200003c5

00001f4c <z_nrf_clock_control_lf_on>:
{
    1f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f50:	4938      	ldr	r1, [pc, #224]	; (2034 <z_nrf_clock_control_lf_on+0xe8>)
    1f52:	f3bf 8f5b 	dmb	ish
    1f56:	4607      	mov	r7, r0
    1f58:	2201      	movs	r2, #1
    1f5a:	e851 3f00 	ldrex	r3, [r1]
    1f5e:	e841 2000 	strex	r0, r2, [r1]
    1f62:	2800      	cmp	r0, #0
    1f64:	d1f9      	bne.n	1f5a <z_nrf_clock_control_lf_on+0xe>
    1f66:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1f6a:	b933      	cbnz	r3, 1f7a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f6c:	4932      	ldr	r1, [pc, #200]	; (2038 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1f6e:	4833      	ldr	r0, [pc, #204]	; (203c <z_nrf_clock_control_lf_on+0xf0>)
    1f70:	604b      	str	r3, [r1, #4]
    1f72:	60cb      	str	r3, [r1, #12]
    1f74:	608a      	str	r2, [r1, #8]
    1f76:	f002 fd93 	bl	4aa0 <onoff_request>
	switch (start_mode) {
    1f7a:	1e7b      	subs	r3, r7, #1
    1f7c:	2b01      	cmp	r3, #1
    1f7e:	d82b      	bhi.n	1fd8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1f80:	2f01      	cmp	r7, #1
    1f82:	d107      	bne.n	1f94 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f88:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1f8c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1f90:	2b01      	cmp	r3, #1
    1f92:	d021      	beq.n	1fd8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f94:	f003 f9e6 	bl	5364 <k_is_in_isr>
    1f98:	4605      	mov	r5, r0
    1f9a:	b9f8      	cbnz	r0, 1fdc <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1f9c:	4b28      	ldr	r3, [pc, #160]	; (2040 <z_nrf_clock_control_lf_on+0xf4>)
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	b1e3      	cbz	r3, 1fdc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1fa6:	2202      	movs	r2, #2
    1fa8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1fac:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fae:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2044 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1fb2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1fb6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1fba:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1fbe:	03d2      	lsls	r2, r2, #15
    1fc0:	d516      	bpl.n	1ff0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1fc2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1fc6:	2b01      	cmp	r3, #1
    1fc8:	d001      	beq.n	1fce <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1fca:	2f01      	cmp	r7, #1
    1fcc:	d110      	bne.n	1ff0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1fce:	b35d      	cbz	r5, 2028 <z_nrf_clock_control_lf_on+0xdc>
    1fd0:	f386 8811 	msr	BASEPRI, r6
    1fd4:	f3bf 8f6f 	isb	sy
}
    1fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1fdc:	f04f 0320 	mov.w	r3, #32
    1fe0:	f3ef 8611 	mrs	r6, BASEPRI
    1fe4:	f383 8812 	msr	BASEPRI_MAX, r3
    1fe8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fec:	2501      	movs	r5, #1
    1fee:	e7de      	b.n	1fae <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1ff0:	b1ad      	cbz	r5, 201e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1ff2:	4630      	mov	r0, r6
    1ff4:	f7ff fade 	bl	15b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1ff8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d1da      	bne.n	1fb6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2000:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2004:	2a00      	cmp	r2, #0
    2006:	d0d6      	beq.n	1fb6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2008:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    200c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2010:	2301      	movs	r3, #1
    2012:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    2016:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    201a:	60a3      	str	r3, [r4, #8]
}
    201c:	e7cb      	b.n	1fb6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    201e:	2100      	movs	r1, #0
    2020:	2021      	movs	r0, #33	; 0x21
    2022:	f002 fae1 	bl	45e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2026:	e7e7      	b.n	1ff8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    2028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    202c:	2202      	movs	r2, #2
    202e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2032:	e7d1      	b.n	1fd8 <z_nrf_clock_control_lf_on+0x8c>
    2034:	20000230 	.word	0x20000230
    2038:	20000220 	.word	0x20000220
    203c:	20000250 	.word	0x20000250
    2040:	200007d8 	.word	0x200007d8
    2044:	e000e100 	.word	0xe000e100

00002048 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2048:	b508      	push	{r3, lr}
    204a:	4807      	ldr	r0, [pc, #28]	; (2068 <uart_console_init+0x20>)
    204c:	f003 f960 	bl	5310 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2050:	b138      	cbz	r0, 2062 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    2052:	4806      	ldr	r0, [pc, #24]	; (206c <uart_console_init+0x24>)
    2054:	f7ff fe36 	bl	1cc4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2058:	4804      	ldr	r0, [pc, #16]	; (206c <uart_console_init+0x24>)
    205a:	f7fe f9cf 	bl	3fc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    205e:	2000      	movs	r0, #0
}
    2060:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2062:	f06f 0012 	mvn.w	r0, #18
    2066:	e7fb      	b.n	2060 <uart_console_init+0x18>
    2068:	000055c8 	.word	0x000055c8
    206c:	00002071 	.word	0x00002071

00002070 <console_out>:
	if ('\n' == c) {
    2070:	280a      	cmp	r0, #10
{
    2072:	b538      	push	{r3, r4, r5, lr}
    2074:	4d07      	ldr	r5, [pc, #28]	; (2094 <console_out+0x24>)
    2076:	4604      	mov	r4, r0
	if ('\n' == c) {
    2078:	d104      	bne.n	2084 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    207a:	68ab      	ldr	r3, [r5, #8]
    207c:	210d      	movs	r1, #13
    207e:	685b      	ldr	r3, [r3, #4]
    2080:	4628      	mov	r0, r5
    2082:	4798      	blx	r3
    2084:	68ab      	ldr	r3, [r5, #8]
    2086:	4803      	ldr	r0, [pc, #12]	; (2094 <console_out+0x24>)
    2088:	685b      	ldr	r3, [r3, #4]
    208a:	b2e1      	uxtb	r1, r4
    208c:	4798      	blx	r3
}
    208e:	4620      	mov	r0, r4
    2090:	bd38      	pop	{r3, r4, r5, pc}
    2092:	bf00      	nop
    2094:	000055c8 	.word	0x000055c8

00002098 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2098:	b530      	push	{r4, r5, lr}
	return port->config;
    209a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    209c:	7b05      	ldrb	r5, [r0, #12]
    209e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    20a2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    20a6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    20a8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    20ac:	d105      	bne.n	20ba <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    20ae:	4620      	mov	r0, r4
    20b0:	f001 fa72 	bl	3598 <nrfx_gpiote_trigger_disable>

		return 0;
    20b4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    20b6:	b005      	add	sp, #20
    20b8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    20ba:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    20bc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    20c0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    20c4:	d114      	bne.n	20f0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    20c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    20ca:	bf0c      	ite	eq
    20cc:	2304      	moveq	r3, #4
    20ce:	2305      	movne	r3, #5
    20d0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20d4:	2300      	movs	r3, #0
    20d6:	4619      	mov	r1, r3
    20d8:	aa02      	add	r2, sp, #8
    20da:	4620      	mov	r0, r4
    20dc:	f001 f892 	bl	3204 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    20e0:	4b1d      	ldr	r3, [pc, #116]	; (2158 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    20e2:	4298      	cmp	r0, r3
    20e4:	d135      	bne.n	2152 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    20e6:	2101      	movs	r1, #1
    20e8:	4620      	mov	r0, r4
    20ea:	f001 fa11 	bl	3510 <nrfx_gpiote_trigger_enable>
	return 0;
    20ee:	e7e1      	b.n	20b4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    20f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    20f4:	d022      	beq.n	213c <gpio_nrfx_pin_interrupt_configure+0xa4>
    20f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    20fa:	bf14      	ite	ne
    20fc:	2301      	movne	r3, #1
    20fe:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2100:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2104:	6883      	ldr	r3, [r0, #8]
    2106:	40cb      	lsrs	r3, r1
    2108:	07d9      	lsls	r1, r3, #31
    210a:	d4e3      	bmi.n	20d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
    210c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2110:	d1e0      	bne.n	20d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2112:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2116:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    211a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2122:	07db      	lsls	r3, r3, #31
    2124:	d4d6      	bmi.n	20d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2126:	f10d 0507 	add.w	r5, sp, #7
    212a:	4629      	mov	r1, r5
    212c:	4620      	mov	r0, r4
    212e:	f001 f99b 	bl	3468 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2132:	4b0a      	ldr	r3, [pc, #40]	; (215c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2134:	4298      	cmp	r0, r3
    2136:	d003      	beq.n	2140 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    2138:	9503      	str	r5, [sp, #12]
    213a:	e7cb      	b.n	20d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    213c:	2303      	movs	r3, #3
    213e:	e7df      	b.n	2100 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2140:	4628      	mov	r0, r5
    2142:	f001 f9df 	bl	3504 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2146:	4b04      	ldr	r3, [pc, #16]	; (2158 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2148:	4298      	cmp	r0, r3
    214a:	d0f5      	beq.n	2138 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    214c:	f06f 000b 	mvn.w	r0, #11
    2150:	e7b1      	b.n	20b6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2152:	f06f 0015 	mvn.w	r0, #21
    2156:	e7ae      	b.n	20b6 <gpio_nrfx_pin_interrupt_configure+0x1e>
    2158:	0bad0000 	.word	0x0bad0000
    215c:	0bad0004 	.word	0x0bad0004

00002160 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2160:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2162:	f001 f9bf 	bl	34e4 <nrfx_gpiote_is_init>
    2166:	4604      	mov	r4, r0
    2168:	b968      	cbnz	r0, 2186 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    216a:	f001 f993 	bl	3494 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    216e:	4b08      	ldr	r3, [pc, #32]	; (2190 <gpio_nrfx_init+0x30>)
    2170:	4298      	cmp	r0, r3
    2172:	d10a      	bne.n	218a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2174:	4807      	ldr	r0, [pc, #28]	; (2194 <gpio_nrfx_init+0x34>)
    2176:	4621      	mov	r1, r4
    2178:	f001 f970 	bl	345c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    217c:	4622      	mov	r2, r4
    217e:	2105      	movs	r1, #5
    2180:	2006      	movs	r0, #6
    2182:	f7ff fa3f 	bl	1604 <z_arm_irq_priority_set>
		return 0;
    2186:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2188:	bd10      	pop	{r4, pc}
		return -EIO;
    218a:	f06f 0004 	mvn.w	r0, #4
    218e:	e7fb      	b.n	2188 <gpio_nrfx_init+0x28>
    2190:	0bad0000 	.word	0x0bad0000
    2194:	00002199 	.word	0x00002199

00002198 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2198:	0943      	lsrs	r3, r0, #5
{
    219a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    219c:	d107      	bne.n	21ae <nrfx_gpio_handler+0x16>
	return list->head;
    219e:	4b0b      	ldr	r3, [pc, #44]	; (21cc <nrfx_gpio_handler+0x34>)
    21a0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    21a2:	b121      	cbz	r1, 21ae <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    21a4:	2501      	movs	r5, #1
	return node->next;
    21a6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    21a8:	4e09      	ldr	r6, [pc, #36]	; (21d0 <nrfx_gpio_handler+0x38>)
    21aa:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    21ac:	b901      	cbnz	r1, 21b0 <nrfx_gpio_handler+0x18>
}
    21ae:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    21b0:	688a      	ldr	r2, [r1, #8]
    21b2:	402a      	ands	r2, r5
    21b4:	d002      	beq.n	21bc <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    21b6:	684b      	ldr	r3, [r1, #4]
    21b8:	4630      	mov	r0, r6
    21ba:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    21bc:	b11c      	cbz	r4, 21c6 <nrfx_gpio_handler+0x2e>
    21be:	6823      	ldr	r3, [r4, #0]
    21c0:	4621      	mov	r1, r4
    21c2:	461c      	mov	r4, r3
    21c4:	e7f2      	b.n	21ac <nrfx_gpio_handler+0x14>
    21c6:	4623      	mov	r3, r4
    21c8:	e7fa      	b.n	21c0 <nrfx_gpio_handler+0x28>
    21ca:	bf00      	nop
    21cc:	20000288 	.word	0x20000288
    21d0:	000055b0 	.word	0x000055b0

000021d4 <gpio_nrfx_pin_configure>:
{
    21d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    21d8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    21da:	7b3b      	ldrb	r3, [r7, #12]
    21dc:	f001 051f 	and.w	r5, r1, #31
    21e0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    21e4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21e6:	4628      	mov	r0, r5
    21e8:	f10d 0103 	add.w	r1, sp, #3
{
    21ec:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21ee:	f001 f93b 	bl	3468 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    21f2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21f6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    21f8:	d10b      	bne.n	2212 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    21fa:	4628      	mov	r0, r5
    21fc:	f001 f9f4 	bl	35e8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2200:	4b3d      	ldr	r3, [pc, #244]	; (22f8 <gpio_nrfx_pin_configure+0x124>)
    2202:	4598      	cmp	r8, r3
    2204:	d103      	bne.n	220e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2206:	f89d 0003 	ldrb.w	r0, [sp, #3]
    220a:	f001 f975 	bl	34f8 <nrfx_gpiote_channel_free>
		return 0;
    220e:	2000      	movs	r0, #0
    2210:	e00c      	b.n	222c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2212:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2214:	4619      	mov	r1, r3
    2216:	aa02      	add	r2, sp, #8
    2218:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    221a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    221e:	f000 fff1 	bl	3204 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2222:	4b35      	ldr	r3, [pc, #212]	; (22f8 <gpio_nrfx_pin_configure+0x124>)
    2224:	4298      	cmp	r0, r3
    2226:	d004      	beq.n	2232 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2228:	f06f 0015 	mvn.w	r0, #21
}
    222c:	b004      	add	sp, #16
    222e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2232:	4580      	cmp	r8, r0
    2234:	d103      	bne.n	223e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2236:	f89d 0003 	ldrb.w	r0, [sp, #3]
    223a:	f001 f95d 	bl	34f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    223e:	03a3      	lsls	r3, r4, #14
    2240:	d54b      	bpl.n	22da <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2242:	f240 3306 	movw	r3, #774	; 0x306
    2246:	4023      	ands	r3, r4
    2248:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    224c:	d019      	beq.n	2282 <gpio_nrfx_pin_configure+0xae>
    224e:	d80c      	bhi.n	226a <gpio_nrfx_pin_configure+0x96>
    2250:	2b06      	cmp	r3, #6
    2252:	d017      	beq.n	2284 <gpio_nrfx_pin_configure+0xb0>
    2254:	d804      	bhi.n	2260 <gpio_nrfx_pin_configure+0x8c>
    2256:	b1ab      	cbz	r3, 2284 <gpio_nrfx_pin_configure+0xb0>
    2258:	2b02      	cmp	r3, #2
    225a:	d1e5      	bne.n	2228 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    225c:	2304      	movs	r3, #4
    225e:	e011      	b.n	2284 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2264:	d1e0      	bne.n	2228 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    2266:	2301      	movs	r3, #1
    2268:	e00c      	b.n	2284 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    226a:	f240 2202 	movw	r2, #514	; 0x202
    226e:	4293      	cmp	r3, r2
    2270:	d027      	beq.n	22c2 <gpio_nrfx_pin_configure+0xee>
    2272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2276:	d026      	beq.n	22c6 <gpio_nrfx_pin_configure+0xf2>
    2278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    227c:	d1d4      	bne.n	2228 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    227e:	2302      	movs	r3, #2
    2280:	e000      	b.n	2284 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2282:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2284:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2288:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    228c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2290:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2292:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    2296:	bf54      	ite	pl
    2298:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    229c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    229e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    22a0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    22a4:	d511      	bpl.n	22ca <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    22a6:	687a      	ldr	r2, [r7, #4]
    22a8:	2301      	movs	r3, #1
    22aa:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    22ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    22b0:	2200      	movs	r2, #0
    22b2:	a901      	add	r1, sp, #4
    22b4:	4628      	mov	r0, r5
    22b6:	f001 f853 	bl	3360 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    22ba:	4b0f      	ldr	r3, [pc, #60]	; (22f8 <gpio_nrfx_pin_configure+0x124>)
    22bc:	4298      	cmp	r0, r3
    22be:	d0a6      	beq.n	220e <gpio_nrfx_pin_configure+0x3a>
    22c0:	e7b2      	b.n	2228 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    22c2:	2305      	movs	r3, #5
    22c4:	e7de      	b.n	2284 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    22c6:	2303      	movs	r3, #3
    22c8:	e7dc      	b.n	2284 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    22ca:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    22cc:	bf41      	itttt	mi
    22ce:	2301      	movmi	r3, #1
    22d0:	687a      	ldrmi	r2, [r7, #4]
    22d2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    22d4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    22d8:	e7ea      	b.n	22b0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    22da:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    22dc:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    22e0:	bf54      	ite	pl
    22e2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    22e6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    22e8:	461a      	mov	r2, r3
    22ea:	a901      	add	r1, sp, #4
    22ec:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    22ee:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    22f2:	f000 ff87 	bl	3204 <nrfx_gpiote_input_configure>
    22f6:	e7e0      	b.n	22ba <gpio_nrfx_pin_configure+0xe6>
    22f8:	0bad0000 	.word	0x0bad0000

000022fc <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    22fc:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    22fe:	6843      	ldr	r3, [r0, #4]
    2300:	681b      	ldr	r3, [r3, #0]
NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
#else
    return p_reg->PSELSCL;
    2302:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
#else
    return p_reg->PSELSDA;
    2306:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    230a:	f001 fc8d 	bl	3c28 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    230e:	4b03      	ldr	r3, [pc, #12]	; (231c <i2c_nrfx_twi_recover_bus+0x20>)
    2310:	4298      	cmp	r0, r3
}
    2312:	bf14      	ite	ne
    2314:	f06f 000f 	mvnne.w	r0, #15
    2318:	2000      	moveq	r0, #0
    231a:	bd08      	pop	{r3, pc}
    231c:	0bad0000 	.word	0x0bad0000

00002320 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2320:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2322:	4604      	mov	r4, r0
    2324:	2200      	movs	r2, #0
    2326:	2101      	movs	r1, #1
    2328:	2003      	movs	r0, #3
    232a:	f7ff f96b 	bl	1604 <z_arm_irq_priority_set>
    232e:	6863      	ldr	r3, [r4, #4]
    2330:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2332:	aa01      	add	r2, sp, #4
    2334:	2100      	movs	r1, #0
    2336:	4628      	mov	r0, r5
    2338:	f002 fe7e 	bl	5038 <pinctrl_lookup_state>
	if (ret < 0) {
    233c:	2800      	cmp	r0, #0
    233e:	db14      	blt.n	236a <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2340:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2342:	682a      	ldr	r2, [r5, #0]
    2344:	7919      	ldrb	r1, [r3, #4]
    2346:	6818      	ldr	r0, [r3, #0]
    2348:	f002 fe89 	bl	505e <pinctrl_configure_pins>
    234c:	2800      	cmp	r0, #0
    234e:	db0c      	blt.n	236a <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    2350:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    2352:	6923      	ldr	r3, [r4, #16]
    2354:	4a06      	ldr	r2, [pc, #24]	; (2370 <twi_0_init+0x50>)
    2356:	f100 0108 	add.w	r1, r0, #8
    235a:	f001 fb0b 	bl	3974 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    235e:	4b05      	ldr	r3, [pc, #20]	; (2374 <twi_0_init+0x54>)
	return 0;
    2360:	4298      	cmp	r0, r3
    2362:	bf14      	ite	ne
    2364:	f06f 000f 	mvnne.w	r0, #15
    2368:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    236a:	b003      	add	sp, #12
    236c:	bd30      	pop	{r4, r5, pc}
    236e:	bf00      	nop
    2370:	00002379 	.word	0x00002379
    2374:	0bad0000 	.word	0x0bad0000

00002378 <event_handler>:
	switch (p_event->type) {
    2378:	7803      	ldrb	r3, [r0, #0]
    237a:	2b01      	cmp	r3, #1
    237c:	d008      	beq.n	2390 <event_handler+0x18>
    237e:	2b02      	cmp	r3, #2
    2380:	d008      	beq.n	2394 <event_handler+0x1c>
    2382:	b94b      	cbnz	r3, 2398 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2384:	4b05      	ldr	r3, [pc, #20]	; (239c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2386:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2388:	f101 0010 	add.w	r0, r1, #16
    238c:	f001 be62 	b.w	4054 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2390:	4b03      	ldr	r3, [pc, #12]	; (23a0 <event_handler+0x28>)
    2392:	e7f8      	b.n	2386 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2394:	4b03      	ldr	r3, [pc, #12]	; (23a4 <event_handler+0x2c>)
    2396:	e7f6      	b.n	2386 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2398:	4b03      	ldr	r3, [pc, #12]	; (23a8 <event_handler+0x30>)
    239a:	e7f4      	b.n	2386 <event_handler+0xe>
    239c:	0bad0000 	.word	0x0bad0000
    23a0:	0bae0001 	.word	0x0bae0001
    23a4:	0bae0002 	.word	0x0bae0002
    23a8:	0bad0001 	.word	0x0bad0001

000023ac <i2c_nrfx_twi_transfer>:
{
    23ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b0:	b08b      	sub	sp, #44	; 0x2c
    23b2:	4605      	mov	r5, r0
    23b4:	460c      	mov	r4, r1
    23b6:	4690      	mov	r8, r2
    23b8:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    23ba:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    23bc:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    23be:	f04f 32ff 	mov.w	r2, #4294967295
    23c2:	f04f 33ff 	mov.w	r3, #4294967295
    23c6:	4630      	mov	r0, r6
    23c8:	f001 fe64 	bl	4094 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    23cc:	f106 0a10 	add.w	sl, r6, #16
    23d0:	2200      	movs	r2, #0
    23d2:	2300      	movs	r3, #0
    23d4:	4650      	mov	r0, sl
    23d6:	f001 fe5d 	bl	4094 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    23da:	4638      	mov	r0, r7
    23dc:	f001 fb1e 	bl	3a1c <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    23e0:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 24a4 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
    23e4:	f04f 0900 	mov.w	r9, #0
    23e8:	45c1      	cmp	r9, r8
    23ea:	d301      	bcc.n	23f0 <i2c_nrfx_twi_transfer+0x44>
    23ec:	2400      	movs	r4, #0
    23ee:	e02e      	b.n	244e <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    23f0:	7a23      	ldrb	r3, [r4, #8]
    23f2:	9303      	str	r3, [sp, #12]
    23f4:	f013 0108 	ands.w	r1, r3, #8
    23f8:	d14d      	bne.n	2496 <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    23fa:	2212      	movs	r2, #18
    23fc:	f10d 0016 	add.w	r0, sp, #22
    2400:	9102      	str	r1, [sp, #8]
    2402:	f002 fc86 	bl	4d12 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2406:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2408:	6860      	ldr	r0, [r4, #4]
    240a:	9901      	ldr	r1, [sp, #4]
    240c:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    240e:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2412:	6820      	ldr	r0, [r4, #0]
    2414:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2418:	f013 0f02 	tst.w	r3, #2
    241c:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    241e:	f88d 2014 	strb.w	r2, [sp, #20]
    2422:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2424:	d11d      	bne.n	2462 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    2426:	f108 33ff 	add.w	r3, r8, #4294967295
    242a:	454b      	cmp	r3, r9
    242c:	d902      	bls.n	2434 <i2c_nrfx_twi_transfer+0x88>
    242e:	7d23      	ldrb	r3, [r4, #20]
    2430:	075b      	lsls	r3, r3, #29
    2432:	d518      	bpl.n	2466 <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2434:	bb7a      	cbnz	r2, 2496 <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2436:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    2438:	a905      	add	r1, sp, #20
    243a:	4638      	mov	r0, r7
    243c:	f001 fb1a 	bl	3a74 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2440:	4558      	cmp	r0, fp
    2442:	d012      	beq.n	246a <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    2444:	4b18      	ldr	r3, [pc, #96]	; (24a8 <i2c_nrfx_twi_transfer+0xfc>)
    2446:	4298      	cmp	r0, r3
    2448:	d028      	beq.n	249c <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    244a:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    244e:	4638      	mov	r0, r7
    2450:	f001 faf4 	bl	3a3c <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    2454:	4630      	mov	r0, r6
    2456:	f001 fdfd 	bl	4054 <z_impl_k_sem_give>
}
    245a:	4620      	mov	r0, r4
    245c:	b00b      	add	sp, #44	; 0x2c
    245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2462:	460a      	mov	r2, r1
    2464:	e7e8      	b.n	2438 <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2466:	2240      	movs	r2, #64	; 0x40
    2468:	e7e6      	b.n	2438 <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    246a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    246e:	2300      	movs	r3, #0
    2470:	4650      	mov	r0, sl
    2472:	f001 fe0f 	bl	4094 <z_impl_k_sem_take>
		if (ret != 0) {
    2476:	b130      	cbz	r0, 2486 <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    2478:	4638      	mov	r0, r7
    247a:	f001 fadf 	bl	3a3c <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    247e:	4628      	mov	r0, r5
    2480:	f7ff ff3c 	bl	22fc <i2c_nrfx_twi_recover_bus>
			break;
    2484:	e7e1      	b.n	244a <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    2486:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2488:	455b      	cmp	r3, fp
    248a:	f104 040c 	add.w	r4, r4, #12
    248e:	d1dc      	bne.n	244a <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    2490:	f109 0901 	add.w	r9, r9, #1
    2494:	e7a8      	b.n	23e8 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    2496:	f06f 0485 	mvn.w	r4, #133	; 0x85
    249a:	e7d8      	b.n	244e <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    249c:	f06f 040f 	mvn.w	r4, #15
    24a0:	e7d5      	b.n	244e <i2c_nrfx_twi_transfer+0xa2>
    24a2:	bf00      	nop
    24a4:	0bad0000 	.word	0x0bad0000
    24a8:	0bad000b 	.word	0x0bad000b

000024ac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    24ac:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    24ae:	794b      	ldrb	r3, [r1, #5]
    24b0:	2b01      	cmp	r3, #1
    24b2:	d120      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    24b4:	798b      	ldrb	r3, [r1, #6]
    24b6:	2b03      	cmp	r3, #3
    24b8:	d11d      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    24ba:	79cd      	ldrb	r5, [r1, #7]
    24bc:	b10d      	cbz	r5, 24c2 <uarte_nrfx_configure+0x16>
    24be:	2d01      	cmp	r5, #1
    24c0:	d119      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    24c2:	790a      	ldrb	r2, [r1, #4]
    24c4:	b112      	cbz	r2, 24cc <uarte_nrfx_configure+0x20>
    24c6:	2a02      	cmp	r2, #2
    24c8:	d115      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
    24ca:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    24cc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    24ce:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    24d0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    24d4:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    24d6:	d064      	beq.n	25a2 <uarte_nrfx_configure+0xf6>
    24d8:	d82b      	bhi.n	2532 <uarte_nrfx_configure+0x86>
    24da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    24de:	d063      	beq.n	25a8 <uarte_nrfx_configure+0xfc>
    24e0:	d814      	bhi.n	250c <uarte_nrfx_configure+0x60>
    24e2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    24e6:	d061      	beq.n	25ac <uarte_nrfx_configure+0x100>
    24e8:	d808      	bhi.n	24fc <uarte_nrfx_configure+0x50>
    24ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    24ee:	d060      	beq.n	25b2 <uarte_nrfx_configure+0x106>
    24f0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    24f4:	d060      	beq.n	25b8 <uarte_nrfx_configure+0x10c>
    24f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    24fa:	e051      	b.n	25a0 <uarte_nrfx_configure+0xf4>
    24fc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2500:	d05d      	beq.n	25be <uarte_nrfx_configure+0x112>
    2502:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2506:	d1f6      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2508:	4b37      	ldr	r3, [pc, #220]	; (25e8 <uarte_nrfx_configure+0x13c>)
    250a:	e03c      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    250c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2510:	d058      	beq.n	25c4 <uarte_nrfx_configure+0x118>
    2512:	d807      	bhi.n	2524 <uarte_nrfx_configure+0x78>
    2514:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2518:	d056      	beq.n	25c8 <uarte_nrfx_configure+0x11c>
    251a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    251e:	d1ea      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2520:	4b32      	ldr	r3, [pc, #200]	; (25ec <uarte_nrfx_configure+0x140>)
    2522:	e030      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2524:	f647 2412 	movw	r4, #31250	; 0x7a12
    2528:	42a3      	cmp	r3, r4
    252a:	d1e4      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    252c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2530:	e029      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2532:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2536:	d049      	beq.n	25cc <uarte_nrfx_configure+0x120>
    2538:	d813      	bhi.n	2562 <uarte_nrfx_configure+0xb6>
    253a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    253e:	d048      	beq.n	25d2 <uarte_nrfx_configure+0x126>
    2540:	d809      	bhi.n	2556 <uarte_nrfx_configure+0xaa>
    2542:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2546:	42a3      	cmp	r3, r4
    2548:	d045      	beq.n	25d6 <uarte_nrfx_configure+0x12a>
    254a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    254e:	d1d2      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2550:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2554:	e017      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2556:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    255a:	d1cc      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    255c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2560:	e011      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2562:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2566:	d039      	beq.n	25dc <uarte_nrfx_configure+0x130>
    2568:	d808      	bhi.n	257c <uarte_nrfx_configure+0xd0>
    256a:	4c21      	ldr	r4, [pc, #132]	; (25f0 <uarte_nrfx_configure+0x144>)
    256c:	42a3      	cmp	r3, r4
    256e:	d038      	beq.n	25e2 <uarte_nrfx_configure+0x136>
    2570:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2574:	d1bf      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2576:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    257a:	e004      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    257c:	4c1d      	ldr	r4, [pc, #116]	; (25f4 <uarte_nrfx_configure+0x148>)
    257e:	42a3      	cmp	r3, r4
    2580:	d1b9      	bne.n	24f6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2586:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2588:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    258c:	6843      	ldr	r3, [r0, #4]
    258e:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    2590:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2592:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2596:	c903      	ldmia	r1, {r0, r1}
    2598:	1d23      	adds	r3, r4, #4
    259a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    259e:	2000      	movs	r0, #0
}
    25a0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    25a2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    25a6:	e7ee      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    25a8:	4b13      	ldr	r3, [pc, #76]	; (25f8 <uarte_nrfx_configure+0x14c>)
    25aa:	e7ec      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    25ac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    25b0:	e7e9      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    25b2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    25b6:	e7e6      	b.n	2586 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    25b8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    25bc:	e7e3      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    25be:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    25c2:	e7e0      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    25c4:	4b0d      	ldr	r3, [pc, #52]	; (25fc <uarte_nrfx_configure+0x150>)
    25c6:	e7de      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    25c8:	4b0d      	ldr	r3, [pc, #52]	; (2600 <uarte_nrfx_configure+0x154>)
    25ca:	e7dc      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    25cc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    25d0:	e7d9      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    25d2:	4b0c      	ldr	r3, [pc, #48]	; (2604 <uarte_nrfx_configure+0x158>)
    25d4:	e7d7      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    25d6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    25da:	e7d4      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    25dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    25e0:	e7d1      	b.n	2586 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    25e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    25e6:	e7ce      	b.n	2586 <uarte_nrfx_configure+0xda>
    25e8:	0013b000 	.word	0x0013b000
    25ec:	004ea000 	.word	0x004ea000
    25f0:	0003d090 	.word	0x0003d090
    25f4:	000f4240 	.word	0x000f4240
    25f8:	00275000 	.word	0x00275000
    25fc:	0075c000 	.word	0x0075c000
    2600:	003af000 	.word	0x003af000
    2604:	013a9000 	.word	0x013a9000

00002608 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    260c:	4680      	mov	r8, r0
    260e:	2200      	movs	r2, #0
    2610:	2101      	movs	r1, #1
    2612:	2002      	movs	r0, #2
    2614:	f7fe fff6 	bl	1604 <z_arm_irq_priority_set>
    2618:	2002      	movs	r0, #2
    261a:	f7fe ffd7 	bl	15cc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    261e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    2622:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2626:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2628:	2100      	movs	r1, #0
    262a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    262e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2632:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    2636:	aa01      	add	r2, sp, #4
    2638:	4648      	mov	r0, r9
    263a:	f002 fcfd 	bl	5038 <pinctrl_lookup_state>
	if (ret < 0) {
    263e:	1e05      	subs	r5, r0, #0
    2640:	db54      	blt.n	26ec <uarte_0_init+0xe4>
	return pinctrl_apply_state_direct(config, state);
    2642:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2644:	f8d9 2000 	ldr.w	r2, [r9]
    2648:	7919      	ldrb	r1, [r3, #4]
    264a:	6818      	ldr	r0, [r3, #0]
    264c:	f002 fd07 	bl	505e <pinctrl_configure_pins>
	if (err < 0) {
    2650:	1e05      	subs	r5, r0, #0
    2652:	db4b      	blt.n	26ec <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2654:	1d31      	adds	r1, r6, #4
    2656:	4640      	mov	r0, r8
    2658:	f7ff ff28 	bl	24ac <uarte_nrfx_configure>
	if (err) {
    265c:	4605      	mov	r5, r0
    265e:	2800      	cmp	r0, #0
    2660:	d144      	bne.n	26ec <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2662:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2664:	0799      	lsls	r1, r3, #30
    2666:	d51a      	bpl.n	269e <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2668:	f106 0018 	add.w	r0, r6, #24
    266c:	f001 f888 	bl	3780 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2670:	4b22      	ldr	r3, [pc, #136]	; (26fc <uarte_0_init+0xf4>)
    2672:	4298      	cmp	r0, r3
    2674:	d13e      	bne.n	26f4 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2676:	7e33      	ldrb	r3, [r6, #24]
    2678:	00db      	lsls	r3, r3, #3
    267a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    267e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2682:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2686:	f504 7190 	add.w	r1, r4, #288	; 0x120
    268a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    268e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2692:	7e32      	ldrb	r2, [r6, #24]
    2694:	2301      	movs	r3, #1
    2696:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    2698:	4a19      	ldr	r2, [pc, #100]	; (2700 <uarte_0_init+0xf8>)
    269a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    269e:	2308      	movs	r3, #8
    26a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    26a4:	7a3b      	ldrb	r3, [r7, #8]
    26a6:	b953      	cbnz	r3, 26be <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    26ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    26b0:	6973      	ldr	r3, [r6, #20]
    26b2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    26b6:	2301      	movs	r3, #1
    26b8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26bc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    26c2:	bf5c      	itt	pl
    26c4:	f44f 7380 	movpl.w	r3, #256	; 0x100
    26c8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	06db      	lsls	r3, r3, #27
    26d0:	bf44      	itt	mi
    26d2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    26d6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    26da:	6933      	ldr	r3, [r6, #16]
    26dc:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    26e0:	2300      	movs	r3, #0
    26e2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26e6:	2301      	movs	r3, #1
    26e8:	60a3      	str	r3, [r4, #8]
    26ea:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    26ec:	4628      	mov	r0, r5
    26ee:	b003      	add	sp, #12
    26f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    26f4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    26f8:	e7f8      	b.n	26ec <uarte_0_init+0xe4>
    26fa:	bf00      	nop
    26fc:	0bad0000 	.word	0x0bad0000
    2700:	4001f000 	.word	0x4001f000

00002704 <uarte_nrfx_poll_out>:
{
    2704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2706:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    2708:	6907      	ldr	r7, [r0, #16]
{
    270a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    270c:	f002 fe2a 	bl	5364 <k_is_in_isr>
    2710:	b9b0      	cbnz	r0, 2740 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2712:	4b2e      	ldr	r3, [pc, #184]	; (27cc <uarte_nrfx_poll_out+0xc8>)
    2714:	781b      	ldrb	r3, [r3, #0]
    2716:	b19b      	cbz	r3, 2740 <uarte_nrfx_poll_out+0x3c>
{
    2718:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    271a:	6860      	ldr	r0, [r4, #4]
    271c:	f002 fc36 	bl	4f8c <is_tx_ready.isra.0>
    2720:	bb00      	cbnz	r0, 2764 <uarte_nrfx_poll_out+0x60>
    2722:	2001      	movs	r0, #1
    2724:	f002 fd35 	bl	5192 <nrfx_busy_wait>
    2728:	3e01      	subs	r6, #1
    272a:	d1f6      	bne.n	271a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    272c:	2100      	movs	r1, #0
    272e:	2021      	movs	r0, #33	; 0x21
    2730:	f001 ff5a 	bl	45e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2734:	e7f0      	b.n	2718 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2736:	f386 8811 	msr	BASEPRI, r6
    273a:	f3bf 8f6f 	isb	sy
}
    273e:	e7f5      	b.n	272c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2740:	f04f 0320 	mov.w	r3, #32
    2744:	f3ef 8611 	mrs	r6, BASEPRI
    2748:	f383 8812 	msr	BASEPRI_MAX, r3
    274c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2750:	6860      	ldr	r0, [r4, #4]
    2752:	4631      	mov	r1, r6
    2754:	f002 fc1a 	bl	4f8c <is_tx_ready.isra.0>
    2758:	b990      	cbnz	r0, 2780 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    275a:	f386 8811 	msr	BASEPRI, r6
    275e:	f3bf 8f6f 	isb	sy
}
    2762:	e7ed      	b.n	2740 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2764:	f04f 0320 	mov.w	r3, #32
    2768:	f3ef 8611 	mrs	r6, BASEPRI
    276c:	f383 8812 	msr	BASEPRI_MAX, r3
    2770:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2774:	6860      	ldr	r0, [r4, #4]
    2776:	4631      	mov	r1, r6
    2778:	f002 fc08 	bl	4f8c <is_tx_ready.isra.0>
    277c:	2800      	cmp	r0, #0
    277e:	d0da      	beq.n	2736 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2780:	693b      	ldr	r3, [r7, #16]
    2782:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2784:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2786:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2788:	6813      	ldr	r3, [r2, #0]
    278a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    278e:	2001      	movs	r0, #1
    2790:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2794:	2000      	movs	r0, #0
    2796:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    279a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    279e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    27a2:	6852      	ldr	r2, [r2, #4]
    27a4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    27a8:	06d2      	lsls	r2, r2, #27
    27aa:	d508      	bpl.n	27be <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    27ac:	6862      	ldr	r2, [r4, #4]
    27ae:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    27b0:	2008      	movs	r0, #8
    27b2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    27b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    27ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27be:	2201      	movs	r2, #1
    27c0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    27c2:	f381 8811 	msr	BASEPRI, r1
    27c6:	f3bf 8f6f 	isb	sy
}
    27ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27cc:	200007d8 	.word	0x200007d8

000027d0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    27d0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    27d2:	2301      	movs	r3, #1
    27d4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27d6:	4a0e      	ldr	r2, [pc, #56]	; (2810 <compare_int_lock+0x40>)
    27d8:	f3bf 8f5b 	dmb	ish
    27dc:	43dc      	mvns	r4, r3
    27de:	e852 1f00 	ldrex	r1, [r2]
    27e2:	ea01 0504 	and.w	r5, r1, r4
    27e6:	e842 5600 	strex	r6, r5, [r2]
    27ea:	2e00      	cmp	r6, #0
    27ec:	d1f7      	bne.n	27de <compare_int_lock+0xe>
    27ee:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    27f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    27f6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    27f8:	4806      	ldr	r0, [pc, #24]	; (2814 <compare_int_lock+0x44>)
    27fa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    27fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2802:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2806:	420b      	tst	r3, r1
}
    2808:	bf14      	ite	ne
    280a:	2001      	movne	r0, #1
    280c:	2000      	moveq	r0, #0
    280e:	bd70      	pop	{r4, r5, r6, pc}
    2810:	20000298 	.word	0x20000298
    2814:	40011000 	.word	0x40011000

00002818 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2818:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    281a:	490e      	ldr	r1, [pc, #56]	; (2854 <sys_clock_timeout_handler+0x3c>)
    281c:	e9d1 3400 	ldrd	r3, r4, [r1]
    2820:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    2822:	18c3      	adds	r3, r0, r3
    2824:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    2828:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    282c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2830:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2834:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2838:	d209      	bcs.n	284e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    283a:	4b07      	ldr	r3, [pc, #28]	; (2858 <sys_clock_timeout_handler+0x40>)
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	0a1a      	lsrs	r2, r3, #8
    2840:	061b      	lsls	r3, r3, #24
    2842:	199c      	adds	r4, r3, r6
    2844:	4b05      	ldr	r3, [pc, #20]	; (285c <sys_clock_timeout_handler+0x44>)
    2846:	f142 0500 	adc.w	r5, r2, #0
    284a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    284e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2850:	f002 b830 	b.w	48b4 <sys_clock_announce>
    2854:	200000d8 	.word	0x200000d8
    2858:	2000029c 	.word	0x2000029c
    285c:	200000e0 	.word	0x200000e0

00002860 <compare_int_unlock>:
	if (key) {
    2860:	b311      	cbz	r1, 28a8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2862:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2866:	2301      	movs	r3, #1
    2868:	4a10      	ldr	r2, [pc, #64]	; (28ac <compare_int_unlock+0x4c>)
    286a:	4083      	lsls	r3, r0
    286c:	e852 cf00 	ldrex	ip, [r2]
    2870:	ea4c 0c03 	orr.w	ip, ip, r3
    2874:	e842 c100 	strex	r1, ip, [r2]
    2878:	2900      	cmp	r1, #0
    287a:	d1f7      	bne.n	286c <compare_int_unlock+0xc>
    287c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2880:	4a0b      	ldr	r2, [pc, #44]	; (28b0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2886:	4083      	lsls	r3, r0
    2888:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    288c:	4b09      	ldr	r3, [pc, #36]	; (28b4 <compare_int_unlock+0x54>)
    288e:	f3bf 8f5b 	dmb	ish
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2898:	40c3      	lsrs	r3, r0
    289a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    289c:	bf42      	ittt	mi
    289e:	4b06      	ldrmi	r3, [pc, #24]	; (28b8 <compare_int_unlock+0x58>)
    28a0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    28a4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    28a8:	4770      	bx	lr
    28aa:	bf00      	nop
    28ac:	20000298 	.word	0x20000298
    28b0:	40011000 	.word	0x40011000
    28b4:	20000294 	.word	0x20000294
    28b8:	e000e100 	.word	0xe000e100

000028bc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    28bc:	4b0d      	ldr	r3, [pc, #52]	; (28f4 <z_nrf_rtc_timer_read+0x38>)
    28be:	6818      	ldr	r0, [r3, #0]
    28c0:	0a01      	lsrs	r1, r0, #8
    28c2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    28c4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    28c8:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <z_nrf_rtc_timer_read+0x3c>)
    28ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    28ce:	1818      	adds	r0, r3, r0
    28d0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    28d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    28d8:	d20a      	bcs.n	28f0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    28da:	4b08      	ldr	r3, [pc, #32]	; (28fc <z_nrf_rtc_timer_read+0x40>)
    28dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    28e0:	4290      	cmp	r0, r2
    28e2:	eb71 0303 	sbcs.w	r3, r1, r3
    28e6:	d203      	bcs.n	28f0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    28e8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    28ec:	f141 0100 	adc.w	r1, r1, #0
}
    28f0:	4770      	bx	lr
    28f2:	bf00      	nop
    28f4:	2000029c 	.word	0x2000029c
    28f8:	40011000 	.word	0x40011000
    28fc:	200000e0 	.word	0x200000e0

00002900 <compare_set>:
{
    2900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2904:	4616      	mov	r6, r2
    2906:	461f      	mov	r7, r3
    2908:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    290a:	f7ff ff61 	bl	27d0 <compare_int_lock>
    290e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2910:	f7ff ffd4 	bl	28bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2914:	42b0      	cmp	r0, r6
    2916:	eb71 0307 	sbcs.w	r3, r1, r7
    291a:	d251      	bcs.n	29c0 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    291c:	4b3a      	ldr	r3, [pc, #232]	; (2a08 <compare_set+0x108>)
    291e:	1a30      	subs	r0, r6, r0
    2920:	eb67 0101 	sbc.w	r1, r7, r1
    2924:	4298      	cmp	r0, r3
    2926:	f171 0100 	sbcs.w	r1, r1, #0
    292a:	d26a      	bcs.n	2a02 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    292c:	4b37      	ldr	r3, [pc, #220]	; (2a0c <compare_set+0x10c>)
    292e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2932:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2936:	429f      	cmp	r7, r3
    2938:	bf08      	it	eq
    293a:	4296      	cmpeq	r6, r2
    293c:	d04e      	beq.n	29dc <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    293e:	4934      	ldr	r1, [pc, #208]	; (2a10 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2940:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2944:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2948:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    294c:	00ad      	lsls	r5, r5, #2
    294e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    2952:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2954:	b2ad      	uxth	r5, r5
    2956:	f002 fb63 	bl	5020 <event_clear>
	return absolute_time & COUNTER_MAX;
    295a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    295e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    2962:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2966:	4a2b      	ldr	r2, [pc, #172]	; (2a14 <compare_set+0x114>)
    2968:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    296a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    296e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2970:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    2974:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2976:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    297a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    297e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2982:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2986:	f06f 0002 	mvn.w	r0, #2
    298a:	eba0 0008 	sub.w	r0, r0, r8
    298e:	4460      	add	r0, ip
    2990:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2994:	4290      	cmp	r0, r2
    2996:	d921      	bls.n	29dc <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2998:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    299a:	b160      	cbz	r0, 29b6 <compare_set+0xb6>
     return p_reg->COUNTER;
    299c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29a0:	eba8 000b 	sub.w	r0, r8, fp
    29a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    29a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29ac:	d916      	bls.n	29dc <compare_set+0xdc>
					event_clear(chan);
    29ae:	4620      	mov	r0, r4
    29b0:	f002 fb36 	bl	5020 <event_clear>
    29b4:	4a17      	ldr	r2, [pc, #92]	; (2a14 <compare_set+0x114>)
			cc_val = now + cc_inc;
    29b6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    29ba:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    29be:	e7d9      	b.n	2974 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    29c0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29c2:	4a15      	ldr	r2, [pc, #84]	; (2a18 <compare_set+0x118>)
    29c4:	f3bf 8f5b 	dmb	ish
    29c8:	40a3      	lsls	r3, r4
    29ca:	e852 0f00 	ldrex	r0, [r2]
    29ce:	4318      	orrs	r0, r3
    29d0:	e842 0100 	strex	r1, r0, [r2]
    29d4:	2900      	cmp	r1, #0
    29d6:	d1f8      	bne.n	29ca <compare_set+0xca>
    29d8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    29dc:	490b      	ldr	r1, [pc, #44]	; (2a0c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    29de:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    29e0:	0123      	lsls	r3, r4, #4
    29e2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    29e6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    29ea:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    29ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    29ee:	6053      	str	r3, [r2, #4]
	return ret;
    29f0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    29f2:	4620      	mov	r0, r4
    29f4:	9900      	ldr	r1, [sp, #0]
    29f6:	f7ff ff33 	bl	2860 <compare_int_unlock>
}
    29fa:	4628      	mov	r0, r5
    29fc:	b003      	add	sp, #12
    29fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2a02:	f06f 0515 	mvn.w	r5, #21
    2a06:	e7f4      	b.n	29f2 <compare_set+0xf2>
    2a08:	00800001 	.word	0x00800001
    2a0c:	200000c8 	.word	0x200000c8
    2a10:	40011000 	.word	0x40011000
    2a14:	007ffffd 	.word	0x007ffffd
    2a18:	20000294 	.word	0x20000294

00002a1c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a1e:	4b19      	ldr	r3, [pc, #100]	; (2a84 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2a20:	4d19      	ldr	r5, [pc, #100]	; (2a88 <sys_clock_driver_init+0x6c>)
    2a22:	2400      	movs	r4, #0
    2a24:	f04f 30ff 	mov.w	r0, #4294967295
    2a28:	f04f 31ff 	mov.w	r1, #4294967295
    2a2c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2a30:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a38:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a3c:	4b13      	ldr	r3, [pc, #76]	; (2a8c <sys_clock_driver_init+0x70>)
    2a3e:	2602      	movs	r6, #2
    2a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a44:	2101      	movs	r1, #1
    2a46:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2a4a:	2011      	movs	r0, #17
    2a4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a50:	4622      	mov	r2, r4
    2a52:	f7fe fdd7 	bl	1604 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2a56:	2011      	movs	r0, #17
    2a58:	f7fe fdb8 	bl	15cc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2a5c:	4a0c      	ldr	r2, [pc, #48]	; (2a90 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a5e:	2301      	movs	r3, #1
    2a60:	60ab      	str	r3, [r5, #8]
    2a62:	602b      	str	r3, [r5, #0]
    2a64:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2a66:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <sys_clock_driver_init+0x78>)
    2a68:	4a0b      	ldr	r2, [pc, #44]	; (2a98 <sys_clock_driver_init+0x7c>)
    2a6a:	9300      	str	r3, [sp, #0]
    2a6c:	9401      	str	r4, [sp, #4]
    2a6e:	2300      	movs	r3, #0
    2a70:	4620      	mov	r0, r4
    2a72:	f7ff ff45 	bl	2900 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2a76:	4630      	mov	r0, r6
    2a78:	f7ff fa68 	bl	1f4c <z_nrf_clock_control_lf_on>

	return 0;
}
    2a7c:	4620      	mov	r0, r4
    2a7e:	b002      	add	sp, #8
    2a80:	bd70      	pop	{r4, r5, r6, pc}
    2a82:	bf00      	nop
    2a84:	200000c8 	.word	0x200000c8
    2a88:	40011000 	.word	0x40011000
    2a8c:	e000e100 	.word	0xe000e100
    2a90:	20000298 	.word	0x20000298
    2a94:	00002819 	.word	0x00002819
    2a98:	007fffff 	.word	0x007fffff

00002a9c <rtc_nrf_isr>:
{
    2a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2aa0:	4c2f      	ldr	r4, [pc, #188]	; (2b60 <rtc_nrf_isr+0xc4>)
    2aa2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2aa6:	0799      	lsls	r1, r3, #30
    2aa8:	d50b      	bpl.n	2ac2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2aaa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2aae:	b143      	cbz	r3, 2ac2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2ab0:	4a2c      	ldr	r2, [pc, #176]	; (2b64 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2ab2:	2300      	movs	r3, #0
    2ab4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2ab8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2abc:	6813      	ldr	r3, [r2, #0]
    2abe:	3301      	adds	r3, #1
    2ac0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2ac2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2ac6:	03da      	lsls	r2, r3, #15
    2ac8:	d52a      	bpl.n	2b20 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2aca:	f3bf 8f5b 	dmb	ish
    2ace:	4b26      	ldr	r3, [pc, #152]	; (2b68 <rtc_nrf_isr+0xcc>)
    2ad0:	e853 2f00 	ldrex	r2, [r3]
    2ad4:	f022 0101 	bic.w	r1, r2, #1
    2ad8:	e843 1000 	strex	r0, r1, [r3]
    2adc:	2800      	cmp	r0, #0
    2ade:	d1f7      	bne.n	2ad0 <rtc_nrf_isr+0x34>
    2ae0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2ae4:	07d3      	lsls	r3, r2, #31
    2ae6:	d402      	bmi.n	2aee <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ae8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2aec:	b1c3      	cbz	r3, 2b20 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2aee:	2500      	movs	r5, #0
    2af0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2af4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2af8:	f7ff fee0 	bl	28bc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2afc:	f04f 0320 	mov.w	r3, #32
    2b00:	f3ef 8211 	mrs	r2, BASEPRI
    2b04:	f383 8812 	msr	BASEPRI_MAX, r3
    2b08:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b0c:	4b17      	ldr	r3, [pc, #92]	; (2b6c <rtc_nrf_isr+0xd0>)
    2b0e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2b12:	42b0      	cmp	r0, r6
    2b14:	41b9      	sbcs	r1, r7
    2b16:	d206      	bcs.n	2b26 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    2b18:	f382 8811 	msr	BASEPRI, r2
    2b1c:	f3bf 8f6f 	isb	sy
}
    2b20:	b003      	add	sp, #12
    2b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b26:	f04f 38ff 	mov.w	r8, #4294967295
    2b2a:	f04f 39ff 	mov.w	r9, #4294967295
    2b2e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    2b32:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    2b36:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    2b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b3c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b40:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2b48:	f382 8811 	msr	BASEPRI, r2
    2b4c:	f3bf 8f6f 	isb	sy
		if (handler) {
    2b50:	2900      	cmp	r1, #0
    2b52:	d0e5      	beq.n	2b20 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    2b54:	9000      	str	r0, [sp, #0]
    2b56:	4632      	mov	r2, r6
    2b58:	463b      	mov	r3, r7
    2b5a:	4628      	mov	r0, r5
    2b5c:	4788      	blx	r1
    2b5e:	e7df      	b.n	2b20 <rtc_nrf_isr+0x84>
    2b60:	40011000 	.word	0x40011000
    2b64:	2000029c 	.word	0x2000029c
    2b68:	20000294 	.word	0x20000294
    2b6c:	200000c8 	.word	0x200000c8

00002b70 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2b70:	1c43      	adds	r3, r0, #1
{
    2b72:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2b74:	d022      	beq.n	2bbc <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2b76:	2801      	cmp	r0, #1
    2b78:	dd22      	ble.n	2bc0 <sys_clock_set_timeout+0x50>
    2b7a:	4a12      	ldr	r2, [pc, #72]	; (2bc4 <sys_clock_set_timeout+0x54>)
    2b7c:	4b12      	ldr	r3, [pc, #72]	; (2bc8 <sys_clock_set_timeout+0x58>)
    2b7e:	4290      	cmp	r0, r2
    2b80:	bfd4      	ite	le
    2b82:	4604      	movle	r4, r0
    2b84:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b86:	f7ff fe99 	bl	28bc <z_nrf_rtc_timer_read>
    2b8a:	4b10      	ldr	r3, [pc, #64]	; (2bcc <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2b8c:	490e      	ldr	r1, [pc, #56]	; (2bc8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b92:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2b94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b98:	bf28      	it	cs
    2b9a:	2400      	movcs	r4, #0
	cyc += unannounced;
    2b9c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2b9e:	428c      	cmp	r4, r1
    2ba0:	bf28      	it	cs
    2ba2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2ba4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2ba6:	490a      	ldr	r1, [pc, #40]	; (2bd0 <sys_clock_set_timeout+0x60>)
    2ba8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    2baa:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2bae:	9001      	str	r0, [sp, #4]
    2bb0:	f143 0300 	adc.w	r3, r3, #0
    2bb4:	f7ff fea4 	bl	2900 <compare_set>
}
    2bb8:	b002      	add	sp, #8
    2bba:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2bbc:	4c02      	ldr	r4, [pc, #8]	; (2bc8 <sys_clock_set_timeout+0x58>)
    2bbe:	e7e2      	b.n	2b86 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2bc0:	2401      	movs	r4, #1
    2bc2:	e7e0      	b.n	2b86 <sys_clock_set_timeout+0x16>
    2bc4:	007ffffe 	.word	0x007ffffe
    2bc8:	007fffff 	.word	0x007fffff
    2bcc:	200000d8 	.word	0x200000d8
    2bd0:	00002819 	.word	0x00002819

00002bd4 <sys_clock_elapsed>:
{
    2bd4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2bd6:	f7ff fe71 	bl	28bc <z_nrf_rtc_timer_read>
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <sys_clock_elapsed+0x10>)
    2bdc:	681b      	ldr	r3, [r3, #0]
}
    2bde:	1ac0      	subs	r0, r0, r3
    2be0:	bd08      	pop	{r3, pc}
    2be2:	bf00      	nop
    2be4:	200000d8 	.word	0x200000d8

00002be8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2be8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2bec:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2bf0:	2a06      	cmp	r2, #6
    2bf2:	d109      	bne.n	2c08 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2bf4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    2bf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2bfc:	3b03      	subs	r3, #3
    2bfe:	2b04      	cmp	r3, #4
    2c00:	d802      	bhi.n	2c08 <nrf52_errata_16+0x20>
    2c02:	4a02      	ldr	r2, [pc, #8]	; (2c0c <nrf52_errata_16+0x24>)
    2c04:	5cd0      	ldrb	r0, [r2, r3]
    2c06:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    2c08:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    2c0a:	4770      	bx	lr
    2c0c:	00005a13 	.word	0x00005a13

00002c10 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2c10:	4a02      	ldr	r2, [pc, #8]	; (2c1c <nvmc_wait+0xc>)
    2c12:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2c16:	2b00      	cmp	r3, #0
    2c18:	d0fb      	beq.n	2c12 <nvmc_wait+0x2>
}
    2c1a:	4770      	bx	lr
    2c1c:	4001e000 	.word	0x4001e000

00002c20 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2c20:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2c22:	f002 faa7 	bl	5174 <nrf52_errata_108>
    2c26:	b140      	cbz	r0, 2c3a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2c2c:	4a90      	ldr	r2, [pc, #576]	; (2e70 <SystemInit+0x250>)
    2c2e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    2c32:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2c36:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2c3a:	f7ff ffd5 	bl	2be8 <nrf52_errata_16>
    2c3e:	b110      	cbz	r0, 2c46 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2c40:	4b8c      	ldr	r3, [pc, #560]	; (2e74 <SystemInit+0x254>)
    2c42:	4a8d      	ldr	r2, [pc, #564]	; (2e78 <SystemInit+0x258>)
    2c44:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2c46:	f002 fa95 	bl	5174 <nrf52_errata_108>
    2c4a:	b148      	cbz	r0, 2c60 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c54:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2c58:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2c5c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2c60:	f7ff ffc2 	bl	2be8 <nrf52_errata_16>
    2c64:	b130      	cbz	r0, 2c74 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2c66:	4a85      	ldr	r2, [pc, #532]	; (2e7c <SystemInit+0x25c>)
    2c68:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2c70:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2c74:	f002 fa7e 	bl	5174 <nrf52_errata_108>
    2c78:	b140      	cbz	r0, 2c8c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c7e:	2200      	movs	r2, #0
    2c80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2c84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2c88:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2c8c:	f7ff ffac 	bl	2be8 <nrf52_errata_16>
    2c90:	b120      	cbz	r0, 2c9c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c96:	2203      	movs	r2, #3
    2c98:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2c9c:	f7ff ffa4 	bl	2be8 <nrf52_errata_16>
    2ca0:	b160      	cbz	r0, 2cbc <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2ca2:	4b77      	ldr	r3, [pc, #476]	; (2e80 <SystemInit+0x260>)
    2ca4:	2205      	movs	r2, #5
    2ca6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2caa:	2201      	movs	r2, #1
    2cac:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2cb0:	2200      	movs	r2, #0
    2cb2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2cb6:	223f      	movs	r2, #63	; 0x3f
    2cb8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2cc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2cc4:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2cc6:	bf09      	itett	eq
    2cc8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2ccc:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2cd0:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2cd4:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2cd8:	bf08      	it	eq
    2cda:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2cde:	2a06      	cmp	r2, #6
    2ce0:	d14d      	bne.n	2d7e <SystemInit+0x15e>
            {
                switch(var2)
    2ce2:	3b03      	subs	r3, #3
    2ce4:	2b04      	cmp	r3, #4
    2ce6:	d803      	bhi.n	2cf0 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2ce8:	4a66      	ldr	r2, [pc, #408]	; (2e84 <SystemInit+0x264>)
    2cea:	5cd3      	ldrb	r3, [r2, r3]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d046      	beq.n	2d7e <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2cf4:	4b64      	ldr	r3, [pc, #400]	; (2e88 <SystemInit+0x268>)
    2cf6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2cfa:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2cfe:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2d02:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2d06:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2d0a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2d0e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2d12:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2d16:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2d1a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2d1e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2d22:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2d26:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2d2a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2d2e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2d32:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2d36:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2d3a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2d3e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2d42:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2d46:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2d4a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2d4e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2d52:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2d56:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2d5a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2d5e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2d62:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2d66:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2d6a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2d6e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2d72:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2d76:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2d7a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2d7e:	f002 f9f9 	bl	5174 <nrf52_errata_108>
    2d82:	b148      	cbz	r0, 2d98 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d8c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2d90:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2d94:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2d98:	f002 f9ec 	bl	5174 <nrf52_errata_108>
    2d9c:	b148      	cbz	r0, 2db2 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2da2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2da6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2da8:	bf44      	itt	mi
    2daa:	f06f 0201 	mvnmi.w	r2, #1
    2dae:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2db6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2dba:	2a06      	cmp	r2, #6
    2dbc:	d126      	bne.n	2e0c <SystemInit+0x1ec>
            {
                switch(var2)
    2dbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2dc2:	3b03      	subs	r3, #3
    2dc4:	2b04      	cmp	r3, #4
    2dc6:	d802      	bhi.n	2dce <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2dc8:	4a30      	ldr	r2, [pc, #192]	; (2e8c <SystemInit+0x26c>)
    2dca:	5cd3      	ldrb	r3, [r2, r3]
    2dcc:	b163      	cbz	r3, 2de8 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2dce:	4a30      	ldr	r2, [pc, #192]	; (2e90 <SystemInit+0x270>)
    2dd0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2dd8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2de0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2de4:	2b06      	cmp	r3, #6
    2de6:	d111      	bne.n	2e0c <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2dec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2df0:	3b03      	subs	r3, #3
    2df2:	2b04      	cmp	r3, #4
    2df4:	d802      	bhi.n	2dfc <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2df6:	4a27      	ldr	r2, [pc, #156]	; (2e94 <SystemInit+0x274>)
    2df8:	5cd3      	ldrb	r3, [r2, r3]
    2dfa:	b13b      	cbz	r3, 2e0c <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2dfc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e08:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e0c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2e14:	2a00      	cmp	r2, #0
    2e16:	db03      	blt.n	2e20 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2e18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	da22      	bge.n	2e66 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e20:	491d      	ldr	r1, [pc, #116]	; (2e98 <SystemInit+0x278>)
    2e22:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e24:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e28:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e2c:	2415      	movs	r4, #21
    nvmc_wait();
    2e2e:	f7ff feef 	bl	2c10 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e32:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2e36:	f7ff feeb 	bl	2c10 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2e3a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2e3e:	f7ff fee7 	bl	2c10 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e42:	2300      	movs	r3, #0
    2e44:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2e48:	f7ff fee2 	bl	2c10 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2e4c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e50:	490a      	ldr	r1, [pc, #40]	; (2e7c <SystemInit+0x25c>)
    2e52:	4b12      	ldr	r3, [pc, #72]	; (2e9c <SystemInit+0x27c>)
    2e54:	68ca      	ldr	r2, [r1, #12]
    2e56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e5a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e5c:	60cb      	str	r3, [r1, #12]
    2e5e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2e62:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e64:	e7fd      	b.n	2e62 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2e66:	4b0e      	ldr	r3, [pc, #56]	; (2ea0 <SystemInit+0x280>)
    2e68:	4a0e      	ldr	r2, [pc, #56]	; (2ea4 <SystemInit+0x284>)
    2e6a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2e6c:	bd10      	pop	{r4, pc}
    2e6e:	bf00      	nop
    2e70:	40013000 	.word	0x40013000
    2e74:	4007c000 	.word	0x4007c000
    2e78:	baadf00d 	.word	0xbaadf00d
    2e7c:	e000ed00 	.word	0xe000ed00
    2e80:	40005000 	.word	0x40005000
    2e84:	00005a0e 	.word	0x00005a0e
    2e88:	4000c000 	.word	0x4000c000
    2e8c:	00005a09 	.word	0x00005a09
    2e90:	40001000 	.word	0x40001000
    2e94:	00005a04 	.word	0x00005a04
    2e98:	4001e000 	.word	0x4001e000
    2e9c:	05fa0004 	.word	0x05fa0004
    2ea0:	20000050 	.word	0x20000050
    2ea4:	03d09000 	.word	0x03d09000

00002ea8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2ea8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2eaa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2eac:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2eae:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    2eb2:	fab2 f382 	clz	r3, r2
    2eb6:	f1c3 031f 	rsb	r3, r3, #31
    2eba:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ebc:	fa05 f403 	lsl.w	r4, r5, r3
    2ec0:	ea22 0404 	bic.w	r4, r2, r4
    2ec4:	e850 6f00 	ldrex	r6, [r0]
    2ec8:	4296      	cmp	r6, r2
    2eca:	d104      	bne.n	2ed6 <nrfx_flag32_alloc+0x2e>
    2ecc:	e840 4c00 	strex	ip, r4, [r0]
    2ed0:	f1bc 0f00 	cmp.w	ip, #0
    2ed4:	d1f6      	bne.n	2ec4 <nrfx_flag32_alloc+0x1c>
    2ed6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2eda:	d1e7      	bne.n	2eac <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2edc:	4801      	ldr	r0, [pc, #4]	; (2ee4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2ede:	700b      	strb	r3, [r1, #0]
}
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	bf00      	nop
    2ee4:	0bad0000 	.word	0x0bad0000

00002ee8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2ee8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2eea:	6803      	ldr	r3, [r0, #0]
    2eec:	40cb      	lsrs	r3, r1
    2eee:	07db      	lsls	r3, r3, #31
    2ef0:	d414      	bmi.n	2f1c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2ef2:	2301      	movs	r3, #1
    2ef4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2ef6:	6802      	ldr	r2, [r0, #0]
    2ef8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2efc:	ea43 0102 	orr.w	r1, r3, r2
    2f00:	e850 4f00 	ldrex	r4, [r0]
    2f04:	4294      	cmp	r4, r2
    2f06:	d104      	bne.n	2f12 <nrfx_flag32_free+0x2a>
    2f08:	e840 1c00 	strex	ip, r1, [r0]
    2f0c:	f1bc 0f00 	cmp.w	ip, #0
    2f10:	d1f6      	bne.n	2f00 <nrfx_flag32_free+0x18>
    2f12:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2f16:	d1ee      	bne.n	2ef6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2f18:	4801      	ldr	r0, [pc, #4]	; (2f20 <nrfx_flag32_free+0x38>)
}
    2f1a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2f1c:	4801      	ldr	r0, [pc, #4]	; (2f24 <nrfx_flag32_free+0x3c>)
    2f1e:	e7fc      	b.n	2f1a <nrfx_flag32_free+0x32>
    2f20:	0bad0000 	.word	0x0bad0000
    2f24:	0bad0004 	.word	0x0bad0004

00002f28 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2f2a:	4604      	mov	r4, r0
    2f2c:	b118      	cbz	r0, 2f36 <clock_stop+0xe>
    2f2e:	2801      	cmp	r0, #1
    2f30:	d022      	beq.n	2f78 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2f32:	b003      	add	sp, #12
    2f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f3a:	2202      	movs	r2, #2
    2f3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f40:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2f44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f48:	2201      	movs	r2, #1
    2f4a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2f4c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2f4e:	2301      	movs	r3, #1
    2f50:	f88d 3007 	strb.w	r3, [sp, #7]
    2f54:	f242 7510 	movw	r5, #10000	; 0x2710
    2f58:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2f5c:	b1cc      	cbz	r4, 2f92 <clock_stop+0x6a>
    2f5e:	2c01      	cmp	r4, #1
    2f60:	d1e7      	bne.n	2f32 <clock_stop+0xa>
            if (p_clk_src != NULL)
    2f62:	b3c7      	cbz	r7, 2fd6 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f64:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2f68:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2f6c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f6e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2f72:	03da      	lsls	r2, r3, #15
    2f74:	d521      	bpl.n	2fba <clock_stop+0x92>
    2f76:	e016      	b.n	2fa6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f7c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2f7e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2f86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f8a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2f8c:	f10d 0707 	add.w	r7, sp, #7
    2f90:	e7dd      	b.n	2f4e <clock_stop+0x26>
            if (p_clk_src != NULL)
    2f92:	b1b7      	cbz	r7, 2fc2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2f94:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2f98:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2f9c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2f9e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2fa2:	03d8      	lsls	r0, r3, #15
    2fa4:	d5c5      	bpl.n	2f32 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2fa6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2faa:	2801      	cmp	r0, #1
    2fac:	d103      	bne.n	2fb6 <clock_stop+0x8e>
    2fae:	f002 f8f0 	bl	5192 <nrfx_busy_wait>
    2fb2:	3d01      	subs	r5, #1
    2fb4:	d1d2      	bne.n	2f5c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2fb6:	2c01      	cmp	r4, #1
    2fb8:	d1bb      	bne.n	2f32 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2fba:	4b0c      	ldr	r3, [pc, #48]	; (2fec <clock_stop+0xc4>)
    2fbc:	2200      	movs	r2, #0
    2fbe:	715a      	strb	r2, [r3, #5]
    2fc0:	e7b7      	b.n	2f32 <clock_stop+0xa>
    2fc2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2fc6:	03d9      	lsls	r1, r3, #15
    2fc8:	d5b3      	bpl.n	2f32 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2fca:	2001      	movs	r0, #1
    2fcc:	f002 f8e1 	bl	5192 <nrfx_busy_wait>
    2fd0:	3d01      	subs	r5, #1
    2fd2:	d1f6      	bne.n	2fc2 <clock_stop+0x9a>
    2fd4:	e7ad      	b.n	2f32 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2fd6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2fda:	03db      	lsls	r3, r3, #15
    2fdc:	d5ed      	bpl.n	2fba <clock_stop+0x92>
    2fde:	2001      	movs	r0, #1
    2fe0:	f002 f8d7 	bl	5192 <nrfx_busy_wait>
    2fe4:	3d01      	subs	r5, #1
    2fe6:	d1f6      	bne.n	2fd6 <clock_stop+0xae>
    2fe8:	e7e7      	b.n	2fba <clock_stop+0x92>
    2fea:	bf00      	nop
    2fec:	200002a0 	.word	0x200002a0

00002ff0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <nrfx_clock_init+0x14>)
    2ff2:	791a      	ldrb	r2, [r3, #4]
    2ff4:	b922      	cbnz	r2, 3000 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2ff6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2ff8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2ffa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2ffc:	4802      	ldr	r0, [pc, #8]	; (3008 <nrfx_clock_init+0x18>)
    2ffe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3000:	4802      	ldr	r0, [pc, #8]	; (300c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3002:	4770      	bx	lr
    3004:	200002a0 	.word	0x200002a0
    3008:	0bad0000 	.word	0x0bad0000
    300c:	0bad000c 	.word	0x0bad000c

00003010 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3010:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3012:	b110      	cbz	r0, 301a <nrfx_clock_start+0xa>
    3014:	2801      	cmp	r0, #1
    3016:	d043      	beq.n	30a0 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3018:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    301a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    301e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3022:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3026:	03c8      	lsls	r0, r1, #15
    3028:	d40b      	bmi.n	3042 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    302a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    302e:	07d9      	lsls	r1, r3, #31
    3030:	d50f      	bpl.n	3052 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3032:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3036:	079b      	lsls	r3, r3, #30
    3038:	d408      	bmi.n	304c <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    303a:	2302      	movs	r3, #2
    303c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    3040:	e7ea      	b.n	3018 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3042:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3046:	2b01      	cmp	r3, #1
    3048:	d004      	beq.n	3054 <nrfx_clock_start+0x44>
    304a:	b113      	cbz	r3, 3052 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    304c:	2000      	movs	r0, #0
    304e:	f7ff ff6b 	bl	2f28 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    3052:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    3054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3058:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    305c:	2300      	movs	r3, #0
    305e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    3062:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    3066:	2302      	movs	r3, #2
    3068:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    306c:	4a12      	ldr	r2, [pc, #72]	; (30b8 <nrfx_clock_start+0xa8>)
    306e:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3072:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3076:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    307a:	4b10      	ldr	r3, [pc, #64]	; (30bc <nrfx_clock_start+0xac>)
    307c:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    307e:	f044 0101 	orr.w	r1, r4, #1
    3082:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3084:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3086:	6859      	ldr	r1, [r3, #4]
    3088:	1b49      	subs	r1, r1, r5
    308a:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    308e:	d3fa      	bcc.n	3086 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    3090:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    3096:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    309a:	2201      	movs	r2, #1
    309c:	609a      	str	r2, [r3, #8]
}
    309e:	e7bb      	b.n	3018 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30a4:	2200      	movs	r2, #0
    30a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    30ae:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30b2:	6018      	str	r0, [r3, #0]
}
    30b4:	e7b0      	b.n	3018 <nrfx_clock_start+0x8>
    30b6:	bf00      	nop
    30b8:	e000ed00 	.word	0xe000ed00
    30bc:	e0001000 	.word	0xe0001000

000030c0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    30c0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    30ca:	b16a      	cbz	r2, 30e8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30cc:	2200      	movs	r2, #0
    30ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    30d6:	2201      	movs	r2, #1
    30d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    30dc:	4b11      	ldr	r3, [pc, #68]	; (3124 <nrfx_power_clock_irq_handler+0x64>)
    30de:	7958      	ldrb	r0, [r3, #5]
    30e0:	b910      	cbnz	r0, 30e8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    30e2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    30e4:	681b      	ldr	r3, [r3, #0]
    30e6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    30f0:	b172      	cbz	r2, 3110 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30f2:	2200      	movs	r2, #0
    30f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    30f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30fc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3100:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3104:	0792      	lsls	r2, r2, #30
    3106:	d104      	bne.n	3112 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3108:	2201      	movs	r2, #1
    310a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    310e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3110:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3112:	2202      	movs	r2, #2
    3114:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3118:	4b02      	ldr	r3, [pc, #8]	; (3124 <nrfx_power_clock_irq_handler+0x64>)
}
    311a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	2001      	movs	r0, #1
    3122:	4718      	bx	r3
    3124:	200002a0 	.word	0x200002a0

00003128 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3128:	4b03      	ldr	r3, [pc, #12]	; (3138 <pin_in_use_by_te+0x10>)
    312a:	3008      	adds	r0, #8
    312c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3130:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3134:	4770      	bx	lr
    3136:	bf00      	nop
    3138:	20000054 	.word	0x20000054

0000313c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    313c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    313e:	f100 0308 	add.w	r3, r0, #8
    3142:	4c0c      	ldr	r4, [pc, #48]	; (3174 <call_handler+0x38>)
    3144:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3148:	05da      	lsls	r2, r3, #23
{
    314a:	4605      	mov	r5, r0
    314c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    314e:	d507      	bpl.n	3160 <call_handler+0x24>
    3150:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3154:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3158:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    315c:	6852      	ldr	r2, [r2, #4]
    315e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3160:	68a3      	ldr	r3, [r4, #8]
    3162:	b12b      	cbz	r3, 3170 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3164:	68e2      	ldr	r2, [r4, #12]
    3166:	4631      	mov	r1, r6
    3168:	4628      	mov	r0, r5
    }
}
    316a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    316e:	4718      	bx	r3
}
    3170:	bd70      	pop	{r4, r5, r6, pc}
    3172:	bf00      	nop
    3174:	20000054 	.word	0x20000054

00003178 <release_handler>:
{
    3178:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    317a:	4a12      	ldr	r2, [pc, #72]	; (31c4 <release_handler+0x4c>)
    317c:	3008      	adds	r0, #8
    317e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3182:	05d9      	lsls	r1, r3, #23
    3184:	d51b      	bpl.n	31be <release_handler+0x46>
    3186:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    318a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    318e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3192:	f102 040e 	add.w	r4, r2, #14
    3196:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3198:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    319c:	f413 7f80 	tst.w	r3, #256	; 0x100
    31a0:	d003      	beq.n	31aa <release_handler+0x32>
    31a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    31a6:	4299      	cmp	r1, r3
    31a8:	d009      	beq.n	31be <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    31aa:	3001      	adds	r0, #1
    31ac:	2820      	cmp	r0, #32
    31ae:	d1f3      	bne.n	3198 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    31b0:	2300      	movs	r3, #0
    31b2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    31b6:	4804      	ldr	r0, [pc, #16]	; (31c8 <release_handler+0x50>)
}
    31b8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    31ba:	f7ff be95 	b.w	2ee8 <nrfx_flag32_free>
}
    31be:	bc10      	pop	{r4}
    31c0:	4770      	bx	lr
    31c2:	bf00      	nop
    31c4:	20000054 	.word	0x20000054
    31c8:	200000a8 	.word	0x200000a8

000031cc <pin_handler_trigger_uninit>:
{
    31cc:	b538      	push	{r3, r4, r5, lr}
    31ce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    31d0:	f7ff ffaa 	bl	3128 <pin_in_use_by_te>
    31d4:	4c09      	ldr	r4, [pc, #36]	; (31fc <pin_handler_trigger_uninit+0x30>)
    31d6:	f102 0508 	add.w	r5, r2, #8
    31da:	b140      	cbz	r0, 31ee <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31dc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    31e0:	4907      	ldr	r1, [pc, #28]	; (3200 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    31e2:	0b5b      	lsrs	r3, r3, #13
    31e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    31e8:	2000      	movs	r0, #0
    31ea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    31ee:	4610      	mov	r0, r2
    31f0:	f7ff ffc2 	bl	3178 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    31f4:	2300      	movs	r3, #0
    31f6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    31fa:	bd38      	pop	{r3, r4, r5, pc}
    31fc:	20000054 	.word	0x20000054
    3200:	40006000 	.word	0x40006000

00003204 <nrfx_gpiote_input_configure>:
{
    3204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3208:	4604      	mov	r4, r0
    320a:	461d      	mov	r5, r3
    if (p_input_config)
    320c:	b309      	cbz	r1, 3252 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    320e:	4f4f      	ldr	r7, [pc, #316]	; (334c <nrfx_gpiote_input_configure+0x148>)
    3210:	f100 0808 	add.w	r8, r0, #8
    3214:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3218:	07b3      	lsls	r3, r6, #30
    321a:	d506      	bpl.n	322a <nrfx_gpiote_input_configure+0x26>
    321c:	f7ff ff84 	bl	3128 <pin_in_use_by_te>
    3220:	b118      	cbz	r0, 322a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    3222:	484b      	ldr	r0, [pc, #300]	; (3350 <nrfx_gpiote_input_configure+0x14c>)
}
    3224:	b002      	add	sp, #8
    3226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    322a:	f004 031f 	and.w	r3, r4, #31
    322e:	009b      	lsls	r3, r3, #2
    3230:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3234:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3236:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    323a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    323e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3242:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3246:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    324a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    324e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    3252:	b19a      	cbz	r2, 327c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3254:	4b3d      	ldr	r3, [pc, #244]	; (334c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3256:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3258:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    325a:	f104 0608 	add.w	r6, r4, #8
    325e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    3262:	f011 0f02 	tst.w	r1, #2
    3266:	d00d      	beq.n	3284 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    3268:	2800      	cmp	r0, #0
    326a:	d1da      	bne.n	3222 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    326c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    3270:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3274:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    3278:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    327c:	2d00      	cmp	r5, #0
    327e:	d13b      	bne.n	32f8 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    3280:	4834      	ldr	r0, [pc, #208]	; (3354 <nrfx_gpiote_input_configure+0x150>)
    3282:	e7cf      	b.n	3224 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3284:	f021 0120 	bic.w	r1, r1, #32
    3288:	04c9      	lsls	r1, r1, #19
    328a:	0cc9      	lsrs	r1, r1, #19
    328c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3290:	2800      	cmp	r0, #0
    3292:	d0eb      	beq.n	326c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3294:	2f03      	cmp	r7, #3
    3296:	d8c4      	bhi.n	3222 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3298:	6852      	ldr	r2, [r2, #4]
    329a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    329e:	b92f      	cbnz	r7, 32ac <nrfx_gpiote_input_configure+0xa8>
    32a0:	4a2d      	ldr	r2, [pc, #180]	; (3358 <nrfx_gpiote_input_configure+0x154>)
    32a2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    32a6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    32aa:	e7df      	b.n	326c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    32ac:	ea4f 028c 	mov.w	r2, ip, lsl #2
    32b0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32b4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    32b8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    32bc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32c0:	f020 0003 	bic.w	r0, r0, #3
    32c4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    32c8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32cc:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    32d0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    32d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    32d8:	0220      	lsls	r0, r4, #8
    32da:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    32de:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    32e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    32e6:	ea40 000e 	orr.w	r0, r0, lr
    32ea:	f041 0120 	orr.w	r1, r1, #32
    32ee:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    32f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    32f6:	e7b9      	b.n	326c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    32f8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    32fc:	4620      	mov	r0, r4
    32fe:	f7ff ff3b 	bl	3178 <release_handler>
    if (!handler)
    3302:	2e00      	cmp	r6, #0
    3304:	d0bc      	beq.n	3280 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3306:	4d11      	ldr	r5, [pc, #68]	; (334c <nrfx_gpiote_input_configure+0x148>)
    3308:	e9d5 2300 	ldrd	r2, r3, [r5]
    330c:	4296      	cmp	r6, r2
    330e:	d101      	bne.n	3314 <nrfx_gpiote_input_configure+0x110>
    3310:	429f      	cmp	r7, r3
    3312:	d019      	beq.n	3348 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3314:	4811      	ldr	r0, [pc, #68]	; (335c <nrfx_gpiote_input_configure+0x158>)
    3316:	f10d 0107 	add.w	r1, sp, #7
    331a:	f7ff fdc5 	bl	2ea8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    331e:	4b0d      	ldr	r3, [pc, #52]	; (3354 <nrfx_gpiote_input_configure+0x150>)
    3320:	4298      	cmp	r0, r3
    3322:	f47f af7f 	bne.w	3224 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    3326:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    332a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    332e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3332:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3334:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3336:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    333a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3342:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3346:	e79b      	b.n	3280 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3348:	2200      	movs	r2, #0
    334a:	e7ee      	b.n	332a <nrfx_gpiote_input_configure+0x126>
    334c:	20000054 	.word	0x20000054
    3350:	0bad0004 	.word	0x0bad0004
    3354:	0bad0000 	.word	0x0bad0000
    3358:	40006000 	.word	0x40006000
    335c:	200000a8 	.word	0x200000a8

00003360 <nrfx_gpiote_output_configure>:
{
    3360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3362:	4604      	mov	r4, r0
    if (p_config)
    3364:	b389      	cbz	r1, 33ca <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3366:	4e3a      	ldr	r6, [pc, #232]	; (3450 <nrfx_gpiote_output_configure+0xf0>)
    3368:	f100 0708 	add.w	r7, r0, #8
    336c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3370:	07ab      	lsls	r3, r5, #30
    3372:	d404      	bmi.n	337e <nrfx_gpiote_output_configure+0x1e>
    3374:	f7ff fed8 	bl	3128 <pin_in_use_by_te>
    3378:	b108      	cbz	r0, 337e <nrfx_gpiote_output_configure+0x1e>
{
    337a:	4836      	ldr	r0, [pc, #216]	; (3454 <nrfx_gpiote_output_configure+0xf4>)
}
    337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    337e:	f015 0f1c 	tst.w	r5, #28
    3382:	784b      	ldrb	r3, [r1, #1]
    3384:	d124      	bne.n	33d0 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    3386:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    338a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    338e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3392:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3394:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3398:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    339c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    339e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    33a2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    33a6:	f02c 0c07 	bic.w	ip, ip, #7
    33aa:	ea43 030c 	orr.w	r3, r3, ip
    33ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    33b2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    33b6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    33ba:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    33be:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    33c2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    33c6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    33ca:	b922      	cbnz	r2, 33d6 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    33cc:	4822      	ldr	r0, [pc, #136]	; (3458 <nrfx_gpiote_output_configure+0xf8>)
    33ce:	e7d5      	b.n	337c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    33d0:	2b01      	cmp	r3, #1
    33d2:	d1d8      	bne.n	3386 <nrfx_gpiote_output_configure+0x26>
    33d4:	e7d1      	b.n	337a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    33d6:	4e1e      	ldr	r6, [pc, #120]	; (3450 <nrfx_gpiote_output_configure+0xf0>)
    33d8:	f104 0708 	add.w	r7, r4, #8
    33dc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    33e0:	0783      	lsls	r3, r0, #30
    33e2:	d5ca      	bpl.n	337a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    33e4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    33e8:	4661      	mov	r1, ip
    33ea:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    33ec:	f020 0020 	bic.w	r0, r0, #32
    33f0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    33f4:	04c0      	lsls	r0, r0, #19
    33f6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    33fa:	0cc0      	lsrs	r0, r0, #19
    33fc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3400:	2300      	movs	r3, #0
    3402:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3406:	7855      	ldrb	r5, [r2, #1]
    3408:	2d00      	cmp	r5, #0
    340a:	d0df      	beq.n	33cc <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    340c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3410:	7892      	ldrb	r2, [r2, #2]
    3412:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3416:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    341a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    341e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3422:	0223      	lsls	r3, r4, #8
    3424:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3428:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    342a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    342e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3432:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3434:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3436:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    343a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    343e:	4313      	orrs	r3, r2
    3440:	f040 0020 	orr.w	r0, r0, #32
    3444:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3448:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    344c:	e7be      	b.n	33cc <nrfx_gpiote_output_configure+0x6c>
    344e:	bf00      	nop
    3450:	20000054 	.word	0x20000054
    3454:	0bad0004 	.word	0x0bad0004
    3458:	0bad0000 	.word	0x0bad0000

0000345c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    345c:	4b01      	ldr	r3, [pc, #4]	; (3464 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    345e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3462:	4770      	bx	lr
    3464:	20000054 	.word	0x20000054

00003468 <nrfx_gpiote_channel_get>:
{
    3468:	b508      	push	{r3, lr}
    346a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    346c:	f7ff fe5c 	bl	3128 <pin_in_use_by_te>
    3470:	b138      	cbz	r0, 3482 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3472:	4b05      	ldr	r3, [pc, #20]	; (3488 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3474:	4805      	ldr	r0, [pc, #20]	; (348c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3476:	3208      	adds	r2, #8
    3478:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    347c:	0b5b      	lsrs	r3, r3, #13
    347e:	700b      	strb	r3, [r1, #0]
}
    3480:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3482:	4803      	ldr	r0, [pc, #12]	; (3490 <nrfx_gpiote_channel_get+0x28>)
    3484:	e7fc      	b.n	3480 <nrfx_gpiote_channel_get+0x18>
    3486:	bf00      	nop
    3488:	20000054 	.word	0x20000054
    348c:	0bad0000 	.word	0x0bad0000
    3490:	0bad0004 	.word	0x0bad0004

00003494 <nrfx_gpiote_init>:
{
    3494:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3496:	4c0f      	ldr	r4, [pc, #60]	; (34d4 <nrfx_gpiote_init+0x40>)
    3498:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    349c:	b9bd      	cbnz	r5, 34ce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    349e:	2240      	movs	r2, #64	; 0x40
    34a0:	4629      	mov	r1, r5
    34a2:	f104 0010 	add.w	r0, r4, #16
    34a6:	f001 fc34 	bl	4d12 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    34aa:	2006      	movs	r0, #6
    34ac:	f7fe f88e 	bl	15cc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34b0:	4b09      	ldr	r3, [pc, #36]	; (34d8 <nrfx_gpiote_init+0x44>)
    return err_code;
    34b2:	480a      	ldr	r0, [pc, #40]	; (34dc <nrfx_gpiote_init+0x48>)
    34b4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    34b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    34bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    34c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    34c4:	2301      	movs	r3, #1
    34c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    34ca:	6563      	str	r3, [r4, #84]	; 0x54
}
    34cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    34ce:	4804      	ldr	r0, [pc, #16]	; (34e0 <nrfx_gpiote_init+0x4c>)
    34d0:	e7fc      	b.n	34cc <nrfx_gpiote_init+0x38>
    34d2:	bf00      	nop
    34d4:	20000054 	.word	0x20000054
    34d8:	40006000 	.word	0x40006000
    34dc:	0bad0000 	.word	0x0bad0000
    34e0:	0bad0005 	.word	0x0bad0005

000034e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    34e4:	4b03      	ldr	r3, [pc, #12]	; (34f4 <nrfx_gpiote_is_init+0x10>)
    34e6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    34ea:	3800      	subs	r0, #0
    34ec:	bf18      	it	ne
    34ee:	2001      	movne	r0, #1
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	20000054 	.word	0x20000054

000034f8 <nrfx_gpiote_channel_free>:
{
    34f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    34fa:	4801      	ldr	r0, [pc, #4]	; (3500 <nrfx_gpiote_channel_free+0x8>)
    34fc:	f7ff bcf4 	b.w	2ee8 <nrfx_flag32_free>
    3500:	200000a4 	.word	0x200000a4

00003504 <nrfx_gpiote_channel_alloc>:
{
    3504:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3506:	4801      	ldr	r0, [pc, #4]	; (350c <nrfx_gpiote_channel_alloc+0x8>)
    3508:	f7ff bcce 	b.w	2ea8 <nrfx_flag32_alloc>
    350c:	200000a4 	.word	0x200000a4

00003510 <nrfx_gpiote_trigger_enable>:
{
    3510:	b510      	push	{r4, lr}
    3512:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3514:	f7ff fe08 	bl	3128 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3518:	f102 0408 	add.w	r4, r2, #8
    351c:	4b1c      	ldr	r3, [pc, #112]	; (3590 <nrfx_gpiote_trigger_enable+0x80>)
    351e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3522:	b1e0      	cbz	r0, 355e <nrfx_gpiote_trigger_enable+0x4e>
    3524:	f013 0402 	ands.w	r4, r3, #2
    3528:	d119      	bne.n	355e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    352a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    352c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    352e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3532:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3536:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    353a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    353e:	6004      	str	r4, [r0, #0]
    3540:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3542:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3546:	f040 0001 	orr.w	r0, r0, #1
    354a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    354e:	b129      	cbz	r1, 355c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3550:	2201      	movs	r2, #1
    3552:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3556:	4a0f      	ldr	r2, [pc, #60]	; (3594 <nrfx_gpiote_trigger_enable+0x84>)
    3558:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    355c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    355e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3562:	2b04      	cmp	r3, #4
    3564:	d010      	beq.n	3588 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3566:	2b05      	cmp	r3, #5
    3568:	d010      	beq.n	358c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    356a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    356e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    3572:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3576:	40d9      	lsrs	r1, r3
    3578:	f001 0101 	and.w	r1, r1, #1
    357c:	3102      	adds	r1, #2
}
    357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3582:	4610      	mov	r0, r2
    3584:	f001 be16 	b.w	51b4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3588:	2103      	movs	r1, #3
    358a:	e7f8      	b.n	357e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    358c:	2102      	movs	r1, #2
    358e:	e7f6      	b.n	357e <nrfx_gpiote_trigger_enable+0x6e>
    3590:	20000054 	.word	0x20000054
    3594:	40006000 	.word	0x40006000

00003598 <nrfx_gpiote_trigger_disable>:
{
    3598:	b508      	push	{r3, lr}
    359a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    359c:	f7ff fdc4 	bl	3128 <pin_in_use_by_te>
    35a0:	b1c0      	cbz	r0, 35d4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    35a2:	f102 0108 	add.w	r1, r2, #8
    35a6:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <nrfx_gpiote_trigger_disable+0x48>)
    35a8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    35ac:	0799      	lsls	r1, r3, #30
    35ae:	d411      	bmi.n	35d4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    35b0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    35b2:	2201      	movs	r2, #1
    35b4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    35b6:	009b      	lsls	r3, r3, #2
    35b8:	490a      	ldr	r1, [pc, #40]	; (35e4 <nrfx_gpiote_trigger_disable+0x4c>)
    35ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    35be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    35c2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    35c6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    35ca:	f022 0203 	bic.w	r2, r2, #3
    35ce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    35d2:	bd08      	pop	{r3, pc}
    35d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    35d8:	2100      	movs	r1, #0
    35da:	4610      	mov	r0, r2
    35dc:	f001 bdea 	b.w	51b4 <nrf_gpio_cfg_sense_set>
    35e0:	20000054 	.word	0x20000054
    35e4:	40006000 	.word	0x40006000

000035e8 <nrfx_gpiote_pin_uninit>:
{
    35e8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    35ea:	4b0d      	ldr	r3, [pc, #52]	; (3620 <nrfx_gpiote_pin_uninit+0x38>)
    35ec:	f100 0208 	add.w	r2, r0, #8
{
    35f0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    35f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    35f6:	07db      	lsls	r3, r3, #31
    35f8:	d50f      	bpl.n	361a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    35fa:	f7ff ffcd 	bl	3598 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    35fe:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    3600:	f004 041f 	and.w	r4, r4, #31
    3604:	f7ff fde2 	bl	31cc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3608:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    360c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3610:	2202      	movs	r2, #2
    3612:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3616:	4803      	ldr	r0, [pc, #12]	; (3624 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3618:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    361a:	4803      	ldr	r0, [pc, #12]	; (3628 <nrfx_gpiote_pin_uninit+0x40>)
    361c:	e7fc      	b.n	3618 <nrfx_gpiote_pin_uninit+0x30>
    361e:	bf00      	nop
    3620:	20000054 	.word	0x20000054
    3624:	0bad0000 	.word	0x0bad0000
    3628:	0bad0004 	.word	0x0bad0004

0000362c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    362c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3630:	4b4f      	ldr	r3, [pc, #316]	; (3770 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    3632:	4850      	ldr	r0, [pc, #320]	; (3774 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3634:	4950      	ldr	r1, [pc, #320]	; (3778 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    3636:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3638:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    363a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    363c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    363e:	b136      	cbz	r6, 364e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    3640:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3644:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3646:	bf1e      	ittt	ne
    3648:	601c      	strne	r4, [r3, #0]
    364a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    364c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    364e:	3304      	adds	r3, #4
    3650:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3652:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3656:	d1f1      	bne.n	363c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3658:	4b46      	ldr	r3, [pc, #280]	; (3774 <nrfx_gpiote_irq_handler+0x148>)
    365a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    365e:	b1bb      	cbz	r3, 3690 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    3660:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3664:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3668:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    366a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    366e:	af01      	add	r7, sp, #4
    3670:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    3674:	9c01      	ldr	r4, [sp, #4]
    3676:	b98c      	cbnz	r4, 369c <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3678:	4b3e      	ldr	r3, [pc, #248]	; (3774 <nrfx_gpiote_irq_handler+0x148>)
    367a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    367e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3682:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3686:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3688:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    368c:	2b00      	cmp	r3, #0
    368e:	d1ee      	bne.n	366e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    3690:	2401      	movs	r4, #1
    while (mask)
    3692:	2d00      	cmp	r5, #0
    3694:	d153      	bne.n	373e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3696:	b003      	add	sp, #12
    3698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    369c:	fa94 f4a4 	rbit	r4, r4
    36a0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    36a4:	4a35      	ldr	r2, [pc, #212]	; (377c <nrfx_gpiote_irq_handler+0x150>)
    36a6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    36aa:	08e0      	lsrs	r0, r4, #3
    36ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    36b0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    36b2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    36b6:	fa08 f202 	lsl.w	r2, r8, r2
    36ba:	ea23 0302 	bic.w	r3, r3, r2
    36be:	543b      	strb	r3, [r7, r0]
    36c0:	00a3      	lsls	r3, r4, #2
    36c2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    36c6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36ca:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    36ce:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    36d0:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    36d2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    36d6:	d518      	bpl.n	370a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    36d8:	4659      	mov	r1, fp
    36da:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36dc:	fa5f fa82 	uxtb.w	sl, r2
    36e0:	f7ff fd2c 	bl	313c <call_handler>
    36e4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    36e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    36ec:	459a      	cmp	sl, r3
    36ee:	d107      	bne.n	3700 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    36f0:	2100      	movs	r1, #0
    36f2:	4620      	mov	r0, r4
    36f4:	f001 fd5e 	bl	51b4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    36f8:	4651      	mov	r1, sl
    36fa:	4620      	mov	r0, r4
    36fc:	f001 fd5a 	bl	51b4 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3700:	fa08 f404 	lsl.w	r4, r8, r4
    3704:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3708:	e7b4      	b.n	3674 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    370a:	2a02      	cmp	r2, #2
    370c:	d10c      	bne.n	3728 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    370e:	2103      	movs	r1, #3
    3710:	4620      	mov	r0, r4
    3712:	f001 fd4f 	bl	51b4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3716:	f00a 0305 	and.w	r3, sl, #5
    371a:	2b01      	cmp	r3, #1
    371c:	d1f0      	bne.n	3700 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    371e:	4659      	mov	r1, fp
    3720:	4620      	mov	r0, r4
    3722:	f7ff fd0b 	bl	313c <call_handler>
    3726:	e7eb      	b.n	3700 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3728:	2102      	movs	r1, #2
    372a:	4620      	mov	r0, r4
    372c:	f001 fd42 	bl	51b4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3730:	f1ba 0f03 	cmp.w	sl, #3
    3734:	d0f3      	beq.n	371e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3736:	2a03      	cmp	r2, #3
    3738:	d1e2      	bne.n	3700 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    373a:	458a      	cmp	sl, r1
    373c:	e7ee      	b.n	371c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    373e:	fa95 f3a5 	rbit	r3, r5
    3742:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3746:	fa04 f203 	lsl.w	r2, r4, r3
    374a:	009b      	lsls	r3, r3, #2
    374c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3750:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3754:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3758:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    375c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3760:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3764:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3768:	f7ff fce8 	bl	313c <call_handler>
    376c:	e791      	b.n	3692 <nrfx_gpiote_irq_handler+0x66>
    376e:	bf00      	nop
    3770:	40006100 	.word	0x40006100
    3774:	40006000 	.word	0x40006000
    3778:	40006120 	.word	0x40006120
    377c:	20000054 	.word	0x20000054

00003780 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3780:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3782:	4801      	ldr	r0, [pc, #4]	; (3788 <nrfx_ppi_channel_alloc+0x8>)
    3784:	f7ff bb90 	b.w	2ea8 <nrfx_flag32_alloc>
    3788:	200000b0 	.word	0x200000b0

0000378c <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    378c:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    378e:	4b3b      	ldr	r3, [pc, #236]	; (387c <twi_tx_start_transfer+0xf0>)
    3790:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3792:	2300      	movs	r3, #0
    3794:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3798:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    379c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    37a0:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    37a4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    37a8:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    37ac:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    37b0:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    37b4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    37b8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    37ba:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37be:	2301      	movs	r3, #1
    37c0:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    37c2:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    37c6:	429a      	cmp	r2, r3
    37c8:	bf18      	it	ne
    37ca:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    37cc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    37ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    37d0:	4293      	cmp	r3, r2
{
    37d2:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    37d4:	d20e      	bcs.n	37f4 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    37d6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    37d8:	5cd3      	ldrb	r3, [r2, r3]
    37da:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    37de:	680b      	ldr	r3, [r1, #0]
    37e0:	b303      	cbz	r3, 3824 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    37e2:	f240 2386 	movw	r3, #646	; 0x286
    37e6:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    37e8:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    37ea:	4825      	ldr	r0, [pc, #148]	; (3880 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    37ec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    37f0:	b002      	add	sp, #8
    37f2:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    37f4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    37f8:	b113      	cbz	r3, 3800 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37fa:	2301      	movs	r3, #1
    37fc:	61c3      	str	r3, [r0, #28]
            return false;
    37fe:	e7ee      	b.n	37de <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    3800:	6a0b      	ldr	r3, [r1, #32]
    3802:	f013 0f40 	tst.w	r3, #64	; 0x40
    3806:	f04f 0301 	mov.w	r3, #1
    380a:	bf16      	itet	ne
    380c:	61c3      	strne	r3, [r0, #28]
    380e:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    3810:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    3814:	e7e3      	b.n	37de <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    3816:	4620      	mov	r0, r4
    3818:	f001 fcda 	bl	51d0 <twi_transfer>
        while ((hw_timeout > 0) &&
    381c:	b128      	cbz	r0, 382a <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    381e:	9b01      	ldr	r3, [sp, #4]
    3820:	3b01      	subs	r3, #1
    3822:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3824:	9b01      	ldr	r3, [sp, #4]
    3826:	2b00      	cmp	r3, #0
    3828:	dcf5      	bgt.n	3816 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    382a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    382e:	b95b      	cbnz	r3, 3848 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3830:	4813      	ldr	r0, [pc, #76]	; (3880 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	2b00      	cmp	r3, #0
    3836:	dcdb      	bgt.n	37f0 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3838:	2300      	movs	r3, #0
    383a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    383e:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3840:	4810      	ldr	r0, [pc, #64]	; (3884 <twi_tx_start_transfer+0xf8>)
    3842:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    3846:	e7d3      	b.n	37f0 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    3848:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    384c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3850:	b18b      	cbz	r3, 3876 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3852:	4a0d      	ldr	r2, [pc, #52]	; (3888 <twi_tx_start_transfer+0xfc>)
    3854:	480b      	ldr	r0, [pc, #44]	; (3884 <twi_tx_start_transfer+0xf8>)
    3856:	f013 0f01 	tst.w	r3, #1
    385a:	bf18      	it	ne
    385c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    385e:	f013 0f02 	tst.w	r3, #2
    3862:	f102 0201 	add.w	r2, r2, #1
    3866:	bf18      	it	ne
    3868:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    386a:	f013 0f04 	tst.w	r3, #4
    386e:	4b07      	ldr	r3, [pc, #28]	; (388c <twi_tx_start_transfer+0x100>)
    3870:	bf18      	it	ne
    3872:	4618      	movne	r0, r3
    3874:	e7dd      	b.n	3832 <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    3876:	4803      	ldr	r0, [pc, #12]	; (3884 <twi_tx_start_transfer+0xf8>)
    3878:	e7db      	b.n	3832 <twi_tx_start_transfer+0xa6>
    387a:	bf00      	nop
    387c:	000186a0 	.word	0x000186a0
    3880:	0bad0000 	.word	0x0bad0000
    3884:	0bad0001 	.word	0x0bad0001
    3888:	0bae0000 	.word	0x0bae0000
    388c:	0bae0002 	.word	0x0bae0002

00003890 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    3890:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    3892:	4b33      	ldr	r3, [pc, #204]	; (3960 <twi_rx_start_transfer+0xd0>)
    3894:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3896:	2300      	movs	r3, #0
    3898:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    389c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    38a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    38a4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    38a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    38ac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    38b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    38b4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    38b8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    38ba:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    38be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    38c0:	2b01      	cmp	r3, #1
{
    38c2:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    38c4:	d117      	bne.n	38f6 <twi_rx_start_transfer+0x66>
    38c6:	6a0b      	ldr	r3, [r1, #32]
    38c8:	065b      	lsls	r3, r3, #25
    38ca:	d414      	bmi.n	38f6 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    38cc:	2302      	movs	r3, #2
    38ce:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38d2:	2301      	movs	r3, #1
    38d4:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    38d6:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    38da:	2a02      	cmp	r2, #2
    38dc:	bf18      	it	ne
    38de:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    38e0:	680b      	ldr	r3, [r1, #0]
    38e2:	b18b      	cbz	r3, 3908 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    38e4:	f240 2386 	movw	r3, #646	; 0x286
    38e8:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    38ea:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    38ec:	481d      	ldr	r0, [pc, #116]	; (3964 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    38ee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    38f2:	b002      	add	sp, #8
    38f4:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    38f6:	2301      	movs	r3, #1
    38f8:	e7e9      	b.n	38ce <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    38fa:	4620      	mov	r0, r4
    38fc:	f001 fc68 	bl	51d0 <twi_transfer>
        while ((hw_timeout > 0) &&
    3900:	b128      	cbz	r0, 390e <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    3902:	9b01      	ldr	r3, [sp, #4]
    3904:	3b01      	subs	r3, #1
    3906:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3908:	9b01      	ldr	r3, [sp, #4]
    390a:	2b00      	cmp	r3, #0
    390c:	dcf5      	bgt.n	38fa <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    390e:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    3912:	b95b      	cbnz	r3, 392c <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3914:	4813      	ldr	r0, [pc, #76]	; (3964 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    3916:	9b01      	ldr	r3, [sp, #4]
    3918:	2b00      	cmp	r3, #0
    391a:	dcea      	bgt.n	38f2 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    391c:	2300      	movs	r3, #0
    391e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3922:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3924:	4810      	ldr	r0, [pc, #64]	; (3968 <twi_rx_start_transfer+0xd8>)
    3926:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    392a:	e7e2      	b.n	38f2 <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    392c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3930:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3934:	b18b      	cbz	r3, 395a <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3936:	4a0d      	ldr	r2, [pc, #52]	; (396c <twi_rx_start_transfer+0xdc>)
    3938:	480b      	ldr	r0, [pc, #44]	; (3968 <twi_rx_start_transfer+0xd8>)
    393a:	f013 0f01 	tst.w	r3, #1
    393e:	bf18      	it	ne
    3940:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3942:	f013 0f02 	tst.w	r3, #2
    3946:	f102 0201 	add.w	r2, r2, #1
    394a:	bf18      	it	ne
    394c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    394e:	f013 0f04 	tst.w	r3, #4
    3952:	4b07      	ldr	r3, [pc, #28]	; (3970 <twi_rx_start_transfer+0xe0>)
    3954:	bf18      	it	ne
    3956:	4618      	movne	r0, r3
    3958:	e7dd      	b.n	3916 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    395a:	4803      	ldr	r0, [pc, #12]	; (3968 <twi_rx_start_transfer+0xd8>)
    395c:	e7db      	b.n	3916 <twi_rx_start_transfer+0x86>
    395e:	bf00      	nop
    3960:	000186a0 	.word	0x000186a0
    3964:	0bad0000 	.word	0x0bad0000
    3968:	0bad0001 	.word	0x0bad0001
    396c:	0bae0000 	.word	0x0bae0000
    3970:	0bae0002 	.word	0x0bae0002

00003974 <nrfx_twi_init>:
{
    3974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3976:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3978:	4d25      	ldr	r5, [pc, #148]	; (3a10 <nrfx_twi_init+0x9c>)
    397a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    397e:	fb0e fe06 	mul.w	lr, lr, r6
    3982:	eb05 040e 	add.w	r4, r5, lr
    3986:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    398a:	2f00      	cmp	r7, #0
    398c:	d13d      	bne.n	3a0a <nrfx_twi_init+0x96>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    398e:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    3992:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    3996:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    3998:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    399a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    399e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    p_cb->busy            = false;
    39a2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    39a6:	7b4b      	ldrb	r3, [r1, #13]
    39a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    39ac:	7b8b      	ldrb	r3, [r1, #14]
    39ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    39b2:	b98b      	cbnz	r3, 39d8 <nrfx_twi_init+0x64>
    *p_pin = pin_number & 0x1F;
    39b4:	680b      	ldr	r3, [r1, #0]
    39b6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    39ba:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    39be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39c2:	f240 670c 	movw	r7, #1548	; 0x60c
    39c6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    39ca:	684b      	ldr	r3, [r1, #4]
    39cc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    39d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39d4:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    39d8:	7bcb      	ldrb	r3, [r1, #15]
    39da:	b92b      	cbnz	r3, 39e8 <nrfx_twi_init+0x74>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    39dc:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSELSCL = scl_pin;
    39e0:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    39e4:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    39e8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    39ea:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    39ee:	b122      	cbz	r2, 39fa <nrfx_twi_init+0x86>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    39f0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    39f2:	f340 3007 	sbfx	r0, r0, #12, #8
    39f6:	f7fd fde9 	bl	15cc <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    39fa:	233c      	movs	r3, #60	; 0x3c
    39fc:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    3a00:	4804      	ldr	r0, [pc, #16]	; (3a14 <nrfx_twi_init+0xa0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3a02:	2301      	movs	r3, #1
    3a04:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    3a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    3a0a:	4803      	ldr	r0, [pc, #12]	; (3a18 <nrfx_twi_init+0xa4>)
    3a0c:	e7fc      	b.n	3a08 <nrfx_twi_init+0x94>
    3a0e:	bf00      	nop
    3a10:	200002a8 	.word	0x200002a8
    3a14:	0bad0000 	.word	0x0bad0000
    3a18:	0bad0005 	.word	0x0bad0005

00003a1c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3a1c:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3a1e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3a20:	2105      	movs	r1, #5
    3a22:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    3a26:	4b04      	ldr	r3, [pc, #16]	; (3a38 <nrfx_twi_enable+0x1c>)
    3a28:	213c      	movs	r1, #60	; 0x3c
    3a2a:	fb01 3302 	mla	r3, r1, r2, r3
    3a2e:	2202      	movs	r2, #2
    3a30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    3a34:	4770      	bx	lr
    3a36:	bf00      	nop
    3a38:	200002a8 	.word	0x200002a8

00003a3c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3a3c:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    3a3e:	4a0b      	ldr	r2, [pc, #44]	; (3a6c <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3a40:	7901      	ldrb	r1, [r0, #4]
    3a42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3a46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a4a:	f022 0203 	bic.w	r2, r2, #3
    3a4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3a52:	2200      	movs	r2, #0
    3a54:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3a58:	4b05      	ldr	r3, [pc, #20]	; (3a70 <nrfx_twi_disable+0x34>)
    3a5a:	203c      	movs	r0, #60	; 0x3c
    3a5c:	fb00 3301 	mla	r3, r0, r1, r3
    3a60:	2101      	movs	r1, #1
    3a62:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    3a66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    3a6a:	4770      	bx	lr
    3a6c:	00044286 	.word	0x00044286
    3a70:	200002a8 	.word	0x200002a8

00003a74 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3a78:	4f31      	ldr	r7, [pc, #196]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3a7a:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    3a7c:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3a80:	233c      	movs	r3, #60	; 0x3c
    3a82:	fb03 7304 	mla	r3, r3, r4, r7
{
    3a86:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    3a8c:	2b01      	cmp	r3, #1
{
    3a8e:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3a90:	d104      	bne.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a92:	780b      	ldrb	r3, [r1, #0]
    3a94:	2b01      	cmp	r3, #1
    3a96:	d106      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
        return NRFX_ERROR_INVALID_STATE;
    3a98:	482a      	ldr	r0, [pc, #168]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3a9a:	e011      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    3a9c:	2b02      	cmp	r3, #2
    3a9e:	d102      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    3aa0:	780b      	ldrb	r3, [r1, #0]
    3aa2:	2b01      	cmp	r3, #1
    3aa4:	d1f8      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    if (p_cb->busy)
    3aa6:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    3aa8:	4b27      	ldr	r3, [pc, #156]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3aaa:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    3aae:	fb06 7604 	mla	r6, r6, r4, r7
    3ab2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    3ab6:	b12b      	cbz	r3, 3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3ab8:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    3aba:	4824      	ldr	r0, [pc, #144]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    p_reg->INTENSET = mask;
    3abc:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    3ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    3ac4:	f08c 0304 	eor.w	r3, ip, #4
    3ac8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3acc:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    3ad0:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    3ad4:	46a8      	mov	r8, r5
    3ad6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    3ada:	f106 0e0c 	add.w	lr, r6, #12
    3ade:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3ae2:	f8d8 3000 	ldr.w	r3, [r8]
    3ae6:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    3aea:	686b      	ldr	r3, [r5, #4]
    3aec:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    3aee:	68eb      	ldr	r3, [r5, #12]
    3af0:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    3af2:	786b      	ldrb	r3, [r5, #1]
    3af4:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3af8:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3afa:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3afe:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3b00:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3b04:	d017      	beq.n	3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3b06:	b99b      	cbnz	r3, 3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>
    3b08:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    3b0c:	233c      	movs	r3, #60	; 0x3c
    3b0e:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3b12:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3b14:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3b18:	4648      	mov	r0, r9
    3b1a:	f7ff fe37 	bl	378c <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    3b1e:	233c      	movs	r3, #60	; 0x3c
    3b20:	435c      	muls	r4, r3
    3b22:	193a      	adds	r2, r7, r4
    3b24:	593b      	ldr	r3, [r7, r4]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d1ca      	bne.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
        p_cb->busy = false;
    3b2a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    3b2e:	e7c7      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3b30:	f04f 0c01 	mov.w	ip, #1
    3b34:	e7ea      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    3b36:	4651      	mov	r1, sl
    3b38:	4648      	mov	r0, r9
    3b3a:	f7ff fea9 	bl	3890 <twi_rx_start_transfer>
    3b3e:	e7ee      	b.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
    3b40:	200002a8 	.word	0x200002a8
    3b44:	0bad0005 	.word	0x0bad0005
    3b48:	00044286 	.word	0x00044286
    3b4c:	0bad000b 	.word	0x0bad000b

00003b50 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    3b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    3b52:	4c32      	ldr	r4, [pc, #200]	; (3c1c <nrfx_twi_0_irq_handler+0xcc>)
    3b54:	4832      	ldr	r0, [pc, #200]	; (3c20 <nrfx_twi_0_irq_handler+0xd0>)
{
    3b56:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    3b58:	4621      	mov	r1, r4
    3b5a:	f001 fb39 	bl	51d0 <twi_transfer>
    3b5e:	2800      	cmp	r0, #0
    3b60:	d159      	bne.n	3c16 <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    3b62:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    3b66:	b9ff      	cbnz	r7, 3ba8 <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    3b68:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    3b6a:	1e93      	subs	r3, r2, #2
    3b6c:	2b01      	cmp	r3, #1
    3b6e:	d81b      	bhi.n	3ba8 <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    3b70:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b72:	69a3      	ldr	r3, [r4, #24]
    3b74:	4298      	cmp	r0, r3
    3b76:	d117      	bne.n	3ba8 <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    3b78:	69e3      	ldr	r3, [r4, #28]
    3b7a:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3b7c:	6963      	ldr	r3, [r4, #20]
    3b7e:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3b80:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3b82:	4827      	ldr	r0, [pc, #156]	; (3c20 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3b84:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3b88:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3b8c:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3b8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3b92:	d104      	bne.n	3b9e <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    3b94:	b007      	add	sp, #28
    3b96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3b9a:	f7ff bdf7 	b.w	378c <twi_tx_start_transfer>
}
    3b9e:	b007      	add	sp, #28
    3ba0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    3ba4:	f7ff be74 	b.w	3890 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    3ba8:	4e1e      	ldr	r6, [pc, #120]	; (3c24 <nrfx_twi_0_irq_handler+0xd4>)
    3baa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3bac:	ad01      	add	r5, sp, #4
    3bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3bb0:	6833      	ldr	r3, [r6, #0]
    3bb2:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    3bb4:	b347      	cbz	r7, 3c08 <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    3bb6:	4a1a      	ldr	r2, [pc, #104]	; (3c20 <nrfx_twi_0_irq_handler+0xd0>)
    3bb8:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3bbc:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    3bc0:	f013 0102 	ands.w	r1, r3, #2
    3bc4:	d006      	beq.n	3bd4 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    3bc6:	2301      	movs	r3, #1
    3bc8:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3bcc:	2300      	movs	r3, #0
    3bce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3bd2:	e007      	b.n	3be4 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    3bd4:	f013 0204 	ands.w	r2, r3, #4
    3bd8:	d009      	beq.n	3bee <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3bda:	2302      	movs	r3, #2
    3bdc:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3be0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    3be4:	e9d4 3100 	ldrd	r3, r1, [r4]
    3be8:	4668      	mov	r0, sp
    3bea:	4798      	blx	r3
}
    3bec:	e013      	b.n	3c16 <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    3bee:	f013 0301 	ands.w	r3, r3, #1
    3bf2:	d005      	beq.n	3c00 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    3bf4:	2303      	movs	r3, #3
    3bf6:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3bfa:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3bfe:	e7f1      	b.n	3be4 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    3c00:	2204      	movs	r2, #4
    3c02:	f88d 2000 	strb.w	r2, [sp]
    3c06:	e7e2      	b.n	3bce <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3c08:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    3c0a:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3c0e:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    3c10:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3c14:	d5e6      	bpl.n	3be4 <nrfx_twi_0_irq_handler+0x94>
}
    3c16:	b007      	add	sp, #28
    3c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c1a:	bf00      	nop
    3c1c:	200002a8 	.word	0x200002a8
    3c20:	40003000 	.word	0x40003000
    3c24:	200002b4 	.word	0x200002b4

00003c28 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    3c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    3c2c:	f000 001f 	and.w	r0, r0, #31
    3c30:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c34:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    3c36:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c3a:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    3c3e:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    3c42:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    3c46:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c4a:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    3c4c:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    3c50:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    3c54:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    3c58:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    3c5c:	2004      	movs	r0, #4
    3c5e:	f001 fa98 	bl	5192 <nrfx_busy_wait>
    3c62:	2709      	movs	r7, #9
    return p_reg->IN;
    3c64:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    3c68:	421c      	tst	r4, r3
    3c6a:	d10d      	bne.n	3c88 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    3c6c:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    3c6e:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    3c72:	f001 fa8e 	bl	5192 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3c76:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    3c78:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    3c7c:	2004      	movs	r0, #4
    3c7e:	f001 fa88 	bl	5192 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3c82:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    3c86:	d1ed      	bne.n	3c64 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    3c88:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    3c8c:	2004      	movs	r0, #4
    3c8e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    3c92:	f001 fa7e 	bl	5192 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    3c96:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    3c9a:	2004      	movs	r0, #4
    3c9c:	f001 fa79 	bl	5192 <nrfx_busy_wait>
    return p_reg->IN;
    3ca0:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    3ca4:	4803      	ldr	r0, [pc, #12]	; (3cb4 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3ca6:	40f3      	lsrs	r3, r6
    3ca8:	f003 0301 	and.w	r3, r3, #1
    3cac:	1ac0      	subs	r0, r0, r3
    3cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb2:	bf00      	nop
    3cb4:	0bad0001 	.word	0x0bad0001

00003cb8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3cb8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3cba:	4c14      	ldr	r4, [pc, #80]	; (3d0c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3cbc:	4a14      	ldr	r2, [pc, #80]	; (3d10 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3cbe:	4915      	ldr	r1, [pc, #84]	; (3d14 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3cc0:	2303      	movs	r3, #3
    3cc2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3cc4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3cc6:	4b14      	ldr	r3, [pc, #80]	; (3d18 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3cc8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3cca:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3cd0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3cd2:	2300      	movs	r3, #0
    3cd4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3cd6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3cda:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3cdc:	4a0f      	ldr	r2, [pc, #60]	; (3d1c <_DoInit+0x64>)
    3cde:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3ce0:	2210      	movs	r2, #16
    3ce2:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    3ce4:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    3ce6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3ce8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3cea:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3cec:	f000 ffec 	bl	4cc8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3cf0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3cf4:	490a      	ldr	r1, [pc, #40]	; (3d20 <_DoInit+0x68>)
    3cf6:	4620      	mov	r0, r4
    3cf8:	f000 ffe6 	bl	4cc8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3cfc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3d00:	2320      	movs	r3, #32
    3d02:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3d04:	f3bf 8f5f 	dmb	sy
}
    3d08:	bd10      	pop	{r4, pc}
    3d0a:	bf00      	nop
    3d0c:	200002e4 	.word	0x200002e4
    3d10:	00005a41 	.word	0x00005a41
    3d14:	00005a4a 	.word	0x00005a4a
    3d18:	200003d8 	.word	0x200003d8
    3d1c:	200003c8 	.word	0x200003c8
    3d20:	00005a4e 	.word	0x00005a4e

00003d24 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d24:	4b0f      	ldr	r3, [pc, #60]	; (3d64 <z_sys_init_run_level+0x40>)
{
    3d26:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3d2c:	3001      	adds	r0, #1
    3d2e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3d32:	42a6      	cmp	r6, r4
    3d34:	d800      	bhi.n	3d38 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3d36:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3d38:	e9d4 3500 	ldrd	r3, r5, [r4]
    3d3c:	4628      	mov	r0, r5
    3d3e:	4798      	blx	r3
		if (dev != NULL) {
    3d40:	b16d      	cbz	r5, 3d5e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    3d42:	b138      	cbz	r0, 3d54 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3d44:	2800      	cmp	r0, #0
    3d46:	bfb8      	it	lt
    3d48:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3d4a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    3d4c:	28ff      	cmp	r0, #255	; 0xff
    3d4e:	bfa8      	it	ge
    3d50:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3d52:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3d54:	68ea      	ldr	r2, [r5, #12]
    3d56:	7853      	ldrb	r3, [r2, #1]
    3d58:	f043 0301 	orr.w	r3, r3, #1
    3d5c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d5e:	3408      	adds	r4, #8
    3d60:	e7e7      	b.n	3d32 <z_sys_init_run_level+0xe>
    3d62:	bf00      	nop
    3d64:	000058fc 	.word	0x000058fc

00003d68 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3d68:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3d6a:	4b0a      	ldr	r3, [pc, #40]	; (3d94 <bg_thread_main+0x2c>)
    3d6c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3d6e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    3d70:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3d72:	f7ff ffd7 	bl	3d24 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3d76:	f000 fe11 	bl	499c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3d7a:	2004      	movs	r0, #4
    3d7c:	f7ff ffd2 	bl	3d24 <z_sys_init_run_level>

	z_init_static_threads();
    3d80:	f000 f8f0 	bl	3f64 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    3d84:	f7fc fb14 	bl	3b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3d88:	4a03      	ldr	r2, [pc, #12]	; (3d98 <bg_thread_main+0x30>)
    3d8a:	7b13      	ldrb	r3, [r2, #12]
    3d8c:	f023 0301 	bic.w	r3, r3, #1
    3d90:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3d92:	bd08      	pop	{r3, pc}
    3d94:	200007d8 	.word	0x200007d8
    3d98:	20000168 	.word	0x20000168

00003d9c <z_bss_zero>:
{
    3d9c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3d9e:	4803      	ldr	r0, [pc, #12]	; (3dac <z_bss_zero+0x10>)
    3da0:	4a03      	ldr	r2, [pc, #12]	; (3db0 <z_bss_zero+0x14>)
    3da2:	2100      	movs	r1, #0
    3da4:	1a12      	subs	r2, r2, r0
    3da6:	f001 fad9 	bl	535c <z_early_memset>
}
    3daa:	bd08      	pop	{r3, pc}
    3dac:	200000c8 	.word	0x200000c8
    3db0:	200007dc 	.word	0x200007dc

00003db4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3db4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3db6:	2300      	movs	r3, #0
{
    3db8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3dba:	2201      	movs	r2, #1
    3dbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3dc0:	4e13      	ldr	r6, [pc, #76]	; (3e10 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3dc2:	4d14      	ldr	r5, [pc, #80]	; (3e14 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3dc4:	9301      	str	r3, [sp, #4]
    3dc6:	220f      	movs	r2, #15
    3dc8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3dcc:	4912      	ldr	r1, [pc, #72]	; (3e18 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3dce:	2318      	movs	r3, #24
    3dd0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3dd4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3dd8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3dda:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3dde:	fb00 1104 	mla	r1, r0, r4, r1
    3de2:	4b0e      	ldr	r3, [pc, #56]	; (3e1c <z_init_cpu+0x68>)
    3de4:	9500      	str	r5, [sp, #0]
    3de6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3dea:	4630      	mov	r0, r6
    3dec:	f000 f888 	bl	3f00 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3df0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3df2:	4a0b      	ldr	r2, [pc, #44]	; (3e20 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3df4:	60ee      	str	r6, [r5, #12]
    3df6:	f023 0304 	bic.w	r3, r3, #4
    3dfa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3dfc:	f44f 6304 	mov.w	r3, #2112	; 0x840
    3e00:	fb04 3303 	mla	r3, r4, r3, r3
    3e04:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    3e06:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    3e08:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3e0a:	b006      	add	sp, #24
    3e0c:	bd70      	pop	{r4, r5, r6, pc}
    3e0e:	bf00      	nop
    3e10:	200000e8 	.word	0x200000e8
    3e14:	2000038c 	.word	0x2000038c
    3e18:	20001040 	.word	0x20001040
    3e1c:	0000401d 	.word	0x0000401d
    3e20:	20000800 	.word	0x20000800

00003e24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3e24:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3e26:	2000      	movs	r0, #0
{
    3e28:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3e2a:	f7ff ff7b 	bl	3d24 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3e2e:	4b2d      	ldr	r3, [pc, #180]	; (3ee4 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3e30:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3e34:	4d2c      	ldr	r5, [pc, #176]	; (3ee8 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3e36:	4e2d      	ldr	r6, [pc, #180]	; (3eec <z_cstart+0xc8>)
    3e38:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3e3a:	4f2d      	ldr	r7, [pc, #180]	; (3ef0 <z_cstart+0xcc>)
    3e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3e40:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3e42:	2400      	movs	r4, #0
    3e44:	23e0      	movs	r3, #224	; 0xe0
    3e46:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3e4a:	77ec      	strb	r4, [r5, #31]
    3e4c:	762c      	strb	r4, [r5, #24]
    3e4e:	766c      	strb	r4, [r5, #25]
    3e50:	76ac      	strb	r4, [r5, #26]
    3e52:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3e58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3e5c:	626b      	str	r3, [r5, #36]	; 0x24
    3e5e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3e62:	f7fd fdc5 	bl	19f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3e66:	f7fd fb91 	bl	158c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3e6a:	f04f 33ff 	mov.w	r3, #4294967295
    3e6e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3e70:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3e72:	f7fd fef7 	bl	1c64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3e76:	f7fd fe5d 	bl	1b34 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3e7a:	f240 1301 	movw	r3, #257	; 0x101
    3e7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3e82:	ab06      	add	r3, sp, #24
    3e84:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3e86:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3e8a:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3e8c:	f001 fa3f 	bl	530e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3e90:	2001      	movs	r0, #1
    3e92:	f7ff ff47 	bl	3d24 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3e96:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3e98:	4d16      	ldr	r5, [pc, #88]	; (3ef4 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3e9a:	f7ff ff43 	bl	3d24 <z_sys_init_run_level>
	z_sched_init();
    3e9e:	f000 fb15 	bl	44cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ea2:	4b15      	ldr	r3, [pc, #84]	; (3ef8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3ea4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ea6:	9305      	str	r3, [sp, #20]
    3ea8:	2301      	movs	r3, #1
    3eaa:	4914      	ldr	r1, [pc, #80]	; (3efc <z_cstart+0xd8>)
    3eac:	9400      	str	r4, [sp, #0]
    3eae:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3eb6:	463b      	mov	r3, r7
    3eb8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3ebc:	4628      	mov	r0, r5
    3ebe:	f000 f81f 	bl	3f00 <z_setup_new_thread>
    3ec2:	7b6a      	ldrb	r2, [r5, #13]
    3ec4:	4606      	mov	r6, r0
    3ec6:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3eca:	4628      	mov	r0, r5
    3ecc:	736a      	strb	r2, [r5, #13]
    3ece:	f001 fab2 	bl	5436 <z_ready_thread>
	z_init_cpu(0);
    3ed2:	4620      	mov	r0, r4
    3ed4:	f7ff ff6e 	bl	3db4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3ed8:	463a      	mov	r2, r7
    3eda:	4631      	mov	r1, r6
    3edc:	4628      	mov	r0, r5
    3ede:	f7fd fc4f 	bl	1780 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3ee2:	bf00      	nop
    3ee4:	20001040 	.word	0x20001040
    3ee8:	e000ed00 	.word	0xe000ed00
    3eec:	2000038c 	.word	0x2000038c
    3ef0:	00003d69 	.word	0x00003d69
    3ef4:	20000168 	.word	0x20000168
    3ef8:	00005a55 	.word	0x00005a55
    3efc:	200011c0 	.word	0x200011c0

00003f00 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3f00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3f04:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3f06:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3f08:	2604      	movs	r6, #4
    3f0a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3f0c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3f0e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3f10:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3f14:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3f16:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3f18:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3f1e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3f20:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3f24:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3f26:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3f2a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3f2e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3f30:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3f32:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3f34:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f38:	9202      	str	r2, [sp, #8]
    3f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3f3c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3f3e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f42:	9200      	str	r2, [sp, #0]
    3f44:	4642      	mov	r2, r8
{
    3f46:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3f48:	f7fd fbe8 	bl	171c <arch_new_thread>
	if (!_current) {
    3f4c:	4b04      	ldr	r3, [pc, #16]	; (3f60 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3f4e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3f50:	689b      	ldr	r3, [r3, #8]
    3f52:	b103      	cbz	r3, 3f56 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3f56:	6723      	str	r3, [r4, #112]	; 0x70
}
    3f58:	4640      	mov	r0, r8
    3f5a:	b004      	add	sp, #16
    3f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f60:	2000038c 	.word	0x2000038c

00003f64 <z_init_static_threads>:
{
    3f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f68:	4c29      	ldr	r4, [pc, #164]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3f6a:	4d2a      	ldr	r5, [pc, #168]	; (4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>)
{
    3f6c:	b087      	sub	sp, #28
    3f6e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3f70:	42ae      	cmp	r6, r5
    3f72:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3f76:	d30f      	bcc.n	3f98 <z_init_static_threads+0x34>
	k_sched_lock();
    3f78:	f000 fa78 	bl	446c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3f7c:	4c24      	ldr	r4, [pc, #144]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3f7e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3f82:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3f86:	f240 37e7 	movw	r7, #999	; 0x3e7
    3f8a:	42ac      	cmp	r4, r5
    3f8c:	d320      	bcc.n	3fd0 <z_init_static_threads+0x6c>
}
    3f8e:	b007      	add	sp, #28
    3f90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3f94:	f000 ba7e 	b.w	4494 <k_sched_unlock>
		z_setup_new_thread(
    3f98:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3f9c:	9305      	str	r3, [sp, #20]
    3f9e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3fa2:	9304      	str	r3, [sp, #16]
    3fa4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3fa8:	9303      	str	r3, [sp, #12]
    3faa:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3fae:	9302      	str	r3, [sp, #8]
    3fb0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3fb4:	9301      	str	r3, [sp, #4]
    3fb6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3fba:	9300      	str	r3, [sp, #0]
    3fbc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3fc0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3fc4:	f7ff ff9c 	bl	3f00 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3fc8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3fcc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3fce:	e7ce      	b.n	3f6e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3fd2:	1c5a      	adds	r2, r3, #1
    3fd4:	d00d      	beq.n	3ff2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3fda:	2100      	movs	r1, #0
    3fdc:	4638      	mov	r0, r7
    3fde:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3fe2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3fe6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3fea:	d104      	bne.n	3ff6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3fec:	4640      	mov	r0, r8
    3fee:	f000 f9ed 	bl	43cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3ff2:	3430      	adds	r4, #48	; 0x30
    3ff4:	e7c9      	b.n	3f8a <z_init_static_threads+0x26>
    3ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ffa:	2300      	movs	r3, #0
    3ffc:	f7fc f86e 	bl	dc <__aeabi_uldivmod>
    4000:	4602      	mov	r2, r0
    4002:	460b      	mov	r3, r1
    4004:	f108 0018 	add.w	r0, r8, #24
    4008:	4649      	mov	r1, r9
    400a:	f000 fbd5 	bl	47b8 <z_add_timeout>
    400e:	e7f0      	b.n	3ff2 <z_init_static_threads+0x8e>
    4010:	00005730 	.word	0x00005730
    4014:	00005730 	.word	0x00005730
    4018:	000053a3 	.word	0x000053a3

0000401c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    401c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    401e:	4c0b      	ldr	r4, [pc, #44]	; (404c <idle+0x30>)
	return !z_sys_post_kernel;
    4020:	4d0b      	ldr	r5, [pc, #44]	; (4050 <idle+0x34>)
	__asm__ volatile(
    4022:	f04f 0220 	mov.w	r2, #32
    4026:	f3ef 8311 	mrs	r3, BASEPRI
    402a:	f382 8812 	msr	BASEPRI_MAX, r2
    402e:	f3bf 8f6f 	isb	sy
    4032:	f001 fa58 	bl	54e6 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4036:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4038:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    403a:	b913      	cbnz	r3, 4042 <idle+0x26>
	arch_cpu_idle();
    403c:	f7fd faac 	bl	1598 <arch_cpu_idle>
}
    4040:	e7ef      	b.n	4022 <idle+0x6>
    4042:	f7fd f9d5 	bl	13f0 <pm_system_suspend>
    4046:	2800      	cmp	r0, #0
    4048:	d1eb      	bne.n	4022 <idle+0x6>
    404a:	e7f7      	b.n	403c <idle+0x20>
    404c:	2000038c 	.word	0x2000038c
    4050:	200007d8 	.word	0x200007d8

00004054 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4054:	b538      	push	{r3, r4, r5, lr}
    4056:	4604      	mov	r4, r0
    4058:	f04f 0320 	mov.w	r3, #32
    405c:	f3ef 8511 	mrs	r5, BASEPRI
    4060:	f383 8812 	msr	BASEPRI_MAX, r3
    4064:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4068:	f001 f9f5 	bl	5456 <z_unpend_first_thread>

	if (thread != NULL) {
    406c:	b148      	cbz	r0, 4082 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    406e:	2200      	movs	r2, #0
    4070:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4072:	f001 f9e0 	bl	5436 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4076:	4629      	mov	r1, r5
    4078:	4805      	ldr	r0, [pc, #20]	; (4090 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    407e:	f000 b993 	b.w	43a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4082:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4086:	429a      	cmp	r2, r3
    4088:	bf18      	it	ne
    408a:	3301      	addne	r3, #1
    408c:	60a3      	str	r3, [r4, #8]
}
    408e:	e7f2      	b.n	4076 <z_impl_k_sem_give+0x22>
    4090:	200007d9 	.word	0x200007d9

00004094 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4094:	b513      	push	{r0, r1, r4, lr}
    4096:	f04f 0420 	mov.w	r4, #32
    409a:	f3ef 8111 	mrs	r1, BASEPRI
    409e:	f384 8812 	msr	BASEPRI_MAX, r4
    40a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    40a6:	6884      	ldr	r4, [r0, #8]
    40a8:	b144      	cbz	r4, 40bc <z_impl_k_sem_take+0x28>
		sem->count--;
    40aa:	3c01      	subs	r4, #1
    40ac:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    40ae:	f381 8811 	msr	BASEPRI, r1
    40b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    40b6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    40b8:	b002      	add	sp, #8
    40ba:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    40bc:	ea52 0403 	orrs.w	r4, r2, r3
    40c0:	d106      	bne.n	40d0 <z_impl_k_sem_take+0x3c>
    40c2:	f381 8811 	msr	BASEPRI, r1
    40c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    40ca:	f06f 000f 	mvn.w	r0, #15
    40ce:	e7f3      	b.n	40b8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    40d0:	e9cd 2300 	strd	r2, r3, [sp]
    40d4:	4602      	mov	r2, r0
    40d6:	4802      	ldr	r0, [pc, #8]	; (40e0 <z_impl_k_sem_take+0x4c>)
    40d8:	f000 f948 	bl	436c <z_pend_curr>
	return ret;
    40dc:	e7ec      	b.n	40b8 <z_impl_k_sem_take+0x24>
    40de:	bf00      	nop
    40e0:	200007d9 	.word	0x200007d9

000040e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    40e4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    40e6:	4d07      	ldr	r5, [pc, #28]	; (4104 <z_reset_time_slice+0x20>)
    40e8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    40ea:	b154      	cbz	r4, 4102 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    40ec:	f7fe fd72 	bl	2bd4 <sys_clock_elapsed>
    40f0:	4b05      	ldr	r3, [pc, #20]	; (4108 <z_reset_time_slice+0x24>)
    40f2:	4404      	add	r4, r0
    40f4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    40f6:	6828      	ldr	r0, [r5, #0]
    40f8:	2100      	movs	r1, #0
	}
}
    40fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    40fe:	f001 ba02 	b.w	5506 <z_set_timeout_expiry>
}
    4102:	bd38      	pop	{r3, r4, r5, pc}
    4104:	200003bc 	.word	0x200003bc
    4108:	2000038c 	.word	0x2000038c

0000410c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    410c:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    410e:	4d0d      	ldr	r5, [pc, #52]	; (4144 <update_cache+0x38>)
    4110:	462b      	mov	r3, r5
    4112:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4116:	429c      	cmp	r4, r3
    4118:	d000      	beq.n	411c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    411a:	b904      	cbnz	r4, 411e <update_cache+0x12>
    411c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    411e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4120:	b938      	cbnz	r0, 4132 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    4122:	7b5a      	ldrb	r2, [r3, #13]
    4124:	06d2      	lsls	r2, r2, #27
    4126:	d104      	bne.n	4132 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4128:	69a2      	ldr	r2, [r4, #24]
    412a:	b912      	cbnz	r2, 4132 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    412c:	89da      	ldrh	r2, [r3, #14]
    412e:	2a7f      	cmp	r2, #127	; 0x7f
    4130:	d805      	bhi.n	413e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    4132:	429c      	cmp	r4, r3
    4134:	d002      	beq.n	413c <update_cache+0x30>
			z_reset_time_slice(thread);
    4136:	4620      	mov	r0, r4
    4138:	f7ff ffd4 	bl	40e4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    413c:	4623      	mov	r3, r4
    413e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    4140:	bd38      	pop	{r3, r4, r5, pc}
    4142:	bf00      	nop
    4144:	2000038c 	.word	0x2000038c

00004148 <move_thread_to_end_of_prio_q>:
{
    4148:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    414a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    414e:	7b43      	ldrb	r3, [r0, #13]
    4150:	2a00      	cmp	r2, #0
{
    4152:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4154:	da04      	bge.n	4160 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    415a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    415c:	f001 f90f 	bl	537e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4160:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4162:	4a15      	ldr	r2, [pc, #84]	; (41b8 <move_thread_to_end_of_prio_q+0x70>)
    4164:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4168:	4610      	mov	r0, r2
    416a:	734b      	strb	r3, [r1, #13]
    416c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4170:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4172:	4283      	cmp	r3, r0
    4174:	bf08      	it	eq
    4176:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4178:	b923      	cbnz	r3, 4184 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    417a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    417e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4180:	6251      	str	r1, [r2, #36]	; 0x24
}
    4182:	e00c      	b.n	419e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    4184:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4188:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    418c:	42b5      	cmp	r5, r6
    418e:	d00e      	beq.n	41ae <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4190:	42ae      	cmp	r6, r5
    4192:	dd0c      	ble.n	41ae <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4194:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4196:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    419a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    419c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    419e:	6890      	ldr	r0, [r2, #8]
    41a0:	1a43      	subs	r3, r0, r1
    41a2:	4258      	negs	r0, r3
}
    41a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    41a8:	4158      	adcs	r0, r3
    41aa:	f7ff bfaf 	b.w	410c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    41ae:	429c      	cmp	r4, r3
    41b0:	d0e3      	beq.n	417a <move_thread_to_end_of_prio_q+0x32>
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	e7e0      	b.n	4178 <move_thread_to_end_of_prio_q+0x30>
    41b6:	bf00      	nop
    41b8:	2000038c 	.word	0x2000038c

000041bc <ready_thread>:
{
    41bc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    41be:	f990 300d 	ldrsb.w	r3, [r0, #13]
    41c2:	7b42      	ldrb	r2, [r0, #13]
    41c4:	2b00      	cmp	r3, #0
    41c6:	db29      	blt.n	421c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    41c8:	06d3      	lsls	r3, r2, #27
    41ca:	d127      	bne.n	421c <ready_thread+0x60>
	return node->next != NULL;
    41cc:	6983      	ldr	r3, [r0, #24]
    41ce:	bb2b      	cbnz	r3, 421c <ready_thread+0x60>
	return list->head == list;
    41d0:	4913      	ldr	r1, [pc, #76]	; (4220 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    41d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    41d6:	7342      	strb	r2, [r0, #13]
    41d8:	460a      	mov	r2, r1
    41da:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41de:	4294      	cmp	r4, r2
    41e0:	bf18      	it	ne
    41e2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    41e4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41e6:	b923      	cbnz	r3, 41f2 <ready_thread+0x36>
	node->prev = tail;
    41e8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    41ec:	6020      	str	r0, [r4, #0]
	list->tail = node;
    41ee:	6248      	str	r0, [r1, #36]	; 0x24
}
    41f0:	e00c      	b.n	420c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    41f2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    41f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    41fa:	42b5      	cmp	r5, r6
    41fc:	d00a      	beq.n	4214 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    41fe:	42ae      	cmp	r6, r5
    4200:	dd08      	ble.n	4214 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    4202:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4204:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4208:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    420a:	6058      	str	r0, [r3, #4]
}
    420c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    420e:	2000      	movs	r0, #0
    4210:	f7ff bf7c 	b.w	410c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4214:	42a3      	cmp	r3, r4
    4216:	d0e7      	beq.n	41e8 <ready_thread+0x2c>
    4218:	681b      	ldr	r3, [r3, #0]
    421a:	e7e4      	b.n	41e6 <ready_thread+0x2a>
}
    421c:	bc70      	pop	{r4, r5, r6}
    421e:	4770      	bx	lr
    4220:	2000038c 	.word	0x2000038c

00004224 <unready_thread>:
{
    4224:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4226:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    422a:	7b43      	ldrb	r3, [r0, #13]
    422c:	2a00      	cmp	r2, #0
{
    422e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4230:	da04      	bge.n	423c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4236:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4238:	f001 f8a1 	bl	537e <sys_dlist_remove>
	update_cache(thread == _current);
    423c:	4b04      	ldr	r3, [pc, #16]	; (4250 <unready_thread+0x2c>)
    423e:	6898      	ldr	r0, [r3, #8]
    4240:	1a43      	subs	r3, r0, r1
    4242:	4258      	negs	r0, r3
    4244:	4158      	adcs	r0, r3
}
    4246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    424a:	f7ff bf5f 	b.w	410c <update_cache>
    424e:	bf00      	nop
    4250:	2000038c 	.word	0x2000038c

00004254 <pend_locked>:
{
    4254:	b570      	push	{r4, r5, r6, lr}
    4256:	4615      	mov	r5, r2
    4258:	461c      	mov	r4, r3
    425a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    425c:	f001 f8c3 	bl	53e6 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4260:	f1b4 3fff 	cmp.w	r4, #4294967295
    4264:	bf08      	it	eq
    4266:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    426a:	d008      	beq.n	427e <pend_locked+0x2a>
    426c:	462a      	mov	r2, r5
    426e:	4623      	mov	r3, r4
    4270:	f106 0018 	add.w	r0, r6, #24
    4274:	4902      	ldr	r1, [pc, #8]	; (4280 <pend_locked+0x2c>)
}
    4276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    427a:	f000 ba9d 	b.w	47b8 <z_add_timeout>
    427e:	bd70      	pop	{r4, r5, r6, pc}
    4280:	000053a3 	.word	0x000053a3

00004284 <k_sched_time_slice_set>:
{
    4284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4286:	4604      	mov	r4, r0
    4288:	460d      	mov	r5, r1
	__asm__ volatile(
    428a:	f04f 0320 	mov.w	r3, #32
    428e:	f3ef 8711 	mrs	r7, BASEPRI
    4292:	f383 8812 	msr	BASEPRI_MAX, r3
    4296:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    429a:	2600      	movs	r6, #0
    429c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    42a0:	f240 30e7 	movw	r0, #999	; 0x3e7
    42a4:	4631      	mov	r1, r6
    42a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42aa:	2300      	movs	r3, #0
    42ac:	fbe4 010c 	umlal	r0, r1, r4, ip
    42b0:	f7fb ff14 	bl	dc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    42b4:	42b4      	cmp	r4, r6
    42b6:	dd02      	ble.n	42be <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    42b8:	2802      	cmp	r0, #2
    42ba:	bfb8      	it	lt
    42bc:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    42be:	4a07      	ldr	r2, [pc, #28]	; (42dc <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    42c0:	4b07      	ldr	r3, [pc, #28]	; (42e0 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    42c2:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    42c4:	4a07      	ldr	r2, [pc, #28]	; (42e4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    42c6:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    42c8:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    42ca:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    42cc:	f7ff ff0a 	bl	40e4 <z_reset_time_slice>
	__asm__ volatile(
    42d0:	f387 8811 	msr	BASEPRI, r7
    42d4:	f3bf 8f6f 	isb	sy
}
    42d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42da:	bf00      	nop
    42dc:	200003bc 	.word	0x200003bc
    42e0:	2000038c 	.word	0x2000038c
    42e4:	200003b8 	.word	0x200003b8

000042e8 <z_time_slice>:
{
    42e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    42ea:	f04f 0320 	mov.w	r3, #32
    42ee:	f3ef 8511 	mrs	r5, BASEPRI
    42f2:	f383 8812 	msr	BASEPRI_MAX, r3
    42f6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    42fa:	4b17      	ldr	r3, [pc, #92]	; (4358 <z_time_slice+0x70>)
    42fc:	4a17      	ldr	r2, [pc, #92]	; (435c <z_time_slice+0x74>)
    42fe:	689c      	ldr	r4, [r3, #8]
    4300:	6811      	ldr	r1, [r2, #0]
    4302:	428c      	cmp	r4, r1
    4304:	d107      	bne.n	4316 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4306:	4620      	mov	r0, r4
    4308:	f7ff feec 	bl	40e4 <z_reset_time_slice>
	__asm__ volatile(
    430c:	f385 8811 	msr	BASEPRI, r5
    4310:	f3bf 8f6f 	isb	sy
}
    4314:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4316:	2100      	movs	r1, #0
    4318:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    431a:	4a11      	ldr	r2, [pc, #68]	; (4360 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    431c:	6812      	ldr	r2, [r2, #0]
    431e:	b1c2      	cbz	r2, 4352 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4320:	89e2      	ldrh	r2, [r4, #14]
    4322:	2a7f      	cmp	r2, #127	; 0x7f
    4324:	d815      	bhi.n	4352 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4326:	7b62      	ldrb	r2, [r4, #13]
    4328:	06d2      	lsls	r2, r2, #27
    432a:	d112      	bne.n	4352 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    432c:	4a0d      	ldr	r2, [pc, #52]	; (4364 <z_time_slice+0x7c>)
    432e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    4332:	6812      	ldr	r2, [r2, #0]
    4334:	4291      	cmp	r1, r2
    4336:	db0c      	blt.n	4352 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4338:	4a0b      	ldr	r2, [pc, #44]	; (4368 <z_time_slice+0x80>)
    433a:	4294      	cmp	r4, r2
    433c:	d009      	beq.n	4352 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    433e:	691a      	ldr	r2, [r3, #16]
    4340:	4282      	cmp	r2, r0
    4342:	dc03      	bgt.n	434c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    4344:	4620      	mov	r0, r4
    4346:	f7ff feff 	bl	4148 <move_thread_to_end_of_prio_q>
    434a:	e7dc      	b.n	4306 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    434c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    434e:	611a      	str	r2, [r3, #16]
    4350:	e7dc      	b.n	430c <z_time_slice+0x24>
    4352:	2200      	movs	r2, #0
    4354:	e7fb      	b.n	434e <z_time_slice+0x66>
    4356:	bf00      	nop
    4358:	2000038c 	.word	0x2000038c
    435c:	200003b4 	.word	0x200003b4
    4360:	200003bc 	.word	0x200003bc
    4364:	200003b8 	.word	0x200003b8
    4368:	200000e8 	.word	0x200000e8

0000436c <z_pend_curr>:
{
    436c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    436e:	480c      	ldr	r0, [pc, #48]	; (43a0 <z_pend_curr+0x34>)
    4370:	4d0c      	ldr	r5, [pc, #48]	; (43a4 <z_pend_curr+0x38>)
    4372:	6886      	ldr	r6, [r0, #8]
    4374:	602e      	str	r6, [r5, #0]
{
    4376:	460c      	mov	r4, r1
    4378:	4611      	mov	r1, r2
    437a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    437e:	f04f 0620 	mov.w	r6, #32
    4382:	f3ef 8511 	mrs	r5, BASEPRI
    4386:	f386 8812 	msr	BASEPRI_MAX, r6
    438a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    438e:	6880      	ldr	r0, [r0, #8]
    4390:	f7ff ff60 	bl	4254 <pend_locked>
	ret = arch_swap(key);
    4394:	4620      	mov	r0, r4
}
    4396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    439a:	f7fd b96b 	b.w	1674 <arch_swap>
    439e:	bf00      	nop
    43a0:	2000038c 	.word	0x2000038c
    43a4:	200003b4 	.word	0x200003b4

000043a8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    43a8:	b949      	cbnz	r1, 43be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    43aa:	f3ef 8005 	mrs	r0, IPSR
    43ae:	b930      	cbnz	r0, 43be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    43b0:	4b05      	ldr	r3, [pc, #20]	; (43c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    43b2:	69da      	ldr	r2, [r3, #28]
    43b4:	689b      	ldr	r3, [r3, #8]
    43b6:	429a      	cmp	r2, r3
    43b8:	d001      	beq.n	43be <z_reschedule+0x16>
    43ba:	f7fd b95b 	b.w	1674 <arch_swap>
	__asm__ volatile(
    43be:	f381 8811 	msr	BASEPRI, r1
    43c2:	f3bf 8f6f 	isb	sy
}
    43c6:	4770      	bx	lr
    43c8:	2000038c 	.word	0x2000038c

000043cc <z_sched_start>:
{
    43cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    43ce:	f04f 0220 	mov.w	r2, #32
    43d2:	f3ef 8411 	mrs	r4, BASEPRI
    43d6:	f382 8812 	msr	BASEPRI_MAX, r2
    43da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    43de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    43e0:	0751      	lsls	r1, r2, #29
    43e2:	d404      	bmi.n	43ee <z_sched_start+0x22>
	__asm__ volatile(
    43e4:	f384 8811 	msr	BASEPRI, r4
    43e8:	f3bf 8f6f 	isb	sy
}
    43ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    43ee:	f022 0204 	bic.w	r2, r2, #4
    43f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    43f4:	f7ff fee2 	bl	41bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    43f8:	4621      	mov	r1, r4
    43fa:	4802      	ldr	r0, [pc, #8]	; (4404 <z_sched_start+0x38>)
}
    43fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4400:	f7ff bfd2 	b.w	43a8 <z_reschedule>
    4404:	200007d9 	.word	0x200007d9

00004408 <z_impl_k_thread_suspend>:
{
    4408:	b570      	push	{r4, r5, r6, lr}
    440a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    440c:	3018      	adds	r0, #24
    440e:	f001 f854 	bl	54ba <z_abort_timeout>
	__asm__ volatile(
    4412:	f04f 0320 	mov.w	r3, #32
    4416:	f3ef 8611 	mrs	r6, BASEPRI
    441a:	f383 8812 	msr	BASEPRI_MAX, r3
    441e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4422:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4426:	7b63      	ldrb	r3, [r4, #13]
    4428:	2a00      	cmp	r2, #0
    442a:	da05      	bge.n	4438 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4430:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4432:	4620      	mov	r0, r4
    4434:	f000 ffa3 	bl	537e <sys_dlist_remove>
		update_cache(thread == _current);
    4438:	4d0b      	ldr	r5, [pc, #44]	; (4468 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    443a:	7b63      	ldrb	r3, [r4, #13]
    443c:	68a8      	ldr	r0, [r5, #8]
    443e:	f043 0310 	orr.w	r3, r3, #16
    4442:	7363      	strb	r3, [r4, #13]
    4444:	1b03      	subs	r3, r0, r4
    4446:	4258      	negs	r0, r3
    4448:	4158      	adcs	r0, r3
    444a:	f7ff fe5f 	bl	410c <update_cache>
	__asm__ volatile(
    444e:	f386 8811 	msr	BASEPRI, r6
    4452:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4456:	68ab      	ldr	r3, [r5, #8]
    4458:	42a3      	cmp	r3, r4
    445a:	d103      	bne.n	4464 <z_impl_k_thread_suspend+0x5c>
}
    445c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4460:	f001 b821 	b.w	54a6 <z_reschedule_unlocked>
}
    4464:	bd70      	pop	{r4, r5, r6, pc}
    4466:	bf00      	nop
    4468:	2000038c 	.word	0x2000038c

0000446c <k_sched_lock>:
	__asm__ volatile(
    446c:	f04f 0320 	mov.w	r3, #32
    4470:	f3ef 8111 	mrs	r1, BASEPRI
    4474:	f383 8812 	msr	BASEPRI_MAX, r3
    4478:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    447c:	4b04      	ldr	r3, [pc, #16]	; (4490 <k_sched_lock+0x24>)
    447e:	689a      	ldr	r2, [r3, #8]
    4480:	7bd3      	ldrb	r3, [r2, #15]
    4482:	3b01      	subs	r3, #1
    4484:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4486:	f381 8811 	msr	BASEPRI, r1
    448a:	f3bf 8f6f 	isb	sy
}
    448e:	4770      	bx	lr
    4490:	2000038c 	.word	0x2000038c

00004494 <k_sched_unlock>:
{
    4494:	b510      	push	{r4, lr}
	__asm__ volatile(
    4496:	f04f 0320 	mov.w	r3, #32
    449a:	f3ef 8411 	mrs	r4, BASEPRI
    449e:	f383 8812 	msr	BASEPRI_MAX, r3
    44a2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    44a6:	4b08      	ldr	r3, [pc, #32]	; (44c8 <k_sched_unlock+0x34>)
    44a8:	689a      	ldr	r2, [r3, #8]
    44aa:	7bd3      	ldrb	r3, [r2, #15]
    44ac:	3301      	adds	r3, #1
    44ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    44b0:	2000      	movs	r0, #0
    44b2:	f7ff fe2b 	bl	410c <update_cache>
	__asm__ volatile(
    44b6:	f384 8811 	msr	BASEPRI, r4
    44ba:	f3bf 8f6f 	isb	sy
}
    44be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    44c2:	f000 bff0 	b.w	54a6 <z_reschedule_unlocked>
    44c6:	bf00      	nop
    44c8:	2000038c 	.word	0x2000038c

000044cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    44cc:	4b04      	ldr	r3, [pc, #16]	; (44e0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    44ce:	2100      	movs	r1, #0
    44d0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    44d4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    44d8:	4608      	mov	r0, r1
    44da:	f7ff bed3 	b.w	4284 <k_sched_time_slice_set>
    44de:	bf00      	nop
    44e0:	2000038c 	.word	0x2000038c

000044e4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    44e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    44e6:	f04f 0320 	mov.w	r3, #32
    44ea:	f3ef 8511 	mrs	r5, BASEPRI
    44ee:	f383 8812 	msr	BASEPRI_MAX, r3
    44f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    44f6:	4919      	ldr	r1, [pc, #100]	; (455c <z_impl_k_yield+0x78>)
    44f8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44fa:	7b43      	ldrb	r3, [r0, #13]
    44fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4500:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4502:	f000 ff3c 	bl	537e <sys_dlist_remove>
	}
	queue_thread(_current);
    4506:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4508:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    450a:	4608      	mov	r0, r1
    450c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4510:	735a      	strb	r2, [r3, #13]
    4512:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    4516:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4518:	4282      	cmp	r2, r0
    451a:	bf08      	it	eq
    451c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    451e:	b922      	cbnz	r2, 452a <z_impl_k_yield+0x46>
	node->prev = tail;
    4520:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    4524:	6023      	str	r3, [r4, #0]
	list->tail = node;
    4526:	624b      	str	r3, [r1, #36]	; 0x24
}
    4528:	e00c      	b.n	4544 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    452a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    452e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    4532:	42be      	cmp	r6, r7
    4534:	d00e      	beq.n	4554 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4536:	42b7      	cmp	r7, r6
    4538:	dd0c      	ble.n	4554 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    453a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    453c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4540:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4542:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4544:	2001      	movs	r0, #1
    4546:	f7ff fde1 	bl	410c <update_cache>
    454a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    454c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4550:	f7fd b890 	b.w	1674 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4554:	42a2      	cmp	r2, r4
    4556:	d0e3      	beq.n	4520 <z_impl_k_yield+0x3c>
    4558:	6812      	ldr	r2, [r2, #0]
    455a:	e7e0      	b.n	451e <z_impl_k_yield+0x3a>
    455c:	2000038c 	.word	0x2000038c

00004560 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4560:	ea50 0301 	orrs.w	r3, r0, r1
{
    4564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4568:	4605      	mov	r5, r0
    456a:	460e      	mov	r6, r1
	if (ticks == 0) {
    456c:	d103      	bne.n	4576 <z_tick_sleep+0x16>
	z_impl_k_yield();
    456e:	f7ff ffb9 	bl	44e4 <z_impl_k_yield>
		k_yield();
		return 0;
    4572:	2000      	movs	r0, #0
    4574:	e02c      	b.n	45d0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    4576:	1c83      	adds	r3, r0, #2
    4578:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    457c:	db2a      	blt.n	45d4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    457e:	f000 ffde 	bl	553e <sys_clock_tick_get_32>
    4582:	182c      	adds	r4, r5, r0
    4584:	f04f 0320 	mov.w	r3, #32
    4588:	f3ef 8811 	mrs	r8, BASEPRI
    458c:	f383 8812 	msr	BASEPRI_MAX, r3
    4590:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4594:	4f11      	ldr	r7, [pc, #68]	; (45dc <z_tick_sleep+0x7c>)
    4596:	4b12      	ldr	r3, [pc, #72]	; (45e0 <z_tick_sleep+0x80>)
    4598:	68b8      	ldr	r0, [r7, #8]
    459a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    459c:	f7ff fe42 	bl	4224 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    45a0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    45a2:	4910      	ldr	r1, [pc, #64]	; (45e4 <z_tick_sleep+0x84>)
    45a4:	462a      	mov	r2, r5
    45a6:	4633      	mov	r3, r6
    45a8:	3018      	adds	r0, #24
    45aa:	f000 f905 	bl	47b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    45ae:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    45b0:	7b53      	ldrb	r3, [r2, #13]
    45b2:	f043 0310 	orr.w	r3, r3, #16
    45b6:	7353      	strb	r3, [r2, #13]
    45b8:	4640      	mov	r0, r8
    45ba:	f7fd f85b 	bl	1674 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    45be:	f000 ffbe 	bl	553e <sys_clock_tick_get_32>
    45c2:	1a20      	subs	r0, r4, r0
    45c4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    45c8:	2801      	cmp	r0, #1
    45ca:	f173 0300 	sbcs.w	r3, r3, #0
    45ce:	dbd0      	blt.n	4572 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    45d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    45d4:	f06f 0401 	mvn.w	r4, #1
    45d8:	1a24      	subs	r4, r4, r0
    45da:	e7d3      	b.n	4584 <z_tick_sleep+0x24>
    45dc:	2000038c 	.word	0x2000038c
    45e0:	200003b4 	.word	0x200003b4
    45e4:	000053a3 	.word	0x000053a3

000045e8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    45e8:	f1b1 3fff 	cmp.w	r1, #4294967295
    45ec:	bf08      	it	eq
    45ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    45f2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    45f4:	d106      	bne.n	4604 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    45f6:	4b08      	ldr	r3, [pc, #32]	; (4618 <z_impl_k_sleep+0x30>)
    45f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    45fa:	f7ff ff05 	bl	4408 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    45fe:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4602:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4604:	f7ff ffac 	bl	4560 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    460c:	fb80 0303 	smull	r0, r3, r0, r3
    4610:	0bc0      	lsrs	r0, r0, #15
    4612:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4616:	e7f4      	b.n	4602 <z_impl_k_sleep+0x1a>
    4618:	2000038c 	.word	0x2000038c

0000461c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    461c:	4b01      	ldr	r3, [pc, #4]	; (4624 <z_impl_z_current_get+0x8>)
    461e:	6898      	ldr	r0, [r3, #8]
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	2000038c 	.word	0x2000038c

00004628 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    462c:	4604      	mov	r4, r0
    462e:	f04f 0320 	mov.w	r3, #32
    4632:	f3ef 8611 	mrs	r6, BASEPRI
    4636:	f383 8812 	msr	BASEPRI_MAX, r3
    463a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    463e:	7b03      	ldrb	r3, [r0, #12]
    4640:	07d9      	lsls	r1, r3, #31
    4642:	d50b      	bpl.n	465c <z_thread_abort+0x34>
	__asm__ volatile(
    4644:	f386 8811 	msr	BASEPRI, r6
    4648:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    464c:	4040      	eors	r0, r0
    464e:	f380 8811 	msr	BASEPRI, r0
    4652:	f04f 0004 	mov.w	r0, #4
    4656:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    465c:	7b43      	ldrb	r3, [r0, #13]
    465e:	071a      	lsls	r2, r3, #28
    4660:	d504      	bpl.n	466c <z_thread_abort+0x44>
    4662:	f386 8811 	msr	BASEPRI, r6
    4666:	f3bf 8f6f 	isb	sy
    466a:	e7f5      	b.n	4658 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    466c:	f023 0220 	bic.w	r2, r3, #32
    4670:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4674:	09d2      	lsrs	r2, r2, #7
    4676:	d120      	bne.n	46ba <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4678:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    467a:	68a3      	ldr	r3, [r4, #8]
    467c:	b113      	cbz	r3, 4684 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    467e:	4620      	mov	r0, r4
    4680:	f000 fe85 	bl	538e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4684:	f104 0018 	add.w	r0, r4, #24
    4688:	f000 ff17 	bl	54ba <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    468c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4690:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4694:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4696:	42bd      	cmp	r5, r7
    4698:	d000      	beq.n	469c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    469a:	b9b5      	cbnz	r5, 46ca <z_thread_abort+0xa2>
		update_cache(1);
    469c:	2001      	movs	r0, #1
    469e:	f7ff fd35 	bl	410c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    46a2:	4b10      	ldr	r3, [pc, #64]	; (46e4 <z_thread_abort+0xbc>)
    46a4:	689b      	ldr	r3, [r3, #8]
    46a6:	42a3      	cmp	r3, r4
    46a8:	d1db      	bne.n	4662 <z_thread_abort+0x3a>
    46aa:	f3ef 8305 	mrs	r3, IPSR
    46ae:	2b00      	cmp	r3, #0
    46b0:	d1d7      	bne.n	4662 <z_thread_abort+0x3a>
    46b2:	4630      	mov	r0, r6
    46b4:	f7fc ffde 	bl	1674 <arch_swap>
	return ret;
    46b8:	e7d3      	b.n	4662 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46ba:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    46be:	f043 0308 	orr.w	r3, r3, #8
    46c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    46c4:	f000 fe5b 	bl	537e <sys_dlist_remove>
}
    46c8:	e7d7      	b.n	467a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    46ca:	4628      	mov	r0, r5
    46cc:	f000 fe5f 	bl	538e <unpend_thread_no_timeout>
    46d0:	f105 0018 	add.w	r0, r5, #24
    46d4:	f000 fef1 	bl	54ba <z_abort_timeout>
    46d8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    46dc:	4628      	mov	r0, r5
    46de:	f7ff fd6d 	bl	41bc <ready_thread>
    46e2:	e7d7      	b.n	4694 <z_thread_abort+0x6c>
    46e4:	2000038c 	.word	0x2000038c

000046e8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    46e8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    46ea:	4806      	ldr	r0, [pc, #24]	; (4704 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    46ec:	4a06      	ldr	r2, [pc, #24]	; (4708 <z_data_copy+0x20>)
    46ee:	4907      	ldr	r1, [pc, #28]	; (470c <z_data_copy+0x24>)
    46f0:	1a12      	subs	r2, r2, r0
    46f2:	f000 fe35 	bl	5360 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    46f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    46fa:	4a05      	ldr	r2, [pc, #20]	; (4710 <z_data_copy+0x28>)
    46fc:	4905      	ldr	r1, [pc, #20]	; (4714 <z_data_copy+0x2c>)
    46fe:	4806      	ldr	r0, [pc, #24]	; (4718 <z_data_copy+0x30>)
    4700:	f000 be2e 	b.w	5360 <z_early_memcpy>
    4704:	20000000 	.word	0x20000000
    4708:	200000c4 	.word	0x200000c4
    470c:	00005a8c 	.word	0x00005a8c
    4710:	00000000 	.word	0x00000000
    4714:	00005a8c 	.word	0x00005a8c
    4718:	20000000 	.word	0x20000000

0000471c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    471c:	4b03      	ldr	r3, [pc, #12]	; (472c <elapsed+0x10>)
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	b90b      	cbnz	r3, 4726 <elapsed+0xa>
    4722:	f7fe ba57 	b.w	2bd4 <sys_clock_elapsed>
}
    4726:	2000      	movs	r0, #0
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	200003c0 	.word	0x200003c0

00004730 <next_timeout>:

static int32_t next_timeout(void)
{
    4730:	b510      	push	{r4, lr}
	return list->head == list;
    4732:	4b11      	ldr	r3, [pc, #68]	; (4778 <next_timeout+0x48>)
    4734:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4736:	429c      	cmp	r4, r3
    4738:	d10a      	bne.n	4750 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    473a:	f7ff ffef 	bl	471c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    473e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4742:	4b0e      	ldr	r3, [pc, #56]	; (477c <next_timeout+0x4c>)
    4744:	691b      	ldr	r3, [r3, #16]
    4746:	b113      	cbz	r3, 474e <next_timeout+0x1e>
    4748:	4298      	cmp	r0, r3
    474a:	bfa8      	it	ge
    474c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    474e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    4750:	f7ff ffe4 	bl	471c <elapsed>
	if ((to == NULL) ||
    4754:	2c00      	cmp	r4, #0
    4756:	d0f2      	beq.n	473e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4758:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    475c:	1a1b      	subs	r3, r3, r0
    475e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4766:	f172 0100 	sbcs.w	r1, r2, #0
    476a:	dae8      	bge.n	473e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    476c:	2a00      	cmp	r2, #0
    476e:	bfac      	ite	ge
    4770:	4618      	movge	r0, r3
    4772:	2000      	movlt	r0, #0
    4774:	e7e5      	b.n	4742 <next_timeout+0x12>
    4776:	bf00      	nop
    4778:	200000b4 	.word	0x200000b4
    477c:	2000038c 	.word	0x2000038c

00004780 <remove_timeout>:
{
    4780:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4782:	b170      	cbz	r0, 47a2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4784:	4b0b      	ldr	r3, [pc, #44]	; (47b4 <remove_timeout+0x34>)
    4786:	685b      	ldr	r3, [r3, #4]
    4788:	4298      	cmp	r0, r3
    478a:	d00a      	beq.n	47a2 <remove_timeout+0x22>
    478c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    478e:	b143      	cbz	r3, 47a2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4790:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4794:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4798:	1912      	adds	r2, r2, r4
    479a:	eb41 0105 	adc.w	r1, r1, r5
    479e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    47a2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    47a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    47a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    47aa:	2300      	movs	r3, #0
	node->prev = NULL;
    47ac:	e9c0 3300 	strd	r3, r3, [r0]
}
    47b0:	bd30      	pop	{r4, r5, pc}
    47b2:	bf00      	nop
    47b4:	200000b4 	.word	0x200000b4

000047b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    47b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    47bc:	bf08      	it	eq
    47be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    47c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47c4:	4604      	mov	r4, r0
    47c6:	461d      	mov	r5, r3
    47c8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    47ca:	d061      	beq.n	4890 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    47cc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    47ce:	f04f 0320 	mov.w	r3, #32
    47d2:	f3ef 8711 	mrs	r7, BASEPRI
    47d6:	f383 8812 	msr	BASEPRI_MAX, r3
    47da:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    47de:	3201      	adds	r2, #1
    47e0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    47e4:	da24      	bge.n	4830 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    47e6:	4930      	ldr	r1, [pc, #192]	; (48a8 <z_add_timeout+0xf0>)
    47e8:	e9d1 2000 	ldrd	r2, r0, [r1]
    47ec:	f06f 0301 	mvn.w	r3, #1
    47f0:	1a9b      	subs	r3, r3, r2
    47f2:	f04f 32ff 	mov.w	r2, #4294967295
    47f6:	eb62 0000 	sbc.w	r0, r2, r0
    47fa:	1b9e      	subs	r6, r3, r6
    47fc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    4800:	2e01      	cmp	r6, #1
    4802:	f170 0300 	sbcs.w	r3, r0, #0
    4806:	da01      	bge.n	480c <z_add_timeout+0x54>
    4808:	2601      	movs	r6, #1
    480a:	2000      	movs	r0, #0
    480c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    4810:	4e26      	ldr	r6, [pc, #152]	; (48ac <z_add_timeout+0xf4>)
    4812:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    4816:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4818:	45b4      	cmp	ip, r6
    481a:	bf08      	it	eq
    481c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4820:	f1bc 0f00 	cmp.w	ip, #0
    4824:	d10d      	bne.n	4842 <z_add_timeout+0x8a>
	node->prev = tail;
    4826:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    482a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    482c:	6074      	str	r4, [r6, #4]
}
    482e:	e01c      	b.n	486a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    4830:	f7ff ff74 	bl	471c <elapsed>
    4834:	3601      	adds	r6, #1
    4836:	f145 0500 	adc.w	r5, r5, #0
    483a:	1836      	adds	r6, r6, r0
    483c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4840:	e7e4      	b.n	480c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4842:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    4846:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    484a:	4293      	cmp	r3, r2
    484c:	eb71 0e00 	sbcs.w	lr, r1, r0
    4850:	da1f      	bge.n	4892 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    4852:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    4854:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4858:	eb60 0001 	sbc.w	r0, r0, r1
    485c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    4860:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    4864:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4866:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    486a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    486c:	42b3      	cmp	r3, r6
    486e:	d00b      	beq.n	4888 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4870:	429c      	cmp	r4, r3
    4872:	d109      	bne.n	4888 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4874:	f7ff ff5c 	bl	4730 <next_timeout>

			if (next_time == 0 ||
    4878:	b118      	cbz	r0, 4882 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    487a:	4b0d      	ldr	r3, [pc, #52]	; (48b0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    487c:	691b      	ldr	r3, [r3, #16]
    487e:	4283      	cmp	r3, r0
    4880:	d002      	beq.n	4888 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    4882:	2100      	movs	r1, #0
    4884:	f7fe f974 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    4888:	f387 8811 	msr	BASEPRI, r7
    488c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    4892:	1a9b      	subs	r3, r3, r2
    4894:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    4898:	45ac      	cmp	ip, r5
    489a:	e9c4 3104 	strd	r3, r1, [r4, #16]
    489e:	d0c2      	beq.n	4826 <z_add_timeout+0x6e>
    48a0:	f8dc c000 	ldr.w	ip, [ip]
    48a4:	e7bc      	b.n	4820 <z_add_timeout+0x68>
    48a6:	bf00      	nop
    48a8:	200001e8 	.word	0x200001e8
    48ac:	200000b4 	.word	0x200000b4
    48b0:	2000038c 	.word	0x2000038c

000048b4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    48b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    48ba:	f7ff fd15 	bl	42e8 <z_time_slice>
	__asm__ volatile(
    48be:	f04f 0320 	mov.w	r3, #32
    48c2:	f3ef 8611 	mrs	r6, BASEPRI
    48c6:	f383 8812 	msr	BASEPRI_MAX, r3
    48ca:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    48ce:	4f23      	ldr	r7, [pc, #140]	; (495c <sys_clock_announce+0xa8>)
	return list->head == list;
    48d0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4960 <sys_clock_announce+0xac>
    48d4:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    48d8:	4a22      	ldr	r2, [pc, #136]	; (4964 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    48da:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48dc:	4540      	cmp	r0, r8
		curr_tick += dt;
    48de:	e9d2 3e00 	ldrd	r3, lr, [r2]
    48e2:	ea4f 71e4 	mov.w	r1, r4, asr #31
    48e6:	d00b      	beq.n	4900 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    48e8:	b150      	cbz	r0, 4900 <sys_clock_announce+0x4c>
    48ea:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    48ee:	42ac      	cmp	r4, r5
    48f0:	eb71 090c 	sbcs.w	r9, r1, ip
    48f4:	da16      	bge.n	4924 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    48f6:	1b2d      	subs	r5, r5, r4
    48f8:	eb6c 0c01 	sbc.w	ip, ip, r1
    48fc:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4900:	18e3      	adds	r3, r4, r3
    4902:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    4906:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4908:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    490c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    490e:	f7ff ff0f 	bl	4730 <next_timeout>
    4912:	4621      	mov	r1, r4
    4914:	f7fe f92c 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    4918:	f386 8811 	msr	BASEPRI, r6
    491c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4924:	18eb      	adds	r3, r5, r3
    4926:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    492a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    492e:	2200      	movs	r2, #0
    4930:	2300      	movs	r3, #0
    4932:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    4936:	f7ff ff23 	bl	4780 <remove_timeout>
    493a:	f386 8811 	msr	BASEPRI, r6
    493e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4942:	6883      	ldr	r3, [r0, #8]
    4944:	4798      	blx	r3
	__asm__ volatile(
    4946:	f04f 0320 	mov.w	r3, #32
    494a:	f3ef 8611 	mrs	r6, BASEPRI
    494e:	f383 8812 	msr	BASEPRI_MAX, r3
    4952:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4956:	683c      	ldr	r4, [r7, #0]
    4958:	1b64      	subs	r4, r4, r5
    495a:	e7bb      	b.n	48d4 <sys_clock_announce+0x20>
    495c:	200003c0 	.word	0x200003c0
    4960:	200000b4 	.word	0x200000b4
    4964:	200001e8 	.word	0x200001e8

00004968 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4968:	b510      	push	{r4, lr}
    496a:	f04f 0320 	mov.w	r3, #32
    496e:	f3ef 8411 	mrs	r4, BASEPRI
    4972:	f383 8812 	msr	BASEPRI_MAX, r3
    4976:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    497a:	f7ff fecf 	bl	471c <elapsed>
    497e:	4a06      	ldr	r2, [pc, #24]	; (4998 <sys_clock_tick_get+0x30>)
    4980:	4603      	mov	r3, r0
    4982:	e9d2 0100 	ldrd	r0, r1, [r2]
    4986:	1818      	adds	r0, r3, r0
    4988:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    498c:	f384 8811 	msr	BASEPRI, r4
    4990:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4994:	bd10      	pop	{r4, pc}
    4996:	bf00      	nop
    4998:	200001e8 	.word	0x200001e8

0000499c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    499c:	4801      	ldr	r0, [pc, #4]	; (49a4 <boot_banner+0x8>)
    499e:	f000 b805 	b.w	49ac <printk>
    49a2:	bf00      	nop
    49a4:	00005a5d 	.word	0x00005a5d

000049a8 <arch_printk_char_out>:
}
    49a8:	2000      	movs	r0, #0
    49aa:	4770      	bx	lr

000049ac <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    49ac:	b40f      	push	{r0, r1, r2, r3}
    49ae:	b507      	push	{r0, r1, r2, lr}
    49b0:	a904      	add	r1, sp, #16
    49b2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    49b6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    49b8:	f7fb fd26 	bl	408 <vprintk>

	va_end(ap);
}
    49bc:	b003      	add	sp, #12
    49be:	f85d eb04 	ldr.w	lr, [sp], #4
    49c2:	b004      	add	sp, #16
    49c4:	4770      	bx	lr

000049c6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    49c6:	4604      	mov	r4, r0
    49c8:	b508      	push	{r3, lr}
    49ca:	4608      	mov	r0, r1
    49cc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    49ce:	461a      	mov	r2, r3
    49d0:	47a0      	blx	r4
	return z_impl_z_current_get();
    49d2:	f7ff fe23 	bl	461c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    49d6:	f7fd f897 	bl	1b08 <z_impl_k_thread_abort>

000049da <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    49da:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    49dc:	f013 0307 	ands.w	r3, r3, #7
    49e0:	d105      	bne.n	49ee <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    49e2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    49e4:	2b00      	cmp	r3, #0
    49e6:	bf0c      	ite	eq
    49e8:	2000      	moveq	r0, #0
    49ea:	2003      	movne	r0, #3
    49ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    49ee:	2b02      	cmp	r3, #2
    49f0:	d105      	bne.n	49fe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    49f2:	8b40      	ldrh	r0, [r0, #26]
    49f4:	fab0 f080 	clz	r0, r0
    49f8:	0940      	lsrs	r0, r0, #5
    49fa:	0080      	lsls	r0, r0, #2
    49fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    49fe:	2b01      	cmp	r3, #1
    4a00:	d105      	bne.n	4a0e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4a02:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4a04:	2b00      	cmp	r3, #0
    4a06:	bf0c      	ite	eq
    4a08:	2000      	moveq	r0, #0
    4a0a:	2005      	movne	r0, #5
    4a0c:	4770      	bx	lr
	int evt = EVT_NOP;
    4a0e:	2000      	movs	r0, #0
}
    4a10:	4770      	bx	lr

00004a12 <validate_args>:
{
    4a12:	b510      	push	{r4, lr}
    4a14:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4a16:	b100      	cbz	r0, 4a1a <validate_args+0x8>
    4a18:	b911      	cbnz	r1, 4a20 <validate_args+0xe>
		return -EINVAL;
    4a1a:	f06f 0015 	mvn.w	r0, #21
}
    4a1e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    4a20:	1d08      	adds	r0, r1, #4
    4a22:	f000 f895 	bl	4b50 <sys_notify_validate>
	if ((rv == 0)
    4a26:	2800      	cmp	r0, #0
    4a28:	d1f9      	bne.n	4a1e <validate_args+0xc>
	    && ((cli->notify.flags
    4a2a:	68a3      	ldr	r3, [r4, #8]
    4a2c:	2b03      	cmp	r3, #3
    4a2e:	d9f6      	bls.n	4a1e <validate_args+0xc>
    4a30:	e7f3      	b.n	4a1a <validate_args+0x8>

00004a32 <notify_one>:
{
    4a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a36:	460d      	mov	r5, r1
    4a38:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a3a:	4619      	mov	r1, r3
    4a3c:	1d28      	adds	r0, r5, #4
{
    4a3e:	4690      	mov	r8, r2
    4a40:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a42:	f000 f896 	bl	4b72 <sys_notify_finalize>
	if (cb) {
    4a46:	4604      	mov	r4, r0
    4a48:	b138      	cbz	r0, 4a5a <notify_one+0x28>
		cb(mgr, cli, state, res);
    4a4a:	4633      	mov	r3, r6
    4a4c:	4642      	mov	r2, r8
    4a4e:	4629      	mov	r1, r5
    4a50:	4638      	mov	r0, r7
    4a52:	46a4      	mov	ip, r4
}
    4a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4a58:	4760      	bx	ip
}
    4a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a5e <transition_complete>:
{
    4a5e:	b410      	push	{r4}
	__asm__ volatile(
    4a60:	f04f 0420 	mov.w	r4, #32
    4a64:	f3ef 8211 	mrs	r2, BASEPRI
    4a68:	f384 8812 	msr	BASEPRI_MAX, r4
    4a6c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4a70:	6141      	str	r1, [r0, #20]
}
    4a72:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4a74:	2101      	movs	r1, #1
    4a76:	f7fb bcd5 	b.w	424 <process_event>

00004a7a <onoff_manager_init>:
{
    4a7a:	b538      	push	{r3, r4, r5, lr}
    4a7c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4a7e:	4605      	mov	r5, r0
    4a80:	b158      	cbz	r0, 4a9a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4a82:	b151      	cbz	r1, 4a9a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4a84:	680b      	ldr	r3, [r1, #0]
    4a86:	b143      	cbz	r3, 4a9a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4a88:	684b      	ldr	r3, [r1, #4]
    4a8a:	b133      	cbz	r3, 4a9a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4a8c:	221c      	movs	r2, #28
    4a8e:	2100      	movs	r1, #0
    4a90:	f000 f93f 	bl	4d12 <memset>
    4a94:	612c      	str	r4, [r5, #16]
	return 0;
    4a96:	2000      	movs	r0, #0
}
    4a98:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4a9a:	f06f 0015 	mvn.w	r0, #21
    4a9e:	e7fb      	b.n	4a98 <onoff_manager_init+0x1e>

00004aa0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4aa0:	b570      	push	{r4, r5, r6, lr}
    4aa2:	4605      	mov	r5, r0
    4aa4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4aa6:	f7ff ffb4 	bl	4a12 <validate_args>

	if (rv < 0) {
    4aaa:	1e04      	subs	r4, r0, #0
    4aac:	db15      	blt.n	4ada <onoff_request+0x3a>
    4aae:	f04f 0320 	mov.w	r3, #32
    4ab2:	f3ef 8211 	mrs	r2, BASEPRI
    4ab6:	f383 8812 	msr	BASEPRI_MAX, r3
    4aba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4abe:	8b6b      	ldrh	r3, [r5, #26]
    4ac0:	8b2c      	ldrh	r4, [r5, #24]
    4ac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4ac6:	428b      	cmp	r3, r1
    4ac8:	f004 0407 	and.w	r4, r4, #7
    4acc:	d107      	bne.n	4ade <onoff_request+0x3e>
	__asm__ volatile(
    4ace:	f382 8811 	msr	BASEPRI, r2
    4ad2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    4ad6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4ada:	4620      	mov	r0, r4
    4adc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4ade:	2c02      	cmp	r4, #2
    4ae0:	d10c      	bne.n	4afc <onoff_request+0x5c>
		mgr->refs += 1U;
    4ae2:	3301      	adds	r3, #1
    4ae4:	836b      	strh	r3, [r5, #26]
    4ae6:	f382 8811 	msr	BASEPRI, r2
    4aea:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4aee:	2300      	movs	r3, #0
    4af0:	4622      	mov	r2, r4
    4af2:	4631      	mov	r1, r6
    4af4:	4628      	mov	r0, r5
    4af6:	f7ff ff9c 	bl	4a32 <notify_one>
    4afa:	e7ee      	b.n	4ada <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4afc:	2c06      	cmp	r4, #6
    4afe:	d814      	bhi.n	4b2a <onoff_request+0x8a>
    4b00:	e8df f004 	tbb	[pc, r4]
    4b04:	13131304 	.word	0x13131304
    4b08:	1a04      	.short	0x1a04
    4b0a:	04          	.byte	0x04
    4b0b:	00          	.byte	0x00
	parent->next = child;
    4b0c:	2300      	movs	r3, #0
    4b0e:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4b10:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4b12:	b93b      	cbnz	r3, 4b24 <onoff_request+0x84>
	list->head = node;
    4b14:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4b18:	b9ac      	cbnz	r4, 4b46 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4b1a:	2102      	movs	r1, #2
    4b1c:	4628      	mov	r0, r5
    4b1e:	f7fb fc81 	bl	424 <process_event>
    4b22:	e7da      	b.n	4ada <onoff_request+0x3a>
	parent->next = child;
    4b24:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4b26:	606e      	str	r6, [r5, #4]
}
    4b28:	e7f6      	b.n	4b18 <onoff_request+0x78>
    4b2a:	f382 8811 	msr	BASEPRI, r2
    4b2e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4b32:	f06f 0404 	mvn.w	r4, #4
    4b36:	e7d0      	b.n	4ada <onoff_request+0x3a>
    4b38:	f382 8811 	msr	BASEPRI, r2
    4b3c:	f3bf 8f6f 	isb	sy
    4b40:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4b44:	e7c9      	b.n	4ada <onoff_request+0x3a>
    4b46:	f382 8811 	msr	BASEPRI, r2
    4b4a:	f3bf 8f6f 	isb	sy
		if (notify) {
    4b4e:	e7c4      	b.n	4ada <onoff_request+0x3a>

00004b50 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4b50:	4603      	mov	r3, r0
    4b52:	b158      	cbz	r0, 4b6c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b54:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4b56:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4b5a:	2a01      	cmp	r2, #1
    4b5c:	d003      	beq.n	4b66 <sys_notify_validate+0x16>
    4b5e:	2a03      	cmp	r2, #3
    4b60:	d104      	bne.n	4b6c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4b62:	6802      	ldr	r2, [r0, #0]
    4b64:	b112      	cbz	r2, 4b6c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4b66:	2000      	movs	r0, #0
    4b68:	6098      	str	r0, [r3, #8]
    4b6a:	4770      	bx	lr
    4b6c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4b70:	4770      	bx	lr

00004b72 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b72:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4b74:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4b76:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4b7a:	2a03      	cmp	r2, #3
    4b7c:	f04f 0200 	mov.w	r2, #0
{
    4b80:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4b82:	bf0c      	ite	eq
    4b84:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    4b86:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4b88:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4b8a:	4770      	bx	lr

00004b8c <_ldiv5>:
	uint32_t v_lo = *v;
    4b8c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    4b90:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    4b92:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    4b96:	fba2 2403 	umull	r2, r4, r2, r3
    4b9a:	18d5      	adds	r5, r2, r3
    4b9c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    4ba0:	fba1 1303 	umull	r1, r3, r1, r3
    4ba4:	1852      	adds	r2, r2, r1
    4ba6:	eb44 0403 	adc.w	r4, r4, r3
    4baa:	1952      	adds	r2, r2, r5
    4bac:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    4bb0:	1889      	adds	r1, r1, r2
    4bb2:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    4bb6:	e9c0 1300 	strd	r1, r3, [r0]
}
    4bba:	bd30      	pop	{r4, r5, pc}

00004bbc <_get_digit>:
{
    4bbc:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    4bbe:	680a      	ldr	r2, [r1, #0]
    4bc0:	2a00      	cmp	r2, #0
{
    4bc2:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    4bc4:	dd0f      	ble.n	4be6 <_get_digit+0x2a>
		--*digit_count;
    4bc6:	3a01      	subs	r2, #1
    4bc8:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    4bca:	681a      	ldr	r2, [r3, #0]
    4bcc:	6844      	ldr	r4, [r0, #4]
    4bce:	200a      	movs	r0, #10
    4bd0:	fba2 1200 	umull	r1, r2, r2, r0
    4bd4:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    4bd8:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    4bda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    4bde:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    4be2:	3030      	adds	r0, #48	; 0x30
}
    4be4:	bd10      	pop	{r4, pc}
		rval = '0';
    4be6:	2030      	movs	r0, #48	; 0x30
    4be8:	e7fc      	b.n	4be4 <_get_digit+0x28>

00004bea <encode_uint>:
{
    4bea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4bf0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4bf2:	2b6f      	cmp	r3, #111	; 0x6f
{
    4bf4:	4680      	mov	r8, r0
    4bf6:	460f      	mov	r7, r1
    4bf8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4bfa:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4bfe:	d029      	beq.n	4c54 <encode_uint+0x6a>
    4c00:	d824      	bhi.n	4c4c <encode_uint+0x62>
		return 10;
    4c02:	2b58      	cmp	r3, #88	; 0x58
    4c04:	bf0c      	ite	eq
    4c06:	2610      	moveq	r6, #16
    4c08:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4c0a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4c0e:	4632      	mov	r2, r6
    4c10:	2300      	movs	r3, #0
    4c12:	4640      	mov	r0, r8
    4c14:	4639      	mov	r1, r7
    4c16:	f7fb fa61 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c1a:	2a09      	cmp	r2, #9
    4c1c:	b2d4      	uxtb	r4, r2
    4c1e:	d81e      	bhi.n	4c5e <encode_uint+0x74>
    4c20:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4c22:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c24:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4c26:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c2a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4c2e:	d301      	bcc.n	4c34 <encode_uint+0x4a>
    4c30:	45d1      	cmp	r9, sl
    4c32:	d811      	bhi.n	4c58 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4c34:	782b      	ldrb	r3, [r5, #0]
    4c36:	069b      	lsls	r3, r3, #26
    4c38:	d505      	bpl.n	4c46 <encode_uint+0x5c>
		if (radix == 8) {
    4c3a:	2e08      	cmp	r6, #8
    4c3c:	d115      	bne.n	4c6a <encode_uint+0x80>
			conv->altform_0 = true;
    4c3e:	78ab      	ldrb	r3, [r5, #2]
    4c40:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4c44:	70ab      	strb	r3, [r5, #2]
}
    4c46:	4648      	mov	r0, r9
    4c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4c4c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4c50:	2b70      	cmp	r3, #112	; 0x70
    4c52:	e7d7      	b.n	4c04 <encode_uint+0x1a>
	switch (specifier) {
    4c54:	2608      	movs	r6, #8
    4c56:	e7d8      	b.n	4c0a <encode_uint+0x20>
		value /= radix;
    4c58:	4680      	mov	r8, r0
    4c5a:	460f      	mov	r7, r1
    4c5c:	e7d7      	b.n	4c0e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c5e:	f1bb 0f19 	cmp.w	fp, #25
    4c62:	bf94      	ite	ls
    4c64:	3437      	addls	r4, #55	; 0x37
    4c66:	3457      	addhi	r4, #87	; 0x57
    4c68:	e7db      	b.n	4c22 <encode_uint+0x38>
		} else if (radix == 16) {
    4c6a:	2e10      	cmp	r6, #16
    4c6c:	d1eb      	bne.n	4c46 <encode_uint+0x5c>
			conv->altform_0c = true;
    4c6e:	78ab      	ldrb	r3, [r5, #2]
    4c70:	f043 0310 	orr.w	r3, r3, #16
    4c74:	e7e6      	b.n	4c44 <encode_uint+0x5a>

00004c76 <outs>:
{
    4c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c7a:	4607      	mov	r7, r0
    4c7c:	4688      	mov	r8, r1
    4c7e:	4615      	mov	r5, r2
    4c80:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4c82:	4614      	mov	r4, r2
    4c84:	42b4      	cmp	r4, r6
    4c86:	d305      	bcc.n	4c94 <outs+0x1e>
    4c88:	b10e      	cbz	r6, 4c8e <outs+0x18>
	return (int)count;
    4c8a:	1b60      	subs	r0, r4, r5
    4c8c:	e008      	b.n	4ca0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4c8e:	7823      	ldrb	r3, [r4, #0]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d0fa      	beq.n	4c8a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4c94:	f814 0b01 	ldrb.w	r0, [r4], #1
    4c98:	4641      	mov	r1, r8
    4c9a:	47b8      	blx	r7
		if (rc < 0) {
    4c9c:	2800      	cmp	r0, #0
    4c9e:	daf1      	bge.n	4c84 <outs+0xe>
}
    4ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004ca4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4ca4:	4770      	bx	lr

00004ca6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4ca6:	f000 bb3e 	b.w	5326 <z_fatal_error>

00004caa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4caa:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4cac:	6800      	ldr	r0, [r0, #0]
    4cae:	f000 bb3a 	b.w	5326 <z_fatal_error>

00004cb2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4cb2:	2100      	movs	r1, #0
    4cb4:	2001      	movs	r0, #1
    4cb6:	f7ff bff6 	b.w	4ca6 <z_arm_fatal_error>

00004cba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4cba:	b508      	push	{r3, lr}
	handler();
    4cbc:	f7fc fcba 	bl	1634 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4cc4:	f7fc bd92 	b.w	17ec <z_arm_exc_exit>

00004cc8 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4cc8:	3901      	subs	r1, #1
    4cca:	4603      	mov	r3, r0
    4ccc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4cd0:	b90a      	cbnz	r2, 4cd6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4cd2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4cd4:	4770      	bx	lr
		*d = *s;
    4cd6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4cda:	e7f7      	b.n	4ccc <strcpy+0x4>

00004cdc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4cdc:	4603      	mov	r3, r0
	size_t n = 0;
    4cde:	2000      	movs	r0, #0

	while (*s != '\0') {
    4ce0:	5c1a      	ldrb	r2, [r3, r0]
    4ce2:	b902      	cbnz	r2, 4ce6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4ce4:	4770      	bx	lr
		n++;
    4ce6:	3001      	adds	r0, #1
    4ce8:	e7fa      	b.n	4ce0 <strlen+0x4>

00004cea <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4cea:	4603      	mov	r3, r0
	size_t n = 0;
    4cec:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4cee:	5c1a      	ldrb	r2, [r3, r0]
    4cf0:	b10a      	cbz	r2, 4cf6 <strnlen+0xc>
    4cf2:	4288      	cmp	r0, r1
    4cf4:	d100      	bne.n	4cf8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4cf6:	4770      	bx	lr
		n++;
    4cf8:	3001      	adds	r0, #1
    4cfa:	e7f8      	b.n	4cee <strnlen+0x4>

00004cfc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4cfc:	b510      	push	{r4, lr}
    4cfe:	1e43      	subs	r3, r0, #1
    4d00:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4d02:	4291      	cmp	r1, r2
    4d04:	d100      	bne.n	4d08 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4d06:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4d08:	f811 4b01 	ldrb.w	r4, [r1], #1
    4d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4d10:	e7f7      	b.n	4d02 <memcpy+0x6>

00004d12 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4d12:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4d14:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4d16:	4603      	mov	r3, r0
	while (n > 0) {
    4d18:	4293      	cmp	r3, r2
    4d1a:	d100      	bne.n	4d1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4d1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4d1e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4d22:	e7f9      	b.n	4d18 <memset+0x6>

00004d24 <_stdout_hook_default>:
}
    4d24:	f04f 30ff 	mov.w	r0, #4294967295
    4d28:	4770      	bx	lr

00004d2a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4d2a:	2806      	cmp	r0, #6
    4d2c:	d108      	bne.n	4d40 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d32:	2201      	movs	r2, #1
    4d34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4d38:	f3bf 8f4f 	dsb	sy
        __WFE();
    4d3c:	bf20      	wfe
    while (true)
    4d3e:	e7fd      	b.n	4d3c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    4d40:	4770      	bx	lr

00004d42 <pm_state_exit_post_ops>:
    4d42:	2300      	movs	r3, #0
    4d44:	f383 8811 	msr	BASEPRI, r3
    4d48:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4d4c:	4770      	bx	lr

00004d4e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4d4e:	6903      	ldr	r3, [r0, #16]
    4d50:	b2c9      	uxtb	r1, r1
    4d52:	220c      	movs	r2, #12
    4d54:	fb01 3302 	mla	r3, r1, r2, r3
    4d58:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4d5a:	f000 0007 	and.w	r0, r0, #7
    4d5e:	4770      	bx	lr

00004d60 <set_on_state>:
	__asm__ volatile(
    4d60:	f04f 0320 	mov.w	r3, #32
    4d64:	f3ef 8211 	mrs	r2, BASEPRI
    4d68:	f383 8812 	msr	BASEPRI_MAX, r3
    4d6c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4d70:	6803      	ldr	r3, [r0, #0]
    4d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4d76:	f043 0302 	orr.w	r3, r3, #2
    4d7a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4d7c:	f382 8811 	msr	BASEPRI, r2
    4d80:	f3bf 8f6f 	isb	sy
}
    4d84:	4770      	bx	lr

00004d86 <stop>:
{
    4d86:	b570      	push	{r4, r5, r6, lr}
    4d88:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4d8a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4d8c:	f04f 0420 	mov.w	r4, #32
    4d90:	f3ef 8511 	mrs	r5, BASEPRI
    4d94:	f384 8812 	msr	BASEPRI_MAX, r4
    4d98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4d9c:	260c      	movs	r6, #12
    4d9e:	fb06 3401 	mla	r4, r6, r1, r3
    4da2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4da4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4da8:	d008      	beq.n	4dbc <stop+0x36>
    4daa:	42a2      	cmp	r2, r4
    4dac:	d006      	beq.n	4dbc <stop+0x36>
	__asm__ volatile(
    4dae:	f385 8811 	msr	BASEPRI, r5
    4db2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4db6:	f04f 30ff 	mov.w	r0, #4294967295
}
    4dba:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4dbc:	fb06 3301 	mla	r3, r6, r1, r3
    4dc0:	2201      	movs	r2, #1
    4dc2:	641a      	str	r2, [r3, #64]	; 0x40
    4dc4:	f385 8811 	msr	BASEPRI, r5
    4dc8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4dcc:	6843      	ldr	r3, [r0, #4]
    4dce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4dd2:	685b      	ldr	r3, [r3, #4]
    4dd4:	4798      	blx	r3
	return 0;
    4dd6:	2000      	movs	r0, #0
    4dd8:	e7ef      	b.n	4dba <stop+0x34>

00004dda <api_stop>:
	return stop(dev, subsys, CTX_API);
    4dda:	2280      	movs	r2, #128	; 0x80
    4ddc:	f7ff bfd3 	b.w	4d86 <stop>

00004de0 <async_start>:
{
    4de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4de2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4de4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4de6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4de8:	f04f 0520 	mov.w	r5, #32
    4dec:	f3ef 8611 	mrs	r6, BASEPRI
    4df0:	f385 8812 	msr	BASEPRI_MAX, r5
    4df4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4df8:	250c      	movs	r5, #12
    4dfa:	fb05 4401 	mla	r4, r5, r1, r4
    4dfe:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4e00:	f005 0c07 	and.w	ip, r5, #7
    4e04:	f1bc 0f01 	cmp.w	ip, #1
    4e08:	d10c      	bne.n	4e24 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4e0a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    4e0c:	f386 8811 	msr	BASEPRI, r6
    4e10:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4e14:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4e18:	6843      	ldr	r3, [r0, #4]
    4e1a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4e1e:	4798      	blx	r3
	return 0;
    4e20:	2000      	movs	r0, #0
}
    4e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4e24:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4e28:	42af      	cmp	r7, r5
    4e2a:	f386 8811 	msr	BASEPRI, r6
    4e2e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4e32:	bf0c      	ite	eq
    4e34:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4e38:	f04f 30ff 	movne.w	r0, #4294967295
    4e3c:	e7f1      	b.n	4e22 <async_start+0x42>

00004e3e <api_start>:
{
    4e3e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4e40:	2480      	movs	r4, #128	; 0x80
    4e42:	9400      	str	r4, [sp, #0]
    4e44:	f7ff ffcc 	bl	4de0 <async_start>
}
    4e48:	b002      	add	sp, #8
    4e4a:	bd10      	pop	{r4, pc}

00004e4c <onoff_started_callback>:
{
    4e4c:	b410      	push	{r4}
	return &data->mgr[type];
    4e4e:	6900      	ldr	r0, [r0, #16]
    4e50:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4e52:	241c      	movs	r4, #28
    4e54:	fb03 0004 	mla	r0, r3, r4, r0
    4e58:	2100      	movs	r1, #0
}
    4e5a:	bc10      	pop	{r4}
	notify(mgr, 0);
    4e5c:	4710      	bx	r2

00004e5e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4e5e:	2000      	movs	r0, #0
    4e60:	f000 b9a6 	b.w	51b0 <nrfx_clock_stop>

00004e64 <blocking_start_callback>:
{
    4e64:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    4e66:	f7ff b8f5 	b.w	4054 <z_impl_k_sem_give>

00004e6a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e6a:	6843      	ldr	r3, [r0, #4]
    4e6c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4e6e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4e72:	600b      	str	r3, [r1, #0]
}
    4e74:	2000      	movs	r0, #0
    4e76:	4770      	bx	lr

00004e78 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e78:	6843      	ldr	r3, [r0, #4]
    4e7a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    4e7c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4e80:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4e84:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4e88:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4e8c:	2000      	movs	r0, #0
    4e8e:	4770      	bx	lr

00004e90 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e90:	6843      	ldr	r3, [r0, #4]
    4e92:	685b      	ldr	r3, [r3, #4]
}
    4e94:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4e96:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4e9a:	4770      	bx	lr

00004e9c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e9c:	6843      	ldr	r3, [r0, #4]
    4e9e:	685b      	ldr	r3, [r3, #4]
}
    4ea0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4ea2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4ea6:	4770      	bx	lr

00004ea8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ea8:	6843      	ldr	r3, [r0, #4]
    4eaa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4eac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4eb0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4eb4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4eb6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4eba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4ebe:	2000      	movs	r0, #0
    4ec0:	4770      	bx	lr

00004ec2 <gpio_nrfx_manage_callback>:
{
    4ec2:	b510      	push	{r4, lr}
	return port->data;
    4ec4:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4ec6:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4ec8:	b1f8      	cbz	r0, 4f0a <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4eca:	4288      	cmp	r0, r1
    4ecc:	d119      	bne.n	4f02 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4ece:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4ed0:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4ed2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4ed4:	42a1      	cmp	r1, r4
    4ed6:	d100      	bne.n	4eda <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4ed8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4eda:	2000      	movs	r0, #0
    4edc:	6008      	str	r0, [r1, #0]
	if (set) {
    4ede:	b12a      	cbz	r2, 4eec <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4ee0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4ee2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4ee4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4ee6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4ee8:	b902      	cbnz	r2, 4eec <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    4eea:	6099      	str	r1, [r3, #8]
	return 0;
    4eec:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4eee:	e010      	b.n	4f12 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ef0:	4281      	cmp	r1, r0
    4ef2:	d106      	bne.n	4f02 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4ef4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4ef6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4ef8:	6898      	ldr	r0, [r3, #8]
    4efa:	4281      	cmp	r1, r0
    4efc:	d1ed      	bne.n	4eda <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4efe:	609c      	str	r4, [r3, #8]
}
    4f00:	e7eb      	b.n	4eda <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4f02:	4604      	mov	r4, r0
    4f04:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4f06:	2800      	cmp	r0, #0
    4f08:	d1f2      	bne.n	4ef0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    4f0a:	2a00      	cmp	r2, #0
    4f0c:	d1e8      	bne.n	4ee0 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4f0e:	f06f 0015 	mvn.w	r0, #21
}
    4f12:	bd10      	pop	{r4, pc}

00004f14 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    4f14:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    4f16:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    4f18:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    4f1a:	d405      	bmi.n	4f28 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    4f1c:	f3c1 0242 	ubfx	r2, r1, #1, #3
    4f20:	2a01      	cmp	r2, #1
    4f22:	d004      	beq.n	4f2e <i2c_nrfx_twi_configure+0x1a>
    4f24:	2a02      	cmp	r2, #2
    4f26:	d00a      	beq.n	4f3e <i2c_nrfx_twi_configure+0x2a>
    4f28:	f06f 0015 	mvn.w	r0, #21
}
    4f2c:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    4f2e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    4f30:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    4f34:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    4f38:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    4f3a:	2000      	movs	r0, #0
    4f3c:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    4f3e:	681b      	ldr	r3, [r3, #0]
    4f40:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    4f44:	e7f6      	b.n	4f34 <i2c_nrfx_twi_configure+0x20>

00004f46 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    4f46:	6902      	ldr	r2, [r0, #16]
{
    4f48:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4f4a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4f4e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4f52:	2000      	movs	r0, #0
    4f54:	4770      	bx	lr

00004f56 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4f56:	6843      	ldr	r3, [r0, #4]
    4f58:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4f5a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4f5e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4f62:	4770      	bx	lr

00004f64 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4f64:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4f66:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4f68:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f6a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4f6e:	b150      	cbz	r0, 4f86 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4f70:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f72:	2000      	movs	r0, #0
    4f74:	7812      	ldrb	r2, [r2, #0]
    4f76:	700a      	strb	r2, [r1, #0]
    4f78:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4f7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f80:	2201      	movs	r2, #1
    4f82:	601a      	str	r2, [r3, #0]
	return 0;
    4f84:	4770      	bx	lr
		return -1;
    4f86:	f04f 30ff 	mov.w	r0, #4294967295
}
    4f8a:	4770      	bx	lr

00004f8c <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4f8c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4f8e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f90:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4f94:	b940      	cbnz	r0, 4fa8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4f96:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4f98:	079b      	lsls	r3, r3, #30
    4f9a:	d406      	bmi.n	4faa <is_tx_ready.isra.0+0x1e>
    4f9c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4fa0:	3800      	subs	r0, #0
    4fa2:	bf18      	it	ne
    4fa4:	2001      	movne	r0, #1
    4fa6:	4770      	bx	lr
    4fa8:	2001      	movs	r0, #1
}
    4faa:	4770      	bx	lr

00004fac <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4fac:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4fae:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4fb0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4fb4:	05c9      	lsls	r1, r1, #23
    4fb6:	d518      	bpl.n	4fea <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fb8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4fbc:	b1a9      	cbz	r1, 4fea <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4fbe:	f04f 0020 	mov.w	r0, #32
    4fc2:	f3ef 8111 	mrs	r1, BASEPRI
    4fc6:	f380 8812 	msr	BASEPRI_MAX, r0
    4fca:	f3bf 8f6f 	isb	sy
    4fce:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4fd2:	b130      	cbz	r0, 4fe2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4fd4:	2000      	movs	r0, #0
    4fd6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4fda:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4fde:	2001      	movs	r0, #1
    4fe0:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4fe2:	f381 8811 	msr	BASEPRI, r1
    4fe6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4fea:	6852      	ldr	r2, [r2, #4]
    4fec:	06d2      	lsls	r2, r2, #27
    4fee:	d515      	bpl.n	501c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4ff0:	f04f 0120 	mov.w	r1, #32
    4ff4:	f3ef 8211 	mrs	r2, BASEPRI
    4ff8:	f381 8812 	msr	BASEPRI_MAX, r1
    4ffc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5000:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5004:	b111      	cbz	r1, 500c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5006:	2100      	movs	r1, #0
    5008:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    500c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5010:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5014:	f382 8811 	msr	BASEPRI, r2
    5018:	f3bf 8f6f 	isb	sy
}
    501c:	4770      	bx	lr

0000501e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    501e:	4770      	bx	lr

00005020 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5020:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5024:	009b      	lsls	r3, r3, #2
    5026:	b29b      	uxth	r3, r3
    5028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    502c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5030:	2200      	movs	r2, #0
    5032:	601a      	str	r2, [r3, #0]
    5034:	681b      	ldr	r3, [r3, #0]
}
    5036:	4770      	bx	lr

00005038 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5038:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    503a:	6843      	ldr	r3, [r0, #4]
    503c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    503e:	7a05      	ldrb	r5, [r0, #8]
    5040:	6844      	ldr	r4, [r0, #4]
    5042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    5046:	42a3      	cmp	r3, r4
    5048:	d302      	bcc.n	5050 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    504a:	f06f 0001 	mvn.w	r0, #1
}
    504e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5050:	795c      	ldrb	r4, [r3, #5]
    5052:	428c      	cmp	r4, r1
    5054:	d001      	beq.n	505a <pinctrl_lookup_state+0x22>
		(*state)++;
    5056:	3308      	adds	r3, #8
    5058:	e7f0      	b.n	503c <pinctrl_lookup_state+0x4>
			return 0;
    505a:	2000      	movs	r0, #0
    505c:	e7f7      	b.n	504e <pinctrl_lookup_state+0x16>

0000505e <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5062:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5066:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    5068:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    506c:	4281      	cmp	r1, r0
    506e:	d102      	bne.n	5076 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    5070:	2000      	movs	r0, #0
}
    5072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5076:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    5078:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    507c:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    5080:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    5082:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    5086:	bf08      	it	eq
    5088:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    508c:	2d19      	cmp	r5, #25
    508e:	d86a      	bhi.n	5166 <pinctrl_configure_pins+0x108>
    5090:	e8df f005 	tbb	[pc, r5]
    5094:	1f1c170d 	.word	0x1f1c170d
    5098:	691f2e22 	.word	0x691f2e22
    509c:	32696969 	.word	0x32696969
    50a0:	69696955 	.word	0x69696955
    50a4:	69696969 	.word	0x69696969
    50a8:	60586969 	.word	0x60586969
    50ac:	6663      	.short	0x6663
			NRF_PSEL_UART(reg, TXD) = pin;
    50ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    50b2:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    50b6:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    50ba:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    50be:	2501      	movs	r5, #1
    50c0:	e002      	b.n	50c8 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    50c2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    50c6:	2500      	movs	r5, #0
    50c8:	46ac      	mov	ip, r5
    50ca:	e01c      	b.n	5106 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    50cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    50d0:	e7ef      	b.n	50b2 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    50d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    50d6:	e7f6      	b.n	50c6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    50d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    50dc:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    50de:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    50e2:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    50e6:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    50ea:	f04f 0c01 	mov.w	ip, #1
    50ee:	e00a      	b.n	5106 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    50f0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    50f4:	2501      	movs	r5, #1
    50f6:	e7f2      	b.n	50de <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    50f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    50fc:	2c00      	cmp	r4, #0
    50fe:	d1e2      	bne.n	50c6 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5100:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    5102:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    5104:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5106:	f850 eb04 	ldr.w	lr, [r0], #4
    510a:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    510e:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5112:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    5116:	ea4f 2404 	mov.w	r4, r4, lsl #8
    511a:	bf18      	it	ne
    511c:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    5120:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5124:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    5128:	bf18      	it	ne
    512a:	2501      	movne	r5, #1
    512c:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    5130:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5134:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    5138:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    513c:	e796      	b.n	506c <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    513e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    5142:	e7db      	b.n	50fc <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    5144:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    5148:	6805      	ldr	r5, [r0, #0]
    514a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    514e:	2d00      	cmp	r5, #0
    5150:	d0d0      	beq.n	50f4 <pinctrl_configure_pins+0x96>
    5152:	e7ae      	b.n	50b2 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    5154:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    5158:	e7f6      	b.n	5148 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    515a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    515e:	e7f3      	b.n	5148 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    5160:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    5164:	e7f0      	b.n	5148 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    5166:	f06f 0085 	mvn.w	r0, #133	; 0x85
    516a:	e782      	b.n	5072 <pinctrl_configure_pins+0x14>

0000516c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    516c:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    516e:	2000      	movs	r0, #0
    5170:	f7fc fdc6 	bl	1d00 <sys_arch_reboot>

00005174 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    5174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5178:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    517c:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    517e:	bf04      	itt	eq
    5180:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    5184:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    5188:	1f83      	subs	r3, r0, #6
    518a:	4258      	negs	r0, r3
    518c:	4158      	adcs	r0, r3
    518e:	4770      	bx	lr

00005190 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5190:	4700      	bx	r0

00005192 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5192:	f000 b9d8 	b.w	5546 <z_impl_k_busy_wait>

00005196 <nrfx_clock_enable>:
{
    5196:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5198:	2000      	movs	r0, #0
    519a:	f7fc fa25 	bl	15e8 <arch_irq_is_enabled>
    519e:	b908      	cbnz	r0, 51a4 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    51a0:	f7fc fa14 	bl	15cc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    51a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51a8:	2200      	movs	r2, #0
    51aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    51ae:	bd08      	pop	{r3, pc}

000051b0 <nrfx_clock_stop>:
    clock_stop(domain);
    51b0:	f7fd beba 	b.w	2f28 <clock_stop>

000051b4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    51b4:	f000 001f 	and.w	r0, r0, #31
    51b8:	0080      	lsls	r0, r0, #2
    51ba:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    51be:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    51c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    51c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    51ca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    51ce:	4770      	bx	lr

000051d0 <twi_transfer>:
{
    51d0:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    51d2:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    51d6:	b12b      	cbz	r3, 51e4 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51d8:	2300      	movs	r3, #0
    51da:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    51de:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    51e2:	2301      	movs	r3, #1
    if (p_cb->error)
    51e4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    51e8:	b322      	cbz	r2, 5234 <twi_transfer+0x64>
    51ea:	2200      	movs	r2, #0
    51ec:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    51f0:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    51f4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    51f8:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    51fc:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    5200:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    5204:	2b00      	cmp	r3, #0
    5206:	d079      	beq.n	52fc <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    5208:	2200      	movs	r2, #0
    520a:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    520e:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    5212:	2a00      	cmp	r2, #0
    5214:	d137      	bne.n	5286 <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    5216:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    5218:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    521a:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    521c:	bf1f      	itttt	ne
    521e:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    5220:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5224:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    5228:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    522a:	f083 0301 	eor.w	r3, r3, #1
    522e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    5232:	e028      	b.n	5286 <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5234:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5238:	b114      	cbz	r4, 5240 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    523a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    523e:	e00e      	b.n	525e <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5240:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    5244:	b36a      	cbz	r2, 52a2 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5246:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    524a:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    524e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    5250:	3201      	adds	r2, #1
    5252:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5254:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5258:	b145      	cbz	r5, 526c <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    525a:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    525e:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5262:	2201      	movs	r2, #1
    5264:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    5266:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    526a:	e7cb      	b.n	5204 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    526c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    526e:	42a2      	cmp	r2, r4
    5270:	d204      	bcs.n	527c <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    5272:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    5274:	5ca2      	ldrb	r2, [r4, r2]
    5276:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    527a:	e7c3      	b.n	5204 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    527c:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    5280:	b11a      	cbz	r2, 528a <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5282:	2301      	movs	r3, #1
    5284:	61c3      	str	r3, [r0, #28]
                    return false;
    5286:	2000      	movs	r0, #0
}
    5288:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    528a:	6a0a      	ldr	r2, [r1, #32]
    528c:	f012 0f40 	tst.w	r2, #64	; 0x40
    5290:	f04f 0201 	mov.w	r2, #1
    5294:	d003      	beq.n	529e <twi_transfer+0xce>
    5296:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    5298:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    529c:	e7f3      	b.n	5286 <twi_transfer+0xb6>
    529e:	6142      	str	r2, [r0, #20]
    52a0:	e7b0      	b.n	5204 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52a2:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    52a6:	2c00      	cmp	r4, #0
    52a8:	d0ac      	beq.n	5204 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52aa:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    52ae:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52b2:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    52b6:	2c00      	cmp	r4, #0
    52b8:	d1bf      	bne.n	523a <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    52ba:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    52bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    52be:	42a2      	cmp	r2, r4
    52c0:	d2a0      	bcs.n	5204 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    52c2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    52c4:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    52c8:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    52ca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    52cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    52ce:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    52d0:	1e65      	subs	r5, r4, #1
    52d2:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    52d4:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    52d6:	d108      	bne.n	52ea <twi_transfer+0x11a>
    52d8:	6a0a      	ldr	r2, [r1, #32]
    52da:	0654      	lsls	r4, r2, #25
    52dc:	d402      	bmi.n	52e4 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    52de:	2202      	movs	r2, #2
    52e0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52e4:	2201      	movs	r2, #1
    52e6:	6202      	str	r2, [r0, #32]
    52e8:	e78c      	b.n	5204 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    52ea:	42a2      	cmp	r2, r4
    52ec:	d1fa      	bne.n	52e4 <twi_transfer+0x114>
    52ee:	6a0a      	ldr	r2, [r1, #32]
    52f0:	0652      	lsls	r2, r2, #25
    52f2:	d587      	bpl.n	5204 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    52f4:	2302      	movs	r3, #2
    52f6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    52fa:	e7c4      	b.n	5286 <twi_transfer+0xb6>
    return true;
    52fc:	2001      	movs	r0, #1
    52fe:	e7c3      	b.n	5288 <twi_transfer+0xb8>

00005300 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5300:	f7fe bcda 	b.w	3cb8 <_DoInit>

00005304 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5304:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5306:	f7ff fffb 	bl	5300 <SEGGER_RTT_Init>

	return 0;
}
    530a:	2000      	movs	r0, #0
    530c:	bd08      	pop	{r3, pc}

0000530e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    530e:	4770      	bx	lr

00005310 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5310:	b140      	cbz	r0, 5324 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5312:	68c3      	ldr	r3, [r0, #12]
    5314:	7858      	ldrb	r0, [r3, #1]
    5316:	f010 0001 	ands.w	r0, r0, #1
    531a:	bf1e      	ittt	ne
    531c:	7818      	ldrbne	r0, [r3, #0]
    531e:	fab0 f080 	clzne	r0, r0
    5322:	0940      	lsrne	r0, r0, #5
}
    5324:	4770      	bx	lr

00005326 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5328:	4605      	mov	r5, r0
    532a:	460e      	mov	r6, r1
	__asm__ volatile(
    532c:	f04f 0320 	mov.w	r3, #32
    5330:	f3ef 8711 	mrs	r7, BASEPRI
    5334:	f383 8812 	msr	BASEPRI_MAX, r3
    5338:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    533c:	f7ff f96e 	bl	461c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5340:	4631      	mov	r1, r6
    5342:	4604      	mov	r4, r0
    5344:	4628      	mov	r0, r5
    5346:	f7ff ff11 	bl	516c <k_sys_fatal_error_handler>
	__asm__ volatile(
    534a:	f387 8811 	msr	BASEPRI, r7
    534e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5352:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5354:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5358:	f7fc bbd6 	b.w	1b08 <z_impl_k_thread_abort>

0000535c <z_early_memset>:
	(void) memset(dst, c, n);
    535c:	f7ff bcd9 	b.w	4d12 <memset>

00005360 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    5360:	f7ff bccc 	b.w	4cfc <memcpy>

00005364 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5364:	f3ef 8005 	mrs	r0, IPSR
}
    5368:	3800      	subs	r0, #0
    536a:	bf18      	it	ne
    536c:	2001      	movne	r0, #1
    536e:	4770      	bx	lr

00005370 <z_pm_save_idle_exit>:
{
    5370:	b508      	push	{r3, lr}
	pm_system_resume();
    5372:	f7fc f801 	bl	1378 <pm_system_resume>
}
    5376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    537a:	f7ff be50 	b.w	501e <sys_clock_idle_exit>

0000537e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    537e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    5382:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5384:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5386:	2300      	movs	r3, #0
	node->prev = NULL;
    5388:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    538c:	4770      	bx	lr

0000538e <unpend_thread_no_timeout>:
{
    538e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    5390:	f7ff fff5 	bl	537e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5394:	7b43      	ldrb	r3, [r0, #13]
    5396:	f023 0302 	bic.w	r3, r3, #2
    539a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    539c:	2300      	movs	r3, #0
    539e:	6083      	str	r3, [r0, #8]
}
    53a0:	bd08      	pop	{r3, pc}

000053a2 <z_thread_timeout>:
{
    53a2:	b510      	push	{r4, lr}
    53a4:	4601      	mov	r1, r0
	__asm__ volatile(
    53a6:	f04f 0320 	mov.w	r3, #32
    53aa:	f3ef 8411 	mrs	r4, BASEPRI
    53ae:	f383 8812 	msr	BASEPRI_MAX, r3
    53b2:	f3bf 8f6f 	isb	sy
		if (!killed) {
    53b6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    53ba:	f013 0f28 	tst.w	r3, #40	; 0x28
    53be:	d10d      	bne.n	53dc <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    53c0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    53c4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    53c6:	b10b      	cbz	r3, 53cc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    53c8:	f7ff ffe1 	bl	538e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    53cc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    53d0:	f023 0314 	bic.w	r3, r3, #20
    53d4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    53d8:	f7fe fef0 	bl	41bc <ready_thread>
	__asm__ volatile(
    53dc:	f384 8811 	msr	BASEPRI, r4
    53e0:	f3bf 8f6f 	isb	sy
}
    53e4:	bd10      	pop	{r4, pc}

000053e6 <add_to_waitq_locked>:
{
    53e6:	b538      	push	{r3, r4, r5, lr}
    53e8:	4604      	mov	r4, r0
    53ea:	460d      	mov	r5, r1
	unready_thread(thread);
    53ec:	f7fe ff1a 	bl	4224 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    53f0:	7b63      	ldrb	r3, [r4, #13]
    53f2:	f043 0302 	orr.w	r3, r3, #2
    53f6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    53f8:	b1e5      	cbz	r5, 5434 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    53fa:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    53fc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53fe:	429d      	cmp	r5, r3
    5400:	d109      	bne.n	5416 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    5402:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5404:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5408:	601c      	str	r4, [r3, #0]
	list->tail = node;
    540a:	606c      	str	r4, [r5, #4]
}
    540c:	e012      	b.n	5434 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    540e:	686a      	ldr	r2, [r5, #4]
    5410:	4293      	cmp	r3, r2
    5412:	d0f6      	beq.n	5402 <add_to_waitq_locked+0x1c>
    5414:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5416:	2b00      	cmp	r3, #0
    5418:	d0f3      	beq.n	5402 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    541a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    541e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5422:	428a      	cmp	r2, r1
    5424:	d0f3      	beq.n	540e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5426:	4291      	cmp	r1, r2
    5428:	ddf1      	ble.n	540e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    542a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    542c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5430:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5432:	605c      	str	r4, [r3, #4]
}
    5434:	bd38      	pop	{r3, r4, r5, pc}

00005436 <z_ready_thread>:
{
    5436:	b510      	push	{r4, lr}
	__asm__ volatile(
    5438:	f04f 0320 	mov.w	r3, #32
    543c:	f3ef 8411 	mrs	r4, BASEPRI
    5440:	f383 8812 	msr	BASEPRI_MAX, r3
    5444:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    5448:	f7fe feb8 	bl	41bc <ready_thread>
	__asm__ volatile(
    544c:	f384 8811 	msr	BASEPRI, r4
    5450:	f3bf 8f6f 	isb	sy
}
    5454:	bd10      	pop	{r4, pc}

00005456 <z_unpend_first_thread>:
{
    5456:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5458:	f04f 0320 	mov.w	r3, #32
    545c:	f3ef 8511 	mrs	r5, BASEPRI
    5460:	f383 8812 	msr	BASEPRI_MAX, r3
    5464:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5468:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    546a:	42a0      	cmp	r0, r4
    546c:	d00d      	beq.n	548a <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    546e:	b134      	cbz	r4, 547e <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    5470:	4620      	mov	r0, r4
    5472:	f7ff ff8c 	bl	538e <unpend_thread_no_timeout>
    5476:	f104 0018 	add.w	r0, r4, #24
    547a:	f000 f81e 	bl	54ba <z_abort_timeout>
	__asm__ volatile(
    547e:	f385 8811 	msr	BASEPRI, r5
    5482:	f3bf 8f6f 	isb	sy
}
    5486:	4620      	mov	r0, r4
    5488:	bd38      	pop	{r3, r4, r5, pc}
    548a:	2400      	movs	r4, #0
    548c:	e7f7      	b.n	547e <z_unpend_first_thread+0x28>

0000548e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    548e:	4603      	mov	r3, r0
    5490:	b920      	cbnz	r0, 549c <z_reschedule_irqlock+0xe>
    5492:	f3ef 8205 	mrs	r2, IPSR
    5496:	b90a      	cbnz	r2, 549c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5498:	f7fc b8ec 	b.w	1674 <arch_swap>
    549c:	f383 8811 	msr	BASEPRI, r3
    54a0:	f3bf 8f6f 	isb	sy
}
    54a4:	4770      	bx	lr

000054a6 <z_reschedule_unlocked>:
	__asm__ volatile(
    54a6:	f04f 0320 	mov.w	r3, #32
    54aa:	f3ef 8011 	mrs	r0, BASEPRI
    54ae:	f383 8812 	msr	BASEPRI_MAX, r3
    54b2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    54b6:	f7ff bfea 	b.w	548e <z_reschedule_irqlock>

000054ba <z_abort_timeout>:
{
    54ba:	b510      	push	{r4, lr}
    54bc:	f04f 0220 	mov.w	r2, #32
    54c0:	f3ef 8411 	mrs	r4, BASEPRI
    54c4:	f382 8812 	msr	BASEPRI_MAX, r2
    54c8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    54cc:	6803      	ldr	r3, [r0, #0]
    54ce:	b13b      	cbz	r3, 54e0 <z_abort_timeout+0x26>
			remove_timeout(to);
    54d0:	f7ff f956 	bl	4780 <remove_timeout>
			ret = 0;
    54d4:	2000      	movs	r0, #0
	__asm__ volatile(
    54d6:	f384 8811 	msr	BASEPRI, r4
    54da:	f3bf 8f6f 	isb	sy
}
    54de:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    54e0:	f06f 0015 	mvn.w	r0, #21
    54e4:	e7f7      	b.n	54d6 <z_abort_timeout+0x1c>

000054e6 <z_get_next_timeout_expiry>:
{
    54e6:	b510      	push	{r4, lr}
	__asm__ volatile(
    54e8:	f04f 0320 	mov.w	r3, #32
    54ec:	f3ef 8411 	mrs	r4, BASEPRI
    54f0:	f383 8812 	msr	BASEPRI_MAX, r3
    54f4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    54f8:	f7ff f91a 	bl	4730 <next_timeout>
	__asm__ volatile(
    54fc:	f384 8811 	msr	BASEPRI, r4
    5500:	f3bf 8f6f 	isb	sy
}
    5504:	bd10      	pop	{r4, pc}

00005506 <z_set_timeout_expiry>:
{
    5506:	b570      	push	{r4, r5, r6, lr}
    5508:	4604      	mov	r4, r0
    550a:	460d      	mov	r5, r1
	__asm__ volatile(
    550c:	f04f 0320 	mov.w	r3, #32
    5510:	f3ef 8611 	mrs	r6, BASEPRI
    5514:	f383 8812 	msr	BASEPRI_MAX, r3
    5518:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    551c:	f7ff f908 	bl	4730 <next_timeout>
			      || (ticks <= next_to);
    5520:	2801      	cmp	r0, #1
    5522:	dd07      	ble.n	5534 <z_set_timeout_expiry+0x2e>
    5524:	42a0      	cmp	r0, r4
    5526:	db05      	blt.n	5534 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    5528:	42a0      	cmp	r0, r4
    552a:	4629      	mov	r1, r5
    552c:	bfa8      	it	ge
    552e:	4620      	movge	r0, r4
    5530:	f7fd fb1e 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    5534:	f386 8811 	msr	BASEPRI, r6
    5538:	f3bf 8f6f 	isb	sy
}
    553c:	bd70      	pop	{r4, r5, r6, pc}

0000553e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    553e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5540:	f7ff fa12 	bl	4968 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5544:	bd08      	pop	{r3, pc}

00005546 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    5546:	b108      	cbz	r0, 554c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5548:	f7fc bbf0 	b.w	1d2c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    554c:	4770      	bx	lr

0000554e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    554e:	4770      	bx	lr
